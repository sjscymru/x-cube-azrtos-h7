
Tx_Thread_Sync.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca8  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000668  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5b0  0800a5b0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a5b0  0800a5b0  0001a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5b8  0800a5b8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5b8  0800a5b8  0001a5b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  24000000  0800a5c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000910  24000080  0800a640  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000990  0800a640  00020990  2**0
                  ALLOC
 11 .bkpram       00000000  38800000  38800000  00020080  2**0
                  CONTENTS
 12 .extram       00000000  d0000000  d0000000  00020080  2**0
                  CONTENTS
 13 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 14 .debug_line   000254e2  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_info   00040652  00000000  00000000  00045590  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 0000797b  00000000  00000000  00085be2  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001680  00000000  00000000  0008d560  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00191a09  00000000  00000000  0008ebe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001298  00000000  00000000  002205f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00041011  00000000  00000000  00221888  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  00262899  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000055c0  00000000  00000000  00262914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009f30 	.word	0x08009f30

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	08009f30 	.word	0x08009f30

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
@
@    /* Set base of available memory to end of non-initialised RAM area.  */
@
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 80002e2:	481d      	ldr	r0, [pc, #116]	; (8000358 <__tx_DBGHandler+0x6>)
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 80002e4:	491d      	ldr	r1, [pc, #116]	; (800035c <__tx_DBGHandler+0xa>)
    ADD     r1, r1, #4                              @
 80002e6:	f101 0104 	add.w	r1, r1, #4
    STR     r1, [r0]                                @ Setup first unused memory pointer
 80002ea:	6001      	str	r1, [r0, #0]
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002ec:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002f0:	491b      	ldr	r1, [pc, #108]	; (8000360 <__tx_DBGHandler+0xe>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002f2:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002f6:	481b      	ldr	r0, [pc, #108]	; (8000364 <__tx_DBGHandler+0x12>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002f8:	4919      	ldr	r1, [pc, #100]	; (8000360 <__tx_DBGHandler+0xe>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002fa:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002fe:	481a      	ldr	r0, [pc, #104]	; (8000368 <__tx_DBGHandler+0x16>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000300:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000302:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 8000306:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 1kHz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000308:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800030c:	4917      	ldr	r1, [pc, #92]	; (800036c <__tx_DBGHandler+0x1a>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 800030e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000310:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 8000314:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 8000316:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 800031a:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 800031e:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000322:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000326:	4912      	ldr	r1, [pc, #72]	; (8000370 <__tx_DBGHandler+0x1e>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000328:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 800032c:	4770      	bx	lr

0800032e <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800032e:	f7ff bffe 	b.w	800032e <__tx_BadHandler>

08000332 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000332:	f7ff bffe 	b.w	8000332 <__tx_HardfaultHandler>

08000336 <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 8000336:	f7ff bffe 	b.w	8000336 <__tx_SVCallHandler>

0800033a <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 800033a:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000340:	4770      	bx	lr

08000342 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000342:	b501      	push	{r0, lr}
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 8000344:	f000 f88c 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000348:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 800034c:	4770      	bx	lr

0800034e <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 800034e:	f7ff bffe 	b.w	800034e <__tx_NMIHandler>

08000352 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000352:	f7ff bffe 	b.w	8000352 <__tx_DBGHandler>
 8000356:	0000      	.short	0x0000
    LDR     r0, =_tx_initialize_unused_memory       @ Build address of unused memory pointer
 8000358:	24000364 	.word	0x24000364
    LDR     r1, =__RAM_segment_used_end__           @ Build first free address
 800035c:	24000f90 	.word	0x24000f90
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000360:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000364:	24000414 	.word	0x24000414
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000368:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 800036c:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 8000370:	40ff0000 	.word	0x40ff0000
	...

08000380 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOV     r0, #0                                  @ Build value for TX_FALSE
 8000380:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000384:	4a22      	ldr	r2, [pc, #136]	; (8000410 <__tx_ts_ready+0x12>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 8000386:	6010      	str	r0, [r2, #0]
    MSR     CONTROL, r0                             @ Setup new CONTROL register
#endif
@
@    /* Enable interrupts */
@
    CPSIE   i
 8000388:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    MOV     r0, #0x10000000                         @ Load PENDSVSET bit
 800038a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         @ Load NVIC base
 800038e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        @ Set PENDSVBIT in ICSR
 8000392:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             @ Complete all memory accesses
 8000396:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 800039a:	f3bf 8f6f 	isb	sy

0800039e <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 800039e:	e7fe      	b.n	800039e <__tx_wait_here>

080003a0 <PendSV_Handler>:
    PUSH    {r0, lr}                                @ Save LR (and r0 just for alignment)
    BL      _tx_execution_thread_exit               @ Call the thread exit function
    POP     {r0, lr}                                @ Recover LR
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80003a0:	481c      	ldr	r0, [pc, #112]	; (8000414 <__tx_ts_ready+0x16>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80003a2:	4a1d      	ldr	r2, [pc, #116]	; (8000418 <__tx_ts_ready+0x1a>)
    MOV     r3, #0                                  @ Build NULL value
 80003a4:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80003a8:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CBZ     r1, __tx_ts_new                         @ If NULL, skip preservation
 80003aa:	b169      	cbz	r1, 80003c8 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80003ac:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                @ Pickup PSP pointer (thread's stack pointer)
 80003ae:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          @ Save its remaining registers
 80003b2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_save
    VSTMDB  r12!,{s16-s31}                          @ Yes, save additional VFP registers
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80003b6:	4c19      	ldr	r4, [pc, #100]	; (800041c <__tx_ts_ready+0x1e>)
    STMDB   r12!, {LR}                              @ Save LR on the stack
 80003b8:	f84c ed04 	str.w	lr, [ip, #-4]!
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r5, [r4]                                @ Pickup current time-slice
 80003bc:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           @ Save the thread stack pointer
 80003be:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         @ If not active, skip processing
 80003c2:	b10d      	cbz	r5, 80003c8 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80003c4:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    STR     r3, [r4]                                @ Clear time-slice
 80003c6:	6023      	str	r3, [r4, #0]

080003c8 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80003c8:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80003ca:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        @ No, skip to the wait processing
 80003cc:	b189      	cbz	r1, 80003f2 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80003ce:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80003d0:	b662      	cpsie	i

080003d2 <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80003d2:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80003d4:	4c11      	ldr	r4, [pc, #68]	; (800041c <__tx_ts_ready+0x1e>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 80003d6:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              @ Increment the thread run count
 80003d8:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 80003dc:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 80003de:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r12, [r1, #8]                           @ Pickup thread's stack pointer
 80003e0:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              @ Pickup LR
 80003e4:	f85c eb04 	ldr.w	lr, [ip], #4
    TST     LR, #0x10                               @ Determine if the VFP extended frame is present
    BNE     _skip_vfp_restore                       @ If not, skip VFP restore
    VLDMIA  r12!, {s16-s31}                         @ Yes, restore additional VFP registers
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          @ Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                @ Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 80003f2:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       @ If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>
#ifdef TX_ENABLE_WFI
    DSB                                             @ Ensure no outstanding memory transactions
    WFI                                             @ Wait for interrupt
    ISB                                             @ Ensure pipeline is flushed
#endif
    CPSIE   i                                       @ Enable interrupts
 80003fa:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    MOV     r7, #0x08000000                         @ Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         @ Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        @ Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 800040a:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 800040c:	e7e1      	b.n	80003d2 <__tx_ts_restore>
 800040e:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000410:	24000418 	.word	0x24000418
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000414:	2400041c 	.word	0x2400041c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000418:	24000420 	.word	0x24000420
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 800041c:	240004b0 	.word	0x240004b0

08000420 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            @ Align frame
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             @ Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            @ Save on the stack
 800042e:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOV     r3, #0                                  @ Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r11
 8000442:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         @ Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           @ Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         @ Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           @ Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000460:	4926      	ldr	r1, [pc, #152]	; (80004fc <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              @ Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 8000468:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 800046a:	4b25      	ldr	r3, [pc, #148]	; (8000500 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 800046e:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 8000470:	d008      	beq.n	8000484 <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUB     r2, r2, #1                              @ Decrement the time-slice
 8000472:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 8000476:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 8000478:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 800047a:	d103      	bne.n	8000484 <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  @ Build expired value
 800047e:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 8000482:	6018      	str	r0, [r3, #0]

08000484 <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000484:	4920      	ldr	r1, [pc, #128]	; (8000508 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 8000486:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 8000488:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 800048a:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 800048c:	d004      	beq.n	8000498 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  @ Build expired value
 8000490:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 8000494:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 8000496:	e008      	b.n	80004aa <__tx_timer_done>

08000498 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADD     r0, r0, #4                              @ Move to next timer
 8000498:	f100 0004 	add.w	r0, r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 800049e:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80004a0:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80004a2:	d101      	bne.n	80004a8 <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80004a4:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80004a6:	6818      	ldr	r0, [r3, #0]

080004a8 <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80004a8:	6008      	str	r0, [r1, #0]

080004aa <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80004aa:	4b16      	ldr	r3, [pc, #88]	; (8000504 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80004ac:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80004ae:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80004b0:	d103      	bne.n	80004ba <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80004b2:	4916      	ldr	r1, [pc, #88]	; (800050c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80004b4:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80004b6:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80004b8:	d01c      	beq.n	80004f4 <__tx_timer_nothing_expired>

080004ba <__tx_something_expired>:
@
__tx_something_expired:
@
@
    STMDB   sp!, {r0, lr}                           @ Save the lr register on the stack
 80004ba:	e92d 4001 	stmdb	sp!, {r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 80004be:	4913      	ldr	r1, [pc, #76]	; (800050c <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80004c0:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 80004c2:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 80004c4:	d001      	beq.n	80004ca <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process();
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 80004c6:	f008 fe75 	bl	80091b4 <_tx_timer_expiration_process>

080004ca <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 80004cc:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 80004ce:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 80004d0:	d00e      	beq.n	80004f0 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();
@
    BL      _tx_thread_time_slice                   @ Call time-slice processing
 80004d2:	f008 faa9 	bl	8008a28 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80004d6:	4810      	ldr	r0, [pc, #64]	; (8000518 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 80004d8:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          @ Yes, skip the PendSV logic
 80004da:	b949      	cbnz	r1, 80004f0 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80004dc:	480f      	ldr	r0, [pc, #60]	; (800051c <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 80004de:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80004e0:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 80004e2:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 80004e4:	480f      	ldr	r0, [pc, #60]	; (8000524 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 80004e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  @ Are they the same?
 80004ea:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 80004ec:	d000      	beq.n	80004f0 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 80004ee:	6002      	str	r2, [r0, #0]

080004f0 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    LDMIA   sp!, {r0, lr}                           @ Recover lr register (r0 is just there for
 80004f0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004f4 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 80004f4:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 80004f8:	4770      	bx	lr
 80004fa:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80004fc:	24000988 	.word	0x24000988
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000500:	240004b0 	.word	0x240004b0
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000504:	24000984 	.word	0x24000984
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 8000508:	24000428 	.word	0x24000428
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 800050c:	240004ac 	.word	0x240004ac
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000510:	240004b8 	.word	0x240004b8
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000514:	24000570 	.word	0x24000570
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 8000518:	24000418 	.word	0x24000418
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 800051c:	2400041c 	.word	0x2400041c
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000520:	24000420 	.word	0x24000420
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000524:	e000ed04 	.word	0xe000ed04

08000528 <__aeabi_uldivmod>:
 8000528:	b953      	cbnz	r3, 8000540 <__aeabi_uldivmod+0x18>
 800052a:	b94a      	cbnz	r2, 8000540 <__aeabi_uldivmod+0x18>
 800052c:	2900      	cmp	r1, #0
 800052e:	bf08      	it	eq
 8000530:	2800      	cmpeq	r0, #0
 8000532:	bf1c      	itt	ne
 8000534:	f04f 31ff 	movne.w	r1, #4294967295
 8000538:	f04f 30ff 	movne.w	r0, #4294967295
 800053c:	f000 b972 	b.w	8000824 <__aeabi_idiv0>
 8000540:	f1ad 0c08 	sub.w	ip, sp, #8
 8000544:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000548:	f000 f806 	bl	8000558 <__udivmoddi4>
 800054c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000554:	b004      	add	sp, #16
 8000556:	4770      	bx	lr

08000558 <__udivmoddi4>:
 8000558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800055c:	9e08      	ldr	r6, [sp, #32]
 800055e:	4604      	mov	r4, r0
 8000560:	4688      	mov	r8, r1
 8000562:	2b00      	cmp	r3, #0
 8000564:	d14b      	bne.n	80005fe <__udivmoddi4+0xa6>
 8000566:	428a      	cmp	r2, r1
 8000568:	4615      	mov	r5, r2
 800056a:	d967      	bls.n	800063c <__udivmoddi4+0xe4>
 800056c:	fab2 f282 	clz	r2, r2
 8000570:	b14a      	cbz	r2, 8000586 <__udivmoddi4+0x2e>
 8000572:	f1c2 0720 	rsb	r7, r2, #32
 8000576:	fa01 f302 	lsl.w	r3, r1, r2
 800057a:	fa20 f707 	lsr.w	r7, r0, r7
 800057e:	4095      	lsls	r5, r2
 8000580:	ea47 0803 	orr.w	r8, r7, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800058a:	0c23      	lsrs	r3, r4, #16
 800058c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000590:	fa1f fc85 	uxth.w	ip, r5
 8000594:	fb0e 8817 	mls	r8, lr, r7, r8
 8000598:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059c:	fb07 f10c 	mul.w	r1, r7, ip
 80005a0:	4299      	cmp	r1, r3
 80005a2:	d909      	bls.n	80005b8 <__udivmoddi4+0x60>
 80005a4:	18eb      	adds	r3, r5, r3
 80005a6:	f107 30ff 	add.w	r0, r7, #4294967295
 80005aa:	f080 811b 	bcs.w	80007e4 <__udivmoddi4+0x28c>
 80005ae:	4299      	cmp	r1, r3
 80005b0:	f240 8118 	bls.w	80007e4 <__udivmoddi4+0x28c>
 80005b4:	3f02      	subs	r7, #2
 80005b6:	442b      	add	r3, r5
 80005b8:	1a5b      	subs	r3, r3, r1
 80005ba:	b2a4      	uxth	r4, r4
 80005bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80005c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80005c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005c8:	fb00 fc0c 	mul.w	ip, r0, ip
 80005cc:	45a4      	cmp	ip, r4
 80005ce:	d909      	bls.n	80005e4 <__udivmoddi4+0x8c>
 80005d0:	192c      	adds	r4, r5, r4
 80005d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80005d6:	f080 8107 	bcs.w	80007e8 <__udivmoddi4+0x290>
 80005da:	45a4      	cmp	ip, r4
 80005dc:	f240 8104 	bls.w	80007e8 <__udivmoddi4+0x290>
 80005e0:	3802      	subs	r0, #2
 80005e2:	442c      	add	r4, r5
 80005e4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80005e8:	eba4 040c 	sub.w	r4, r4, ip
 80005ec:	2700      	movs	r7, #0
 80005ee:	b11e      	cbz	r6, 80005f8 <__udivmoddi4+0xa0>
 80005f0:	40d4      	lsrs	r4, r2
 80005f2:	2300      	movs	r3, #0
 80005f4:	e9c6 4300 	strd	r4, r3, [r6]
 80005f8:	4639      	mov	r1, r7
 80005fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fe:	428b      	cmp	r3, r1
 8000600:	d909      	bls.n	8000616 <__udivmoddi4+0xbe>
 8000602:	2e00      	cmp	r6, #0
 8000604:	f000 80eb 	beq.w	80007de <__udivmoddi4+0x286>
 8000608:	2700      	movs	r7, #0
 800060a:	e9c6 0100 	strd	r0, r1, [r6]
 800060e:	4638      	mov	r0, r7
 8000610:	4639      	mov	r1, r7
 8000612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000616:	fab3 f783 	clz	r7, r3
 800061a:	2f00      	cmp	r7, #0
 800061c:	d147      	bne.n	80006ae <__udivmoddi4+0x156>
 800061e:	428b      	cmp	r3, r1
 8000620:	d302      	bcc.n	8000628 <__udivmoddi4+0xd0>
 8000622:	4282      	cmp	r2, r0
 8000624:	f200 80fa 	bhi.w	800081c <__udivmoddi4+0x2c4>
 8000628:	1a84      	subs	r4, r0, r2
 800062a:	eb61 0303 	sbc.w	r3, r1, r3
 800062e:	2001      	movs	r0, #1
 8000630:	4698      	mov	r8, r3
 8000632:	2e00      	cmp	r6, #0
 8000634:	d0e0      	beq.n	80005f8 <__udivmoddi4+0xa0>
 8000636:	e9c6 4800 	strd	r4, r8, [r6]
 800063a:	e7dd      	b.n	80005f8 <__udivmoddi4+0xa0>
 800063c:	b902      	cbnz	r2, 8000640 <__udivmoddi4+0xe8>
 800063e:	deff      	udf	#255	; 0xff
 8000640:	fab2 f282 	clz	r2, r2
 8000644:	2a00      	cmp	r2, #0
 8000646:	f040 808f 	bne.w	8000768 <__udivmoddi4+0x210>
 800064a:	1b49      	subs	r1, r1, r5
 800064c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000650:	fa1f f885 	uxth.w	r8, r5
 8000654:	2701      	movs	r7, #1
 8000656:	fbb1 fcfe 	udiv	ip, r1, lr
 800065a:	0c23      	lsrs	r3, r4, #16
 800065c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000660:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000664:	fb08 f10c 	mul.w	r1, r8, ip
 8000668:	4299      	cmp	r1, r3
 800066a:	d907      	bls.n	800067c <__udivmoddi4+0x124>
 800066c:	18eb      	adds	r3, r5, r3
 800066e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000672:	d202      	bcs.n	800067a <__udivmoddi4+0x122>
 8000674:	4299      	cmp	r1, r3
 8000676:	f200 80cd 	bhi.w	8000814 <__udivmoddi4+0x2bc>
 800067a:	4684      	mov	ip, r0
 800067c:	1a59      	subs	r1, r3, r1
 800067e:	b2a3      	uxth	r3, r4
 8000680:	fbb1 f0fe 	udiv	r0, r1, lr
 8000684:	fb0e 1410 	mls	r4, lr, r0, r1
 8000688:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800068c:	fb08 f800 	mul.w	r8, r8, r0
 8000690:	45a0      	cmp	r8, r4
 8000692:	d907      	bls.n	80006a4 <__udivmoddi4+0x14c>
 8000694:	192c      	adds	r4, r5, r4
 8000696:	f100 33ff 	add.w	r3, r0, #4294967295
 800069a:	d202      	bcs.n	80006a2 <__udivmoddi4+0x14a>
 800069c:	45a0      	cmp	r8, r4
 800069e:	f200 80b6 	bhi.w	800080e <__udivmoddi4+0x2b6>
 80006a2:	4618      	mov	r0, r3
 80006a4:	eba4 0408 	sub.w	r4, r4, r8
 80006a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006ac:	e79f      	b.n	80005ee <__udivmoddi4+0x96>
 80006ae:	f1c7 0c20 	rsb	ip, r7, #32
 80006b2:	40bb      	lsls	r3, r7
 80006b4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80006b8:	ea4e 0e03 	orr.w	lr, lr, r3
 80006bc:	fa01 f407 	lsl.w	r4, r1, r7
 80006c0:	fa20 f50c 	lsr.w	r5, r0, ip
 80006c4:	fa21 f30c 	lsr.w	r3, r1, ip
 80006c8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80006cc:	4325      	orrs	r5, r4
 80006ce:	fbb3 f9f8 	udiv	r9, r3, r8
 80006d2:	0c2c      	lsrs	r4, r5, #16
 80006d4:	fb08 3319 	mls	r3, r8, r9, r3
 80006d8:	fa1f fa8e 	uxth.w	sl, lr
 80006dc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80006e0:	fb09 f40a 	mul.w	r4, r9, sl
 80006e4:	429c      	cmp	r4, r3
 80006e6:	fa02 f207 	lsl.w	r2, r2, r7
 80006ea:	fa00 f107 	lsl.w	r1, r0, r7
 80006ee:	d90b      	bls.n	8000708 <__udivmoddi4+0x1b0>
 80006f0:	eb1e 0303 	adds.w	r3, lr, r3
 80006f4:	f109 30ff 	add.w	r0, r9, #4294967295
 80006f8:	f080 8087 	bcs.w	800080a <__udivmoddi4+0x2b2>
 80006fc:	429c      	cmp	r4, r3
 80006fe:	f240 8084 	bls.w	800080a <__udivmoddi4+0x2b2>
 8000702:	f1a9 0902 	sub.w	r9, r9, #2
 8000706:	4473      	add	r3, lr
 8000708:	1b1b      	subs	r3, r3, r4
 800070a:	b2ad      	uxth	r5, r5
 800070c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000710:	fb08 3310 	mls	r3, r8, r0, r3
 8000714:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000718:	fb00 fa0a 	mul.w	sl, r0, sl
 800071c:	45a2      	cmp	sl, r4
 800071e:	d908      	bls.n	8000732 <__udivmoddi4+0x1da>
 8000720:	eb1e 0404 	adds.w	r4, lr, r4
 8000724:	f100 33ff 	add.w	r3, r0, #4294967295
 8000728:	d26b      	bcs.n	8000802 <__udivmoddi4+0x2aa>
 800072a:	45a2      	cmp	sl, r4
 800072c:	d969      	bls.n	8000802 <__udivmoddi4+0x2aa>
 800072e:	3802      	subs	r0, #2
 8000730:	4474      	add	r4, lr
 8000732:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000736:	fba0 8902 	umull	r8, r9, r0, r2
 800073a:	eba4 040a 	sub.w	r4, r4, sl
 800073e:	454c      	cmp	r4, r9
 8000740:	46c2      	mov	sl, r8
 8000742:	464b      	mov	r3, r9
 8000744:	d354      	bcc.n	80007f0 <__udivmoddi4+0x298>
 8000746:	d051      	beq.n	80007ec <__udivmoddi4+0x294>
 8000748:	2e00      	cmp	r6, #0
 800074a:	d069      	beq.n	8000820 <__udivmoddi4+0x2c8>
 800074c:	ebb1 050a 	subs.w	r5, r1, sl
 8000750:	eb64 0403 	sbc.w	r4, r4, r3
 8000754:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000758:	40fd      	lsrs	r5, r7
 800075a:	40fc      	lsrs	r4, r7
 800075c:	ea4c 0505 	orr.w	r5, ip, r5
 8000760:	e9c6 5400 	strd	r5, r4, [r6]
 8000764:	2700      	movs	r7, #0
 8000766:	e747      	b.n	80005f8 <__udivmoddi4+0xa0>
 8000768:	f1c2 0320 	rsb	r3, r2, #32
 800076c:	fa20 f703 	lsr.w	r7, r0, r3
 8000770:	4095      	lsls	r5, r2
 8000772:	fa01 f002 	lsl.w	r0, r1, r2
 8000776:	fa21 f303 	lsr.w	r3, r1, r3
 800077a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800077e:	4338      	orrs	r0, r7
 8000780:	0c01      	lsrs	r1, r0, #16
 8000782:	fbb3 f7fe 	udiv	r7, r3, lr
 8000786:	fa1f f885 	uxth.w	r8, r5
 800078a:	fb0e 3317 	mls	r3, lr, r7, r3
 800078e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000792:	fb07 f308 	mul.w	r3, r7, r8
 8000796:	428b      	cmp	r3, r1
 8000798:	fa04 f402 	lsl.w	r4, r4, r2
 800079c:	d907      	bls.n	80007ae <__udivmoddi4+0x256>
 800079e:	1869      	adds	r1, r5, r1
 80007a0:	f107 3cff 	add.w	ip, r7, #4294967295
 80007a4:	d22f      	bcs.n	8000806 <__udivmoddi4+0x2ae>
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d92d      	bls.n	8000806 <__udivmoddi4+0x2ae>
 80007aa:	3f02      	subs	r7, #2
 80007ac:	4429      	add	r1, r5
 80007ae:	1acb      	subs	r3, r1, r3
 80007b0:	b281      	uxth	r1, r0
 80007b2:	fbb3 f0fe 	udiv	r0, r3, lr
 80007b6:	fb0e 3310 	mls	r3, lr, r0, r3
 80007ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007be:	fb00 f308 	mul.w	r3, r0, r8
 80007c2:	428b      	cmp	r3, r1
 80007c4:	d907      	bls.n	80007d6 <__udivmoddi4+0x27e>
 80007c6:	1869      	adds	r1, r5, r1
 80007c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80007cc:	d217      	bcs.n	80007fe <__udivmoddi4+0x2a6>
 80007ce:	428b      	cmp	r3, r1
 80007d0:	d915      	bls.n	80007fe <__udivmoddi4+0x2a6>
 80007d2:	3802      	subs	r0, #2
 80007d4:	4429      	add	r1, r5
 80007d6:	1ac9      	subs	r1, r1, r3
 80007d8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80007dc:	e73b      	b.n	8000656 <__udivmoddi4+0xfe>
 80007de:	4637      	mov	r7, r6
 80007e0:	4630      	mov	r0, r6
 80007e2:	e709      	b.n	80005f8 <__udivmoddi4+0xa0>
 80007e4:	4607      	mov	r7, r0
 80007e6:	e6e7      	b.n	80005b8 <__udivmoddi4+0x60>
 80007e8:	4618      	mov	r0, r3
 80007ea:	e6fb      	b.n	80005e4 <__udivmoddi4+0x8c>
 80007ec:	4541      	cmp	r1, r8
 80007ee:	d2ab      	bcs.n	8000748 <__udivmoddi4+0x1f0>
 80007f0:	ebb8 0a02 	subs.w	sl, r8, r2
 80007f4:	eb69 020e 	sbc.w	r2, r9, lr
 80007f8:	3801      	subs	r0, #1
 80007fa:	4613      	mov	r3, r2
 80007fc:	e7a4      	b.n	8000748 <__udivmoddi4+0x1f0>
 80007fe:	4660      	mov	r0, ip
 8000800:	e7e9      	b.n	80007d6 <__udivmoddi4+0x27e>
 8000802:	4618      	mov	r0, r3
 8000804:	e795      	b.n	8000732 <__udivmoddi4+0x1da>
 8000806:	4667      	mov	r7, ip
 8000808:	e7d1      	b.n	80007ae <__udivmoddi4+0x256>
 800080a:	4681      	mov	r9, r0
 800080c:	e77c      	b.n	8000708 <__udivmoddi4+0x1b0>
 800080e:	3802      	subs	r0, #2
 8000810:	442c      	add	r4, r5
 8000812:	e747      	b.n	80006a4 <__udivmoddi4+0x14c>
 8000814:	f1ac 0c02 	sub.w	ip, ip, #2
 8000818:	442b      	add	r3, r5
 800081a:	e72f      	b.n	800067c <__udivmoddi4+0x124>
 800081c:	4638      	mov	r0, r7
 800081e:	e708      	b.n	8000632 <__udivmoddi4+0xda>
 8000820:	4637      	mov	r7, r6
 8000822:	e6e9      	b.n	80005f8 <__udivmoddi4+0xa0>

08000824 <__aeabi_idiv0>:
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop

08000828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000860 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800082c:	f000 fd98 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000830:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000832:	e003      	b.n	800083c <LoopCopyDataInit>

08000834 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8000836:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000838:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800083a:	3104      	adds	r1, #4

0800083c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800083c:	480a      	ldr	r0, [pc, #40]	; (8000868 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8000840:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000842:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000844:	d3f6      	bcc.n	8000834 <CopyDataInit>
  ldr  r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8000848:	e002      	b.n	8000850 <LoopFillZerobss>

0800084a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800084a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800084c:	f842 3b04 	str.w	r3, [r2], #4

08000850 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8000852:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000854:	d3f9      	bcc.n	800084a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f008 fed7 	bl	8009608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800085a:	f000 f96f 	bl	8000b3c <main>
  bx  lr    
 800085e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000860:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8000864:	0800a5c0 	.word	0x0800a5c0
  ldr  r0, =_sdata
 8000868:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800086c:	24000080 	.word	0x24000080
  ldr  r2, =_sbss
 8000870:	24000080 	.word	0x24000080
  ldr  r3, = _ebss
 8000874:	24000990 	.word	0x24000990

08000878 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC3_IRQHandler>

0800087a <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b084      	sub	sp, #16
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
    VOID *memory_ptr = first_unused_memory;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN  tx_application_define */

    /* USER CODE END  tx_application_define */

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f000 f810 	bl	80008ac <App_ThreadX_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <tx_application_define+0x1c>
    {
        /* USER CODE BEGIN  App_ThreadX_Init_Error */
      Error_Handler();
 8000892:	f000 fb19 	bl	8000ec8 <Error_Handler>
        /* USER CODE END  App_ThreadX_Init_Error */
    }
    /* USER CODE BEGIN  App_ThreadX_Init_Success */

    /* USER CODE END  App_ThreadX_Init_Success */
}
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <MX_AZURE_RTOS_Init>:
  * @brief  MX_AZURE_RTOS_Init
  * @param  None
  * @retval None
  */
void MX_AZURE_RTOS_Init(void)
{
 800089e:	b580      	push	{r7, lr}
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80008a2:	f006 ff4b 	bl	800773c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08c      	sub	sp, #48	; 0x30
 80008b0:	af08      	add	r7, sp, #32
 80008b2:	6078      	str	r0, [r7, #4]
    UINT ret = TX_SUCCESS;
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
    /* USER CODE BEGIN  App_ThreadX_Init */
  CHAR *pointer;

  /* Create a byte memory pool from which to allocate the thread stacks.  */
  if (tx_byte_pool_create(&BytePool, "Byte Pool", memory_ptr, APP_BYTE_POOL_SIZE) != TX_SUCCESS)
 80008b8:	2334      	movs	r3, #52	; 0x34
 80008ba:	9300      	str	r3, [sp, #0]
 80008bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	4933      	ldr	r1, [pc, #204]	; (8000990 <App_ThreadX_Init+0xe4>)
 80008c4:	4833      	ldr	r0, [pc, #204]	; (8000994 <App_ThreadX_Init+0xe8>)
 80008c6:	f008 f9c3 	bl	8008c50 <_txe_byte_pool_create>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <App_ThreadX_Init+0x28>
  {
    ret = TX_POOL_ERROR;
 80008d0:	2302      	movs	r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
  }

  /* Allocate the stack for ThreadOne.  */
  if (tx_byte_allocate(&BytePool, (VOID **) &pointer, APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 80008d4:	f107 0108 	add.w	r1, r7, #8
 80008d8:	2300      	movs	r3, #0
 80008da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008de:	482d      	ldr	r0, [pc, #180]	; (8000994 <App_ThreadX_Init+0xe8>)
 80008e0:	f008 f942 	bl	8008b68 <_txe_byte_allocate>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <App_ThreadX_Init+0x42>
  {
    ret = TX_POOL_ERROR;
 80008ea:	2302      	movs	r3, #2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  /* Create ThreadOne.  */
  if (tx_thread_create(&ThreadOne, "Thread One", ThreadOne_Entry, 0, pointer, APP_STACK_SIZE, THREAD_ONE_PRIO,
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	22b0      	movs	r2, #176	; 0xb0
 80008f2:	9206      	str	r2, [sp, #24]
 80008f4:	2201      	movs	r2, #1
 80008f6:	9205      	str	r2, [sp, #20]
 80008f8:	2232      	movs	r2, #50	; 0x32
 80008fa:	9204      	str	r2, [sp, #16]
 80008fc:	220a      	movs	r2, #10
 80008fe:	9203      	str	r2, [sp, #12]
 8000900:	220a      	movs	r2, #10
 8000902:	9202      	str	r2, [sp, #8]
 8000904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000908:	9201      	str	r2, [sp, #4]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	4a22      	ldr	r2, [pc, #136]	; (8000998 <App_ThreadX_Init+0xec>)
 8000910:	4922      	ldr	r1, [pc, #136]	; (800099c <App_ThreadX_Init+0xf0>)
 8000912:	4823      	ldr	r0, [pc, #140]	; (80009a0 <App_ThreadX_Init+0xf4>)
 8000914:	f008 fb62 	bl	8008fdc <_txe_thread_create>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <App_ThreadX_Init+0x76>
                       THREAD_ONE_PREEMPTION_THRESHOLD, DEFAULT_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800091e:	230e      	movs	r3, #14
 8000920:	60fb      	str	r3, [r7, #12]
  }

  /* Allocate the stack for ThreadTwo.  */
  if (tx_byte_allocate(&BytePool, (VOID **) &pointer, APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8000922:	f107 0108 	add.w	r1, r7, #8
 8000926:	2300      	movs	r3, #0
 8000928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800092c:	4819      	ldr	r0, [pc, #100]	; (8000994 <App_ThreadX_Init+0xe8>)
 800092e:	f008 f91b 	bl	8008b68 <_txe_byte_allocate>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <App_ThreadX_Init+0x90>
  {
    ret = TX_POOL_ERROR;
 8000938:	2302      	movs	r3, #2
 800093a:	60fb      	str	r3, [r7, #12]
  }

  /* Create ThreadTwo.  */
  if (tx_thread_create(&ThreadTwo, "Thread Two", ThreadTwo_Entry, 0, pointer, APP_STACK_SIZE, THREAD_TWO_PRIO,
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	22b0      	movs	r2, #176	; 0xb0
 8000940:	9206      	str	r2, [sp, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	9205      	str	r2, [sp, #20]
 8000946:	2232      	movs	r2, #50	; 0x32
 8000948:	9204      	str	r2, [sp, #16]
 800094a:	220a      	movs	r2, #10
 800094c:	9203      	str	r2, [sp, #12]
 800094e:	220a      	movs	r2, #10
 8000950:	9202      	str	r2, [sp, #8]
 8000952:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	9300      	str	r3, [sp, #0]
 800095a:	2300      	movs	r3, #0
 800095c:	4a11      	ldr	r2, [pc, #68]	; (80009a4 <App_ThreadX_Init+0xf8>)
 800095e:	4912      	ldr	r1, [pc, #72]	; (80009a8 <App_ThreadX_Init+0xfc>)
 8000960:	4812      	ldr	r0, [pc, #72]	; (80009ac <App_ThreadX_Init+0x100>)
 8000962:	f008 fb3b 	bl	8008fdc <_txe_thread_create>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <App_ThreadX_Init+0xc4>
                       THREAD_TWO_PREEMPTION_THRESHOLD, DEFAULT_TIME_SLICE, TX_AUTO_START) != TX_SUCCESS)
  {
    ret = TX_THREAD_ERROR;
 800096c:	230e      	movs	r3, #14
 800096e:	60fb      	str	r3, [r7, #12]
  }

  /* Create the Synchronization API used by ThreadOne and ThreadTwo.*/
  if (APP_SYNC_CREATE(&SyncObject) != TX_SUCCESS)
 8000970:	2334      	movs	r3, #52	; 0x34
 8000972:	2200      	movs	r2, #0
 8000974:	490e      	ldr	r1, [pc, #56]	; (80009b0 <App_ThreadX_Init+0x104>)
 8000976:	480f      	ldr	r0, [pc, #60]	; (80009b4 <App_ThreadX_Init+0x108>)
 8000978:	f008 fa04 	bl	8008d84 <_txe_mutex_create>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <App_ThreadX_Init+0xda>
  {
    ret = TX_SYNC_ERROR;
 8000982:	231c      	movs	r3, #28
 8000984:	60fb      	str	r3, [r7, #12]
  }
    /* USER CODE END  App_ThreadX_Init */

    return ret;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	08009f48 	.word	0x08009f48
 8000994:	240000a8 	.word	0x240000a8
 8000998:	080009b9 	.word	0x080009b9
 800099c:	08009f54 	.word	0x08009f54
 80009a0:	2400018c 	.word	0x2400018c
 80009a4:	08000a31 	.word	0x08000a31
 80009a8:	08009f60 	.word	0x08009f60
 80009ac:	240000dc 	.word	0x240000dc
 80009b0:	08009f6c 	.word	0x08009f6c
 80009b4:	2400023c 	.word	0x2400023c

080009b8 <ThreadOne_Entry>:
  * @brief  Function implementing the ThreadOne thread.
  * @param  thread_input: Not used
  * @retval None
  */
void ThreadOne_Entry(ULONG thread_input)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  UNUSED(thread_input);
  ULONG iteration = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  while(1)
  {
    /* try to acquire the sync object without waiting */
    if (APP_SYNC_GET(&SyncObject, TX_NO_WAIT) == TX_SUCCESS)
 80009c4:	2100      	movs	r1, #0
 80009c6:	4814      	ldr	r0, [pc, #80]	; (8000a18 <ThreadOne_Entry+0x60>)
 80009c8:	f008 fa74 	bl	8008eb4 <_txe_mutex_get>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d110      	bne.n	80009f4 <ThreadOne_Entry+0x3c>
    {
      printf("** ThreadOne : SyncObject acquired ** \r\n");
 80009d2:	4812      	ldr	r0, [pc, #72]	; (8000a1c <ThreadOne_Entry+0x64>)
 80009d4:	f008 fea0 	bl	8009718 <puts>
      
      /*sync object acquired, toggle the LED_GREEN each 500ms for 5s */
      Led_Toggle(LED_GREEN, 10);
 80009d8:	210a      	movs	r1, #10
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f864 	bl	8000aa8 <Led_Toggle>
      

      /*release the sync object */
      APP_SYNC_PUT(&SyncObject);
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <ThreadOne_Entry+0x60>)
 80009e2:	f008 fac1 	bl	8008f68 <_txe_mutex_put>
      
      printf("** ThreadOne : SyncObject released ** \r\n");
 80009e6:	480e      	ldr	r0, [pc, #56]	; (8000a20 <ThreadOne_Entry+0x68>)
 80009e8:	f008 fe96 	bl	8009718 <puts>

      tx_thread_sleep(10);
 80009ec:	200a      	movs	r0, #10
 80009ee:	f007 fd6f 	bl	80084d0 <_tx_thread_sleep>
 80009f2:	e00d      	b.n	8000a10 <ThreadOne_Entry+0x58>
    }
    else
    {

      if ((iteration % 2000000) == 0)
 80009f4:	68fa      	ldr	r2, [r7, #12]
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <ThreadOne_Entry+0x6c>)
 80009f8:	fba3 1302 	umull	r1, r3, r3, r2
 80009fc:	0cdb      	lsrs	r3, r3, #19
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <ThreadOne_Entry+0x70>)
 8000a00:	fb01 f303 	mul.w	r3, r1, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <ThreadOne_Entry+0x58>
      {
        printf("** ThreadOne : waiting for SyncObject !! **\r\n");
 8000a0a:	4808      	ldr	r0, [pc, #32]	; (8000a2c <ThreadOne_Entry+0x74>)
 8000a0c:	f008 fe84 	bl	8009718 <puts>
      }
    }
    iteration++;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	3301      	adds	r3, #1
 8000a14:	60fb      	str	r3, [r7, #12]
    if (APP_SYNC_GET(&SyncObject, TX_NO_WAIT) == TX_SUCCESS)
 8000a16:	e7d5      	b.n	80009c4 <ThreadOne_Entry+0xc>
 8000a18:	2400023c 	.word	0x2400023c
 8000a1c:	08009f78 	.word	0x08009f78
 8000a20:	08009fa0 	.word	0x08009fa0
 8000a24:	431bde83 	.word	0x431bde83
 8000a28:	001e8480 	.word	0x001e8480
 8000a2c:	08009fc8 	.word	0x08009fc8

08000a30 <ThreadTwo_Entry>:
  * @brief  Function implementing the ThreadTwo thread.
  * @param  thread_input: Not used
  * @retval None
  */
void ThreadTwo_Entry(ULONG thread_input)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  UNUSED(thread_input);
  ULONG iteration = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  while(1)
  {
    /* try to acquire the sync object without waiting */
    if (APP_SYNC_GET(&SyncObject, TX_NO_WAIT) == TX_SUCCESS)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4814      	ldr	r0, [pc, #80]	; (8000a90 <ThreadTwo_Entry+0x60>)
 8000a40:	f008 fa38 	bl	8008eb4 <_txe_mutex_get>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d110      	bne.n	8000a6c <ThreadTwo_Entry+0x3c>
    {
      printf("** ThreadTwo : SyncObject acquired ** \r\n");
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <ThreadTwo_Entry+0x64>)
 8000a4c:	f008 fe64 	bl	8009718 <puts>
      
      /*Sync object acquired toggle the LED_RED each 500ms for 5s*/
      Led_Toggle(LED_RED, 10);
 8000a50:	210a      	movs	r1, #10
 8000a52:	2001      	movs	r0, #1
 8000a54:	f000 f828 	bl	8000aa8 <Led_Toggle>
      
      /*release the sync object*/
      APP_SYNC_PUT(&SyncObject);
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <ThreadTwo_Entry+0x60>)
 8000a5a:	f008 fa85 	bl	8008f68 <_txe_mutex_put>
      
      printf("** ThreadTwo : SyncObject released ** \r\n");
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <ThreadTwo_Entry+0x68>)
 8000a60:	f008 fe5a 	bl	8009718 <puts>

      tx_thread_sleep(10);
 8000a64:	200a      	movs	r0, #10
 8000a66:	f007 fd33 	bl	80084d0 <_tx_thread_sleep>
 8000a6a:	e00d      	b.n	8000a88 <ThreadTwo_Entry+0x58>

    }
    else
    {
      if ((iteration % 2000000) == 0)
 8000a6c:	68fa      	ldr	r2, [r7, #12]
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <ThreadTwo_Entry+0x6c>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	0cdb      	lsrs	r3, r3, #19
 8000a76:	490a      	ldr	r1, [pc, #40]	; (8000aa0 <ThreadTwo_Entry+0x70>)
 8000a78:	fb01 f303 	mul.w	r3, r1, r3
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d102      	bne.n	8000a88 <ThreadTwo_Entry+0x58>
      {
        printf("** ThreadTwo : waiting for SyncObject !! **\r\n");
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <ThreadTwo_Entry+0x74>)
 8000a84:	f008 fe48 	bl	8009718 <puts>
      }
    }
    iteration++;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
    if (APP_SYNC_GET(&SyncObject, TX_NO_WAIT) == TX_SUCCESS)
 8000a8e:	e7d5      	b.n	8000a3c <ThreadTwo_Entry+0xc>
 8000a90:	2400023c 	.word	0x2400023c
 8000a94:	08009ff8 	.word	0x08009ff8
 8000a98:	0800a020 	.word	0x0800a020
 8000a9c:	431bde83 	.word	0x431bde83
 8000aa0:	001e8480 	.word	0x001e8480
 8000aa4:	0800a048 	.word	0x0800a048

08000aa8 <Led_Toggle>:
  * @param  led: LED to toggle
  * @param  iter: Number of iterations
  * @retval None
  */
static VOID Led_Toggle(Led_TypeDef led, UINT iter)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  UINT i;

  BSP_LED_Off(led);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fc18 	bl	80012ec <BSP_LED_Off>

  for (i =0; i < iter; i++)
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e00a      	b.n	8000ad8 <Led_Toggle+0x30>
  {
    BSP_LED_Toggle(led);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fc2f 	bl	8001328 <BSP_LED_Toggle>
    App_Delay(500);
 8000aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ace:	f000 f80f 	bl	8000af0 <App_Delay>
  for (i =0; i < iter; i++)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d3f0      	bcc.n	8000ac2 <Led_Toggle+0x1a>
  }

  BSP_LED_Off(led);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f000 fc02 	bl	80012ec <BSP_LED_Off>
}
 8000ae8:	bf00      	nop
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <App_Delay>:
  * @brief  Application Delay function.
  * @param  Delay : number of ticks to wait
  * @retval None
  */
void App_Delay(ULONG Delay)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  ULONG initial_time = tx_time_get();
 8000af8:	f008 f81c 	bl	8008b34 <_tx_time_get>
 8000afc:	60f8      	str	r0, [r7, #12]
  while ((tx_time_get() - initial_time) < Delay);
 8000afe:	bf00      	nop
 8000b00:	f008 f818 	bl	8008b34 <_tx_time_get>
 8000b04:	4602      	mov	r2, r0
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1ad3      	subs	r3, r2, r3
 8000b0a:	687a      	ldr	r2, [r7, #4]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d8f7      	bhi.n	8000b00 <App_Delay+0x10>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart4, (uint8_t *)&ch, 1, 0xFFFF);
 8000b20:	1d39      	adds	r1, r7, #4
 8000b22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b26:	2201      	movs	r2, #1
 8000b28:	4803      	ldr	r0, [pc, #12]	; (8000b38 <__io_putchar+0x20>)
 8000b2a:	f004 ff8d 	bl	8005a48 <HAL_UART_Transmit>

  return ch;
 8000b2e:	687b      	ldr	r3, [r7, #4]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	24000270 	.word	0x24000270

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  //SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 fc9c 	bl	800147c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f80e 	bl	8000b64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* Initialize LEDs */
  BSP_LED_Init(LED_GREEN);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fb71 	bl	8001230 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000b4e:	2001      	movs	r0, #1
 8000b50:	f000 fb6e 	bl	8001230 <BSP_LED_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b54:	f000 f97c 	bl	8000e50 <MX_GPIO_Init>
  MX_USART4_UART_Init();
 8000b58:	f000 f92e 	bl	8000db8 <MX_USART4_UART_Init>

  MX_AZURE_RTOS_Init();
 8000b5c:	f7ff fe9f 	bl	800089e <MX_AZURE_RTOS_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <main+0x24>
	...

08000b64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0cc      	sub	sp, #304	; 0x130
 8000b68:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000b6e:	224c      	movs	r2, #76	; 0x4c
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f008 fd6c 	bl	8009650 <memset>
     RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b78:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000b7c:	2220      	movs	r2, #32
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 fd65 	bl	8009650 <memset>
     RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	23bc      	movs	r3, #188	; 0xbc
 8000b8e:	461a      	mov	r2, r3
 8000b90:	2100      	movs	r1, #0
 8000b92:	f008 fd5d 	bl	8009650 <memset>

     /** Supply configuration update enable
     */
     HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b96:	2002      	movs	r0, #2
 8000b98:	f001 f958 	bl	8001e4c <HAL_PWREx_ConfigSupply>
     /** Configure the main internal regulator output voltage
     */
     __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	4b81      	ldr	r3, [pc, #516]	; (8000da8 <SystemClock_Config+0x244>)
 8000ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba6:	4a80      	ldr	r2, [pc, #512]	; (8000da8 <SystemClock_Config+0x244>)
 8000ba8:	f023 0301 	bic.w	r3, r3, #1
 8000bac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bae:	4b7e      	ldr	r3, [pc, #504]	; (8000da8 <SystemClock_Config+0x244>)
 8000bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb2:	f003 0201 	and.w	r2, r3, #1
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	4b7c      	ldr	r3, [pc, #496]	; (8000dac <SystemClock_Config+0x248>)
 8000bbc:	699b      	ldr	r3, [r3, #24]
 8000bbe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bc2:	4a7a      	ldr	r2, [pc, #488]	; (8000dac <SystemClock_Config+0x248>)
 8000bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b78      	ldr	r3, [pc, #480]	; (8000dac <SystemClock_Config+0x248>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]

     while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000bda:	bf00      	nop
 8000bdc:	4b73      	ldr	r3, [pc, #460]	; (8000dac <SystemClock_Config+0x248>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000be8:	d1f8      	bne.n	8000bdc <SystemClock_Config+0x78>
     /** Configure LSE Drive Capability
     */
     HAL_PWR_EnableBkUpAccess();
 8000bea:	f001 f91f 	bl	8001e2c <HAL_PWR_EnableBkUpAccess>
     __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bee:	f000 fcc3 	bl	8001578 <HAL_GetREVID>
 8000bf2:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <SystemClock_Config+0x24c>)
 8000bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000bf6:	4a6e      	ldr	r2, [pc, #440]	; (8000db0 <SystemClock_Config+0x24c>)
 8000bf8:	f023 0318 	bic.w	r3, r3, #24
 8000bfc:	6713      	str	r3, [r2, #112]	; 0x70
     /** Macro to configure the PLL clock source
     */
     __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000bfe:	4b6c      	ldr	r3, [pc, #432]	; (8000db0 <SystemClock_Config+0x24c>)
 8000c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c02:	f023 0303 	bic.w	r3, r3, #3
 8000c06:	4a6a      	ldr	r2, [pc, #424]	; (8000db0 <SystemClock_Config+0x24c>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6293      	str	r3, [r2, #40]	; 0x28
     /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
     RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000c0e:	2305      	movs	r3, #5
 8000c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
     RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
     RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
     RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
     RCC_OscInitStruct.PLL.PLLM = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
     RCC_OscInitStruct.PLL.PLLN = 120;
 8000c34:	2378      	movs	r3, #120	; 0x78
 8000c36:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
     RCC_OscInitStruct.PLL.PLLP = 4;
 8000c3a:	2304      	movs	r3, #4
 8000c3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
     RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c40:	2308      	movs	r3, #8
 8000c42:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
     RCC_OscInitStruct.PLL.PLLR = 2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
     RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
     RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
     RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
     if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 f938 	bl	8001ed8 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x10e>
     {
       Error_Handler();
 8000c6e:	f000 f92b 	bl	8000ec8 <Error_Handler>
     }
     /** Initializes the CPU, AHB and APB buses clocks
     */
     RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	233f      	movs	r3, #63	; 0x3f
 8000c74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                                 |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                                 |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
     RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
     RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000c84:	2308      	movs	r3, #8
 8000c86:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
     RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c8a:	2340      	movs	r3, #64	; 0x40
 8000c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
     RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c90:	2340      	movs	r3, #64	; 0x40
 8000c92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
     RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
     RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c9e:	2340      	movs	r3, #64	; 0x40
 8000ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

     if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ca4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ca8:	2101      	movs	r1, #1
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fe4a 	bl	8002944 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x156>
     {
       Error_Handler();
 8000cb6:	f000 f907 	bl	8000ec8 <Error_Handler>
     }
     PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_UART4
 8000cba:	f107 0308 	add.w	r3, r7, #8
 8000cbe:	4a3d      	ldr	r2, [pc, #244]	; (8000db4 <SystemClock_Config+0x250>)
 8000cc0:	601a      	str	r2, [r3, #0]
                                 |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                                 |RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_ADC
                                 |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_FMC;
     PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000cc2:	f107 0308 	add.w	r3, r7, #8
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	605a      	str	r2, [r3, #4]
     PeriphClkInitStruct.PLL2.PLL2N = 50;
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	2232      	movs	r2, #50	; 0x32
 8000cd0:	609a      	str	r2, [r3, #8]
     PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000cd2:	f107 0308 	add.w	r3, r7, #8
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	60da      	str	r2, [r3, #12]
     PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2202      	movs	r2, #2
 8000ce0:	611a      	str	r2, [r3, #16]
     PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ce2:	f107 0308 	add.w	r3, r7, #8
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	615a      	str	r2, [r3, #20]
     PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000cea:	f107 0308 	add.w	r3, r7, #8
 8000cee:	22c0      	movs	r2, #192	; 0xc0
 8000cf0:	619a      	str	r2, [r3, #24]
     PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000cf2:	f107 0308 	add.w	r3, r7, #8
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
     PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
     PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000d02:	f107 0308 	add.w	r3, r7, #8
 8000d06:	2201      	movs	r2, #1
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
     PeriphClkInitStruct.PLL3.PLL3N = 30;
 8000d0a:	f107 0308 	add.w	r3, r7, #8
 8000d0e:	221e      	movs	r2, #30
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
     PeriphClkInitStruct.PLL3.PLL3P = 1;
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	2201      	movs	r2, #1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
     PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	2202      	movs	r2, #2
 8000d20:	631a      	str	r2, [r3, #48]	; 0x30
     PeriphClkInitStruct.PLL3.PLL3R = 4;
 8000d22:	f107 0308 	add.w	r3, r7, #8
 8000d26:	2204      	movs	r2, #4
 8000d28:	635a      	str	r2, [r3, #52]	; 0x34
     PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000d2a:	f107 0308 	add.w	r3, r7, #8
 8000d2e:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
     PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000d34:	f107 0308 	add.w	r3, r7, #8
 8000d38:	2200      	movs	r2, #0
 8000d3a:	63da      	str	r2, [r3, #60]	; 0x3c
     PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	2200      	movs	r2, #0
 8000d42:	641a      	str	r2, [r3, #64]	; 0x40
     PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_PLL2;
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	2202      	movs	r2, #2
 8000d4a:	645a      	str	r2, [r3, #68]	; 0x44
     PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000d4c:	f107 0308 	add.w	r3, r7, #8
 8000d50:	2200      	movs	r2, #0
 8000d52:	64da      	str	r2, [r3, #76]	; 0x4c
     PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d54:	f107 0308 	add.w	r3, r7, #8
 8000d58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d5c:	65da      	str	r2, [r3, #92]	; 0x5c
     PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d5e:	f107 0308 	add.w	r3, r7, #8
 8000d62:	2200      	movs	r2, #0
 8000d64:	675a      	str	r2, [r3, #116]	; 0x74
     PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
     PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL3;
 8000d70:	f107 0308 	add.w	r3, r7, #8
 8000d74:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
     PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
     if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d88:	f107 0308 	add.w	r3, r7, #8
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f002 fb59 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x238>
     {
       Error_Handler();
 8000d98:	f000 f896 	bl	8000ec8 <Error_Handler>
     }
}
 8000d9c:	bf00      	nop
 8000d9e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	58000400 	.word	0x58000400
 8000dac:	58024800 	.word	0x58024800
 8000db0:	58024400 	.word	0x58024400
 8000db4:	0149100a 	.word	0x0149100a

08000db8 <MX_USART4_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
    huart4.Instance = UART4;
 8000dbc:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dbe:	4a23      	ldr	r2, [pc, #140]	; (8000e4c <MX_USART4_UART_Init+0x94>)
 8000dc0:	601a      	str	r2, [r3, #0]
    huart4.Init.BaudRate = 115200;
 8000dc2:	4b21      	ldr	r3, [pc, #132]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc8:	605a      	str	r2, [r3, #4]
    huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
    huart4.Init.StopBits = UART_STOPBITS_1;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	60da      	str	r2, [r3, #12]
    huart4.Init.Parity = UART_PARITY_NONE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	611a      	str	r2, [r3, #16]
    huart4.Init.Mode = UART_MODE_TX_RX;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dde:	220c      	movs	r2, #12
 8000de0:	615a      	str	r2, [r3, #20]
    huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
    huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
    huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
    huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	625a      	str	r2, [r3, #36]	; 0x24
    huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	629a      	str	r2, [r3, #40]	; 0x28
    if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e00:	4811      	ldr	r0, [pc, #68]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000e02:	f004 fd53 	bl	80058ac <HAL_UART_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_USART4_UART_Init+0x58>
    {
      Error_Handler();
 8000e0c:	f000 f85c 	bl	8000ec8 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000e14:	f005 ffec 	bl	8006df0 <HAL_UARTEx_SetTxFifoThreshold>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_USART4_UART_Init+0x6a>
    {
      Error_Handler();
 8000e1e:	f000 f853 	bl	8000ec8 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e22:	2100      	movs	r1, #0
 8000e24:	4808      	ldr	r0, [pc, #32]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000e26:	f006 f87d 	bl	8006f24 <HAL_UARTEx_SetRxFifoThreshold>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_USART4_UART_Init+0x7c>
    {
      Error_Handler();
 8000e30:	f000 f84a 	bl	8000ec8 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e34:	4804      	ldr	r0, [pc, #16]	; (8000e48 <MX_USART4_UART_Init+0x90>)
 8000e36:	f005 ff65 	bl	8006d04 <HAL_UARTEx_DisableFifoMode>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_USART4_UART_Init+0x8c>
    {
      Error_Handler();
 8000e40:	f000 f842 	bl	8000ec8 <Error_Handler>
    }
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	24000270 	.word	0x24000270
 8000e4c:	40004c00 	.word	0x40004c00

08000e50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e56:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5c:	4a10      	ldr	r2, [pc, #64]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e74:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_GPIO_Init+0x50>)
 8000e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	683b      	ldr	r3, [r7, #0]

}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	58024400 	.word	0x58024400

08000ea4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eb6:	f000 fb1d 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40001400 	.word	0x40001400

08000ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  //__disable_irq();
  BSP_LED_Off(LED_GREEN);
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f000 fa0d 	bl	80012ec <BSP_LED_Off>
  while (1)
  {
    BSP_LED_Toggle(LED_RED);
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f000 fa28 	bl	8001328 <BSP_LED_Toggle>
    HAL_Delay(500);
 8000ed8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000edc:	f000 fb2a 	bl	8001534 <HAL_Delay>
    BSP_LED_Toggle(LED_RED);
 8000ee0:	e7f7      	b.n	8000ed2 <Error_Handler+0xa>

08000ee2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x38>)
 8000f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_MspInit+0x38>)
 8000f06:	f043 0302 	orr.w	r3, r3, #2
 8000f0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x38>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f14:	f003 0302 	and.w	r3, r3, #2
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_DisableVREFBUF();
 8000f1c:	f000 fb58 	bl	80015d0 <HAL_SYSCFG_DisableVREFBUF>
  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f000 fb35 	bl	8001590 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	58024400 	.word	0x58024400

08000f34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	; (8000fbc <HAL_UART_MspInit+0x88>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d12e      	bne.n	8000fb4 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f56:	4b1a      	ldr	r3, [pc, #104]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f5c:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f66:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f84:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <HAL_UART_MspInit+0x8c>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f92:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000fa4:	2308      	movs	r3, #8
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <HAL_UART_MspInit+0x90>)
 8000fb0:	f000 fc2e 	bl	8001810 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3728      	adds	r7, #40	; 0x28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40004c00 	.word	0x40004c00
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	58021c00 	.word	0x58021c00

08000fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b090      	sub	sp, #64	; 0x40
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    uint32_t              uwTimclock, uwAPB1Prescaler;

    uint32_t              uwPrescalerValue;
    uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
    if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b0f      	cmp	r3, #15
 8000fd4:	d827      	bhi.n	8001026 <HAL_InitTick+0x5e>
    {
    HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0U);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	2037      	movs	r0, #55	; 0x37
 8000fdc:	f000 fbd6 	bl	800178c <HAL_NVIC_SetPriority>

    /* Enable the TIM7 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000fe0:	2037      	movs	r0, #55	; 0x37
 8000fe2:	f000 fbfd 	bl	80017e0 <HAL_NVIC_EnableIRQ>
      uwTickPrio = TickPriority;
 8000fe6:	4a29      	ldr	r2, [pc, #164]	; (800108c <HAL_InitTick+0xc4>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6013      	str	r3, [r2, #0]
    else
    {
      return HAL_ERROR;
    }
    /* Enable TIM7 clock */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <HAL_InitTick+0xc8>)
 8000fee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000ff2:	4a27      	ldr	r2, [pc, #156]	; (8001090 <HAL_InitTick+0xc8>)
 8000ff4:	f043 0320 	orr.w	r3, r3, #32
 8000ff8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_InitTick+0xc8>)
 8000ffe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800100a:	f107 0210 	add.w	r2, r7, #16
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f002 f9d3 	bl	80033c0 <HAL_RCC_GetClockConfig>

    /* Get APB1 prescaler */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800101a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800101c:	63bb      	str	r3, [r7, #56]	; 0x38
    /* Compute TIM7 clock */
    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800101e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <HAL_InitTick+0x6a>
 8001024:	e001      	b.n	800102a <HAL_InitTick+0x62>
      return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e02b      	b.n	8001082 <HAL_InitTick+0xba>
    {
      uwTimclock = HAL_RCC_GetPCLK1Freq();
 800102a:	f002 f99d 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 800102e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001030:	e004      	b.n	800103c <HAL_InitTick+0x74>
    }
    else
    {
      uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001032:	f002 f999 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8001036:	4603      	mov	r3, r0
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
    uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800103c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <HAL_InitTick+0xcc>)
 8001040:	fba2 2303 	umull	r2, r3, r2, r3
 8001044:	0c9b      	lsrs	r3, r3, #18
 8001046:	3b01      	subs	r3, #1
 8001048:	637b      	str	r3, [r7, #52]	; 0x34

    /* Initialize TIM7 */
    htim7.Instance = TIM7;
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <HAL_InitTick+0xd0>)
 800104c:	4a13      	ldr	r2, [pc, #76]	; (800109c <HAL_InitTick+0xd4>)
 800104e:	601a      	str	r2, [r3, #0]
    + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
    + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
    + ClockDivision = 0
    + Counter direction = Up
    */
    htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <HAL_InitTick+0xd0>)
 8001052:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001056:	60da      	str	r2, [r3, #12]
    htim7.Init.Prescaler = uwPrescalerValue;
 8001058:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <HAL_InitTick+0xd0>)
 800105a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800105c:	6053      	str	r3, [r2, #4]
    htim7.Init.ClockDivision = 0;
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <HAL_InitTick+0xd0>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <HAL_InitTick+0xd0>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <HAL_InitTick+0xd0>)
 800106c:	f004 f880 	bl	8005170 <HAL_TIM_Base_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d104      	bne.n	8001080 <HAL_InitTick+0xb8>
    {
      /* Start the TIM time Base generation in interrupt mode */
      return HAL_TIM_Base_Start_IT(&htim7);
 8001076:	4808      	ldr	r0, [pc, #32]	; (8001098 <HAL_InitTick+0xd0>)
 8001078:	f004 f97c 	bl	8005374 <HAL_TIM_Base_Start_IT>
 800107c:	4603      	mov	r3, r0
 800107e:	e000      	b.n	8001082 <HAL_InitTick+0xba>
    }

  /* Return function status */
  return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
}
 8001082:	4618      	mov	r0, r3
 8001084:	3740      	adds	r7, #64	; 0x40
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	24000010 	.word	0x24000010
 8001090:	58024400 	.word	0x58024400
 8001094:	431bde83 	.word	0x431bde83
 8001098:	240002fc 	.word	0x240002fc
 800109c:	40001400 	.word	0x40001400

080010a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <HardFault_Handler+0x4>

080010b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <MemManage_Handler+0x4>

080010ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010be:	e7fe      	b.n	80010be <BusFault_Handler+0x4>

080010c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <UsageFault_Handler+0x4>

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <TIM7_IRQHandler+0x10>)
 80010da:	f004 f9e7 	bl	80054ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	240002fc 	.word	0x240002fc

080010e8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e00a      	b.n	8001110 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010fa:	f3af 8000 	nop.w
 80010fe:	4601      	mov	r1, r0
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	60ba      	str	r2, [r7, #8]
 8001106:	b2ca      	uxtb	r2, r1
 8001108:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	3301      	adds	r3, #1
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	429a      	cmp	r2, r3
 8001116:	dbf0      	blt.n	80010fa <_read+0x12>
	}

return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e009      	b.n	8001148 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	60ba      	str	r2, [r7, #8]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff fceb 	bl	8000b18 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	697a      	ldr	r2, [r7, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbf1      	blt.n	8001134 <_write+0x12>
	}
	return len;
 8001150:	687b      	ldr	r3, [r7, #4]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <_close>:

int _close(int file)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	return -1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001182:	605a      	str	r2, [r3, #4]
	return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <_isatty>:

int _isatty(int file)
{
 8001192:	b480      	push	{r7}
 8001194:	b083      	sub	sp, #12
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
	return 1;
 800119a:	2301      	movs	r3, #1
}
 800119c:	4618      	mov	r0, r3
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f008 fa02 	bl	80095fc <__errno>
 80011f8:	4602      	mov	r2, r0
 80011fa:	230c      	movs	r3, #12
 80011fc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	24080000 	.word	0x24080000
 8001224:	00000400 	.word	0x00000400
 8001228:	2400009c 	.word	0x2400009c
 800122c:	24000990 	.word	0x24000990

08001230 <BSP_LED_Init>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08a      	sub	sp, #40	; 0x28
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800123a:	2300      	movs	r3, #0
 800123c:	627b      	str	r3, [r7, #36]	; 0x24

  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO_LED clock */
  if (Led == LED1)
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d10f      	bne.n	8001264 <BSP_LED_Init+0x34>
  {
    LED1_GPIO_CLK_ENABLE();
 8001244:	4b26      	ldr	r3, [pc, #152]	; (80012e0 <BSP_LED_Init+0xb0>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124a:	4a25      	ldr	r2, [pc, #148]	; (80012e0 <BSP_LED_Init+0xb0>)
 800124c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <BSP_LED_Init+0xb0>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	e015      	b.n	8001290 <BSP_LED_Init+0x60>
  }
  else if (Led == LED2)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d10f      	bne.n	800128a <BSP_LED_Init+0x5a>
  {

    LED2_GPIO_CLK_ENABLE();
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <BSP_LED_Init+0xb0>)
 800126c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001270:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <BSP_LED_Init+0xb0>)
 8001272:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800127a:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <BSP_LED_Init+0xb0>)
 800127c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	e002      	b.n	8001290 <BSP_LED_Init+0x60>
  }
  else
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800128a:	f06f 0301 	mvn.w	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001298:	2302      	movs	r3, #2
 800129a:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Pin = LED_PIN [Led];
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4a11      	ldr	r2, [pc, #68]	; (80012e4 <BSP_LED_Init+0xb4>)
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_PORT [Led], &gpio_init_structure);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <BSP_LED_Init+0xb8>)
 80012aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ae:	f107 0210 	add.w	r2, r7, #16
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 faab 	bl	8001810 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN[Led], GPIO_PIN_SET);
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	4a0a      	ldr	r2, [pc, #40]	; (80012e8 <BSP_LED_Init+0xb8>)
 80012be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	4a07      	ldr	r2, [pc, #28]	; (80012e4 <BSP_LED_Init+0xb4>)
 80012c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	2201      	movs	r2, #1
 80012ce:	4619      	mov	r1, r3
 80012d0:	f000 fd4e 	bl	8001d70 <HAL_GPIO_WritePin>

  return ret;
 80012d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3728      	adds	r7, #40	; 0x28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	58024400 	.word	0x58024400
 80012e4:	0800a51c 	.word	0x0800a51c
 80012e8:	24000000 	.word	0x24000000

080012ec <BSP_LED_Off>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <BSP_LED_Off+0x34>)
 80012fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <BSP_LED_Off+0x38>)
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	b29b      	uxth	r3, r3
 800130c:	2201      	movs	r2, #1
 800130e:	4619      	mov	r1, r3
 8001310:	f000 fd2e 	bl	8001d70 <HAL_GPIO_WritePin>
  return ret;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	24000000 	.word	0x24000000
 8001324:	0800a51c 	.word	0x0800a51c

08001328 <BSP_LED_Toggle>:
  *            @arg  LED1
  *            @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 8001336:	79fb      	ldrb	r3, [r7, #7]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <BSP_LED_Toggle+0x30>)
 800133a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <BSP_LED_Toggle+0x34>)
 8001342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4619      	mov	r1, r3
 800134a:	f000 fd45 	bl	8001dd8 <HAL_GPIO_TogglePin>
  return ret;
 800134e:	68fb      	ldr	r3, [r7, #12]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	24000000 	.word	0x24000000
 800135c:	0800a51c 	.word	0x0800a51c

08001360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <SystemInit+0xec>)
 8001366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136a:	4a38      	ldr	r2, [pc, #224]	; (800144c <SystemInit+0xec>)
 800136c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <SystemInit+0xf0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	2b06      	cmp	r3, #6
 800137e:	d807      	bhi.n	8001390 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001380:	4b33      	ldr	r3, [pc, #204]	; (8001450 <SystemInit+0xf0>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f023 030f 	bic.w	r3, r3, #15
 8001388:	4a31      	ldr	r2, [pc, #196]	; (8001450 <SystemInit+0xf0>)
 800138a:	f043 0307 	orr.w	r3, r3, #7
 800138e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001390:	4b30      	ldr	r3, [pc, #192]	; (8001454 <SystemInit+0xf4>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a2f      	ldr	r2, [pc, #188]	; (8001454 <SystemInit+0xf4>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800139c:	4b2d      	ldr	r3, [pc, #180]	; (8001454 <SystemInit+0xf4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <SystemInit+0xf4>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	492b      	ldr	r1, [pc, #172]	; (8001454 <SystemInit+0xf4>)
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <SystemInit+0xf8>)
 80013aa:	4013      	ands	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80013ae:	4b28      	ldr	r3, [pc, #160]	; (8001450 <SystemInit+0xf0>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	d907      	bls.n	80013ca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80013ba:	4b25      	ldr	r3, [pc, #148]	; (8001450 <SystemInit+0xf0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 030f 	bic.w	r3, r3, #15
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <SystemInit+0xf0>)
 80013c4:	f043 0307 	orr.w	r3, r3, #7
 80013c8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80013ca:	4b22      	ldr	r3, [pc, #136]	; (8001454 <SystemInit+0xf4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <SystemInit+0xf4>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <SystemInit+0xf4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80013dc:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <SystemInit+0xf4>)
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <SystemInit+0xfc>)
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	; (8001454 <SystemInit+0xf4>)
 80013e4:	4a1e      	ldr	r2, [pc, #120]	; (8001460 <SystemInit+0x100>)
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	; (8001454 <SystemInit+0xf4>)
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <SystemInit+0x104>)
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80013ee:	4b19      	ldr	r3, [pc, #100]	; (8001454 <SystemInit+0xf4>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <SystemInit+0xf4>)
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <SystemInit+0x104>)
 80013f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <SystemInit+0xf4>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001400:	4b14      	ldr	r3, [pc, #80]	; (8001454 <SystemInit+0xf4>)
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <SystemInit+0x104>)
 8001404:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <SystemInit+0xf4>)
 8001408:	2200      	movs	r2, #0
 800140a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800140c:	4b11      	ldr	r3, [pc, #68]	; (8001454 <SystemInit+0xf4>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a10      	ldr	r2, [pc, #64]	; (8001454 <SystemInit+0xf4>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <SystemInit+0xf4>)
 800141a:	2200      	movs	r2, #0
 800141c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800141e:	4b12      	ldr	r3, [pc, #72]	; (8001468 <SystemInit+0x108>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <SystemInit+0x10c>)
 8001424:	4013      	ands	r3, r2
 8001426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800142a:	d202      	bcs.n	8001432 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <SystemInit+0x110>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <SystemInit+0x114>)
 8001434:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001438:	601a      	str	r2, [r3, #0]
  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  extern void* g_pfnVectors;
  SCB->VTOR = (uint32_t)(&g_pfnVectors); /* Vector Table Relocation in Internal FLASH */
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <SystemInit+0xec>)
 800143c:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <SystemInit+0x118>)
 800143e:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	52002000 	.word	0x52002000
 8001454:	58024400 	.word	0x58024400
 8001458:	eaf6ed7f 	.word	0xeaf6ed7f
 800145c:	02020200 	.word	0x02020200
 8001460:	01ff0000 	.word	0x01ff0000
 8001464:	01010280 	.word	0x01010280
 8001468:	5c001000 	.word	0x5c001000
 800146c:	ffff0000 	.word	0xffff0000
 8001470:	51008108 	.word	0x51008108
 8001474:	52004000 	.word	0x52004000
 8001478:	08000000 	.word	0x08000000

0800147c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
 8001484:	f000 f962 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001488:	f001 fdcc 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 800148c:	4601      	mov	r1, r0
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_Init+0x68>)
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <HAL_Init+0x6c>)
 800149a:	5cd3      	ldrb	r3, [r2, r3]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	fa21 f303 	lsr.w	r3, r1, r3
 80014a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_Init+0x68>)
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	4a0e      	ldr	r2, [pc, #56]	; (80014e8 <HAL_Init+0x6c>)
 80014b0:	5cd3      	ldrb	r3, [r2, r3]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
 80014bc:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_Init+0x70>)
 80014be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014c0:	4a0b      	ldr	r2, [pc, #44]	; (80014f0 <HAL_Init+0x74>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c6:	2000      	movs	r0, #0
 80014c8:	f7ff fd7e 	bl	8000fc8 <HAL_InitTick>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e002      	b.n	80014dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014d6:	f7ff fd0f 	bl	8000ef8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	58024400 	.word	0x58024400
 80014e8:	0800a524 	.word	0x0800a524
 80014ec:	2400000c 	.word	0x2400000c
 80014f0:	24000008 	.word	0x24000008

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	24000014 	.word	0x24000014
 8001518:	24000348 	.word	0x24000348

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	24000348 	.word	0x24000348

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_Delay+0x40>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	24000014 	.word	0x24000014

08001578 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <HAL_GetREVID+0x14>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0c1b      	lsrs	r3, r3, #16
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	5c001000 	.word	0x5c001000

08001590 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d007      	beq.n	80015ae <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x1e>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d004      	beq.n	80015ae <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x1e>
 80015a4:	f240 211b 	movw	r1, #539	; 0x21b
 80015a8:	4807      	ldr	r0, [pc, #28]	; (80015c8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x38>)
 80015aa:	f7ff fc9a 	bl	8000ee2 <assert_failed>

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x3c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f023 0202 	bic.w	r2, r3, #2
 80015b6:	4905      	ldr	r1, [pc, #20]	; (80015cc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x3c>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	600b      	str	r3, [r1, #0]
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	0800a078 	.word	0x0800a078
 80015cc:	58003c00 	.word	0x58003c00

080015d0 <HAL_SYSCFG_DisableVREFBUF>:
  * @brief  Disable the Internal Voltage Reference buffer (VREFBUF).
  *
  * @retval None
  */
void HAL_SYSCFG_DisableVREFBUF(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015d4:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_SYSCFG_DisableVREFBUF+0x1c>)
 80015da:	f023 0301 	bic.w	r3, r3, #1
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	58003c00 	.word	0x58003c00

080015f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800160c:	4013      	ands	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <__NVIC_SetPriorityGrouping+0x44>)
 800161a:	4313      	orrs	r3, r2
 800161c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161e:	4a04      	ldr	r2, [pc, #16]	; (8001630 <__NVIC_SetPriorityGrouping+0x40>)
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	60d3      	str	r3, [r2, #12]
}
 8001624:	bf00      	nop
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	05fa0000 	.word	0x05fa0000

08001638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <__NVIC_GetPriorityGrouping+0x18>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	0a1b      	lsrs	r3, r3, #8
 8001642:	f003 0307 	and.w	r3, r3, #7
}
 8001646:	4618      	mov	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800165e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001662:	2b00      	cmp	r3, #0
 8001664:	db0b      	blt.n	800167e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001666:	88fb      	ldrh	r3, [r7, #6]
 8001668:	f003 021f 	and.w	r2, r3, #31
 800166c:	4907      	ldr	r1, [pc, #28]	; (800168c <__NVIC_EnableIRQ+0x38>)
 800166e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001672:	095b      	lsrs	r3, r3, #5
 8001674:	2001      	movs	r0, #1
 8001676:	fa00 f202 	lsl.w	r2, r0, r2
 800167a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	e000e100 	.word	0xe000e100

08001690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	6039      	str	r1, [r7, #0]
 800169a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	db0a      	blt.n	80016ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	490c      	ldr	r1, [pc, #48]	; (80016dc <__NVIC_SetPriority+0x4c>)
 80016aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ae:	0112      	lsls	r2, r2, #4
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	440b      	add	r3, r1
 80016b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016b8:	e00a      	b.n	80016d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4908      	ldr	r1, [pc, #32]	; (80016e0 <__NVIC_SetPriority+0x50>)
 80016c0:	88fb      	ldrh	r3, [r7, #6]
 80016c2:	f003 030f 	and.w	r3, r3, #15
 80016c6:	3b04      	subs	r3, #4
 80016c8:	0112      	lsls	r2, r2, #4
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	440b      	add	r3, r1
 80016ce:	761a      	strb	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	e000e100 	.word	0xe000e100
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b089      	sub	sp, #36	; 0x24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f003 0307 	and.w	r3, r3, #7
 80016f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f1c3 0307 	rsb	r3, r3, #7
 80016fe:	2b04      	cmp	r3, #4
 8001700:	bf28      	it	cs
 8001702:	2304      	movcs	r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	3304      	adds	r3, #4
 800170a:	2b06      	cmp	r3, #6
 800170c:	d902      	bls.n	8001714 <NVIC_EncodePriority+0x30>
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	3b03      	subs	r3, #3
 8001712:	e000      	b.n	8001716 <NVIC_EncodePriority+0x32>
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	401a      	ands	r2, r3
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800172c:	f04f 31ff 	mov.w	r1, #4294967295
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa01 f303 	lsl.w	r3, r1, r3
 8001736:	43d9      	mvns	r1, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800173c:	4313      	orrs	r3, r2
         );
}
 800173e:	4618      	mov	r0, r3
 8001740:	3724      	adds	r7, #36	; 0x24
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2b07      	cmp	r3, #7
 8001758:	d00f      	beq.n	800177a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b06      	cmp	r3, #6
 800175e:	d00c      	beq.n	800177a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d009      	beq.n	800177a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2b04      	cmp	r3, #4
 800176a:	d006      	beq.n	800177a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b03      	cmp	r3, #3
 8001770:	d003      	beq.n	800177a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001772:	2192      	movs	r1, #146	; 0x92
 8001774:	4804      	ldr	r0, [pc, #16]	; (8001788 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001776:	f7ff fbb4 	bl	8000ee2 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ff38 	bl	80015f0 <__NVIC_SetPriorityGrouping>
}
 8001780:	bf00      	nop
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	0800a0f4 	.word	0x0800a0f4

0800178c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
 8001798:	81fb      	strh	r3, [r7, #14]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d903      	bls.n	80017a8 <HAL_NVIC_SetPriority+0x1c>
 80017a0:	21aa      	movs	r1, #170	; 0xaa
 80017a2:	480e      	ldr	r0, [pc, #56]	; (80017dc <HAL_NVIC_SetPriority+0x50>)
 80017a4:	f7ff fb9d 	bl	8000ee2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b0f      	cmp	r3, #15
 80017ac:	d903      	bls.n	80017b6 <HAL_NVIC_SetPriority+0x2a>
 80017ae:	21ab      	movs	r1, #171	; 0xab
 80017b0:	480a      	ldr	r0, [pc, #40]	; (80017dc <HAL_NVIC_SetPriority+0x50>)
 80017b2:	f7ff fb96 	bl	8000ee2 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 80017b6:	f7ff ff3f 	bl	8001638 <__NVIC_GetPriorityGrouping>
 80017ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	6978      	ldr	r0, [r7, #20]
 80017c2:	f7ff ff8f 	bl	80016e4 <NVIC_EncodePriority>
 80017c6:	4602      	mov	r2, r0
 80017c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff5e 	bl	8001690 <__NVIC_SetPriority>
}
 80017d4:	bf00      	nop
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	0800a0f4 	.word	0x0800a0f4

080017e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	da03      	bge.n	80017fa <HAL_NVIC_EnableIRQ+0x1a>
 80017f2:	21be      	movs	r1, #190	; 0xbe
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <HAL_NVIC_EnableIRQ+0x2c>)
 80017f6:	f7ff fb74 	bl	8000ee2 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff28 	bl	8001654 <__NVIC_EnableIRQ>
}
 8001804:	bf00      	nop
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	0800a0f4 	.word	0x0800a0f4

08001810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_GPIO_Init+0x12c>)
 8001820:	617b      	str	r3, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a46      	ldr	r2, [pc, #280]	; (8001940 <HAL_GPIO_Init+0x130>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02b      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a45      	ldr	r2, [pc, #276]	; (8001944 <HAL_GPIO_Init+0x134>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d027      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a44      	ldr	r2, [pc, #272]	; (8001948 <HAL_GPIO_Init+0x138>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d023      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a43      	ldr	r2, [pc, #268]	; (800194c <HAL_GPIO_Init+0x13c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d01f      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a42      	ldr	r2, [pc, #264]	; (8001950 <HAL_GPIO_Init+0x140>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d01b      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a41      	ldr	r2, [pc, #260]	; (8001954 <HAL_GPIO_Init+0x144>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d017      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a40      	ldr	r2, [pc, #256]	; (8001958 <HAL_GPIO_Init+0x148>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_GPIO_Init+0x14c>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d00f      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a3e      	ldr	r2, [pc, #248]	; (8001960 <HAL_GPIO_Init+0x150>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d00b      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a3d      	ldr	r2, [pc, #244]	; (8001964 <HAL_GPIO_Init+0x154>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d007      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a3c      	ldr	r2, [pc, #240]	; (8001968 <HAL_GPIO_Init+0x158>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_Init+0x72>
 800187a:	21bb      	movs	r1, #187	; 0xbb
 800187c:	483b      	ldr	r0, [pc, #236]	; (800196c <HAL_GPIO_Init+0x15c>)
 800187e:	f7ff fb30 	bl	8000ee2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_GPIO_Init+0x88>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b37      	ldr	r3, [pc, #220]	; (8001970 <HAL_GPIO_Init+0x160>)
 8001892:	4013      	ands	r3, r2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_Init+0x90>
 8001898:	21bc      	movs	r1, #188	; 0xbc
 800189a:	4834      	ldr	r0, [pc, #208]	; (800196c <HAL_GPIO_Init+0x15c>)
 800189c:	f7ff fb21 	bl	8000ee2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d035      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d031      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b11      	cmp	r3, #17
 80018b6:	d02d      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d029      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b12      	cmp	r3, #18
 80018c6:	d025      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a29      	ldr	r2, [pc, #164]	; (8001974 <HAL_GPIO_Init+0x164>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d020      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4a28      	ldr	r2, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x168>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d01b      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	4a26      	ldr	r2, [pc, #152]	; (800197c <HAL_GPIO_Init+0x16c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d016      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a25      	ldr	r2, [pc, #148]	; (8001980 <HAL_GPIO_Init+0x170>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d011      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a23      	ldr	r2, [pc, #140]	; (8001984 <HAL_GPIO_Init+0x174>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00c      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a22      	ldr	r2, [pc, #136]	; (8001988 <HAL_GPIO_Init+0x178>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b03      	cmp	r3, #3
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x104>
 800190c:	21bd      	movs	r1, #189	; 0xbd
 800190e:	4817      	ldr	r0, [pc, #92]	; (800196c <HAL_GPIO_Init+0x15c>)
 8001910:	f7ff fae7 	bl	8000ee2 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 821a 	beq.w	8001d52 <HAL_GPIO_Init+0x542>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b01      	cmp	r3, #1
 8001924:	f000 8215 	beq.w	8001d52 <HAL_GPIO_Init+0x542>
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b02      	cmp	r3, #2
 800192e:	f000 8210 	beq.w	8001d52 <HAL_GPIO_Init+0x542>
 8001932:	21be      	movs	r1, #190	; 0xbe
 8001934:	480d      	ldr	r0, [pc, #52]	; (800196c <HAL_GPIO_Init+0x15c>)
 8001936:	f7ff fad4 	bl	8000ee2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800193a:	e20a      	b.n	8001d52 <HAL_GPIO_Init+0x542>
 800193c:	58000080 	.word	0x58000080
 8001940:	58020000 	.word	0x58020000
 8001944:	58020400 	.word	0x58020400
 8001948:	58020800 	.word	0x58020800
 800194c:	58020c00 	.word	0x58020c00
 8001950:	58021000 	.word	0x58021000
 8001954:	58021400 	.word	0x58021400
 8001958:	58021800 	.word	0x58021800
 800195c:	58021c00 	.word	0x58021c00
 8001960:	58022000 	.word	0x58022000
 8001964:	58022400 	.word	0x58022400
 8001968:	58022800 	.word	0x58022800
 800196c:	0800a174 	.word	0x0800a174
 8001970:	ffff0000 	.word	0xffff0000
 8001974:	11110000 	.word	0x11110000
 8001978:	11210000 	.word	0x11210000
 800197c:	11310000 	.word	0x11310000
 8001980:	11120000 	.word	0x11120000
 8001984:	11220000 	.word	0x11220000
 8001988:	11320000 	.word	0x11320000
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 81d4 	beq.w	8001d4c <HAL_GPIO_Init+0x53c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d00b      	beq.n	80019c4 <HAL_GPIO_Init+0x1b4>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d007      	beq.n	80019c4 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x1b4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	2b12      	cmp	r3, #18
 80019c2:	d144      	bne.n	8001a4e <HAL_GPIO_Init+0x23e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00f      	beq.n	80019ec <HAL_GPIO_Init+0x1dc>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d00b      	beq.n	80019ec <HAL_GPIO_Init+0x1dc>
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d007      	beq.n	80019ec <HAL_GPIO_Init+0x1dc>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x1dc>
 80019e4:	21ce      	movs	r1, #206	; 0xce
 80019e6:	4897      	ldr	r0, [pc, #604]	; (8001c44 <HAL_GPIO_Init+0x434>)
 80019e8:	f7ff fa7b 	bl	8000ee2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	2203      	movs	r2, #3
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a22:	2201      	movs	r2, #1
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0201 	and.w	r2, r3, #1
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x27e>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b12      	cmp	r3, #18
 8001a8c:	d15b      	bne.n	8001b46 <HAL_GPIO_Init+0x336>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a6d      	ldr	r2, [pc, #436]	; (8001c48 <HAL_GPIO_Init+0x438>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d02b      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a6c      	ldr	r2, [pc, #432]	; (8001c4c <HAL_GPIO_Init+0x43c>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d027      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a6b      	ldr	r2, [pc, #428]	; (8001c50 <HAL_GPIO_Init+0x440>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d023      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a6a      	ldr	r2, [pc, #424]	; (8001c54 <HAL_GPIO_Init+0x444>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d01f      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a69      	ldr	r2, [pc, #420]	; (8001c58 <HAL_GPIO_Init+0x448>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01b      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <HAL_GPIO_Init+0x44c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d017      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a67      	ldr	r2, [pc, #412]	; (8001c60 <HAL_GPIO_Init+0x450>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d013      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a66      	ldr	r2, [pc, #408]	; (8001c64 <HAL_GPIO_Init+0x454>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d00f      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a65      	ldr	r2, [pc, #404]	; (8001c68 <HAL_GPIO_Init+0x458>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00b      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <HAL_GPIO_Init+0x45c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a63      	ldr	r2, [pc, #396]	; (8001c70 <HAL_GPIO_Init+0x460>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2de>
 8001ae6:	21e6      	movs	r1, #230	; 0xe6
 8001ae8:	4856      	ldr	r0, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x434>)
 8001aea:	f7ff f9fa 	bl	8000ee2 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	2b0f      	cmp	r3, #15
 8001af4:	d903      	bls.n	8001afe <HAL_GPIO_Init+0x2ee>
 8001af6:	21e7      	movs	r1, #231	; 0xe7
 8001af8:	4852      	ldr	r0, [pc, #328]	; (8001c44 <HAL_GPIO_Init+0x434>)
 8001afa:	f7ff f9f2 	bl	8000ee2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	08da      	lsrs	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3208      	adds	r2, #8
 8001b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	220f      	movs	r2, #15
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	69b9      	ldr	r1, [r7, #24]
 8001b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	2203      	movs	r2, #3
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	43db      	mvns	r3, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0203 	and.w	r2, r3, #3
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 80e2 	beq.w	8001d4c <HAL_GPIO_Init+0x53c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b88:	4b3a      	ldr	r3, [pc, #232]	; (8001c74 <HAL_GPIO_Init+0x464>)
 8001b8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b8e:	4a39      	ldr	r2, [pc, #228]	; (8001c74 <HAL_GPIO_Init+0x464>)
 8001b90:	f043 0302 	orr.w	r3, r3, #2
 8001b94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_GPIO_Init+0x464>)
 8001b9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x468>)
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	3302      	adds	r3, #2
 8001bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	220f      	movs	r2, #15
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a1e      	ldr	r2, [pc, #120]	; (8001c48 <HAL_GPIO_Init+0x438>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d054      	beq.n	8001c7c <HAL_GPIO_Init+0x46c>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_GPIO_Init+0x43c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d031      	beq.n	8001c3e <HAL_GPIO_Init+0x42e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a1c      	ldr	r2, [pc, #112]	; (8001c50 <HAL_GPIO_Init+0x440>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02b      	beq.n	8001c3a <HAL_GPIO_Init+0x42a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_GPIO_Init+0x444>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d025      	beq.n	8001c36 <HAL_GPIO_Init+0x426>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a1a      	ldr	r2, [pc, #104]	; (8001c58 <HAL_GPIO_Init+0x448>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d01f      	beq.n	8001c32 <HAL_GPIO_Init+0x422>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x44c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d019      	beq.n	8001c2e <HAL_GPIO_Init+0x41e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a18      	ldr	r2, [pc, #96]	; (8001c60 <HAL_GPIO_Init+0x450>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_GPIO_Init+0x41a>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a17      	ldr	r2, [pc, #92]	; (8001c64 <HAL_GPIO_Init+0x454>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00d      	beq.n	8001c26 <HAL_GPIO_Init+0x416>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a16      	ldr	r2, [pc, #88]	; (8001c68 <HAL_GPIO_Init+0x458>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d007      	beq.n	8001c22 <HAL_GPIO_Init+0x412>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a15      	ldr	r2, [pc, #84]	; (8001c6c <HAL_GPIO_Init+0x45c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d101      	bne.n	8001c1e <HAL_GPIO_Init+0x40e>
 8001c1a:	2309      	movs	r3, #9
 8001c1c:	e02f      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c1e:	230a      	movs	r3, #10
 8001c20:	e02d      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c22:	2308      	movs	r3, #8
 8001c24:	e02b      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c26:	2307      	movs	r3, #7
 8001c28:	e029      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c2a:	2306      	movs	r3, #6
 8001c2c:	e027      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e025      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e023      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e021      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e01f      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e01d      	b.n	8001c7e <HAL_GPIO_Init+0x46e>
 8001c42:	bf00      	nop
 8001c44:	0800a174 	.word	0x0800a174
 8001c48:	58020000 	.word	0x58020000
 8001c4c:	58020400 	.word	0x58020400
 8001c50:	58020800 	.word	0x58020800
 8001c54:	58020c00 	.word	0x58020c00
 8001c58:	58021000 	.word	0x58021000
 8001c5c:	58021400 	.word	0x58021400
 8001c60:	58021800 	.word	0x58021800
 8001c64:	58021c00 	.word	0x58021c00
 8001c68:	58022000 	.word	0x58022000
 8001c6c:	58022400 	.word	0x58022400
 8001c70:	58022800 	.word	0x58022800
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58000400 	.word	0x58000400
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	69fa      	ldr	r2, [r7, #28]
 8001c80:	f002 0203 	and.w	r2, r2, #3
 8001c84:	0092      	lsls	r2, r2, #2
 8001c86:	4093      	lsls	r3, r2
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8e:	4937      	ldr	r1, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x55c>)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	089b      	lsrs	r3, r3, #2
 8001c94:	3302      	adds	r3, #2
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x4b0>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d003      	beq.n	8001cea <HAL_GPIO_Init+0x4da>
        {
          temp |= iocurrent;
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_Init+0x506>
        {
          temp |= iocurrent;
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x534>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001d44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3301      	adds	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f47f ae15 	bne.w	800198c <HAL_GPIO_Init+0x17c>
  }
}
 8001d62:	bf00      	nop
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	58000400 	.word	0x58000400

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_GPIO_WritePin+0x20>
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_GPIO_WritePin+0x60>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d004      	beq.n	8001d9a <HAL_GPIO_WritePin+0x2a>
 8001d90:	f240 11ad 	movw	r1, #429	; 0x1ad
 8001d94:	480f      	ldr	r0, [pc, #60]	; (8001dd4 <HAL_GPIO_WritePin+0x64>)
 8001d96:	f7ff f8a4 	bl	8000ee2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001d9a:	787b      	ldrb	r3, [r7, #1]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <HAL_GPIO_WritePin+0x40>
 8001da0:	787b      	ldrb	r3, [r7, #1]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d004      	beq.n	8001db0 <HAL_GPIO_WritePin+0x40>
 8001da6:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8001daa:	480a      	ldr	r0, [pc, #40]	; (8001dd4 <HAL_GPIO_WritePin+0x64>)
 8001dac:	f7ff f899 	bl	8000ee2 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001db0:	787b      	ldrb	r3, [r7, #1]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001dbc:	e003      	b.n	8001dc6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001dbe:	887b      	ldrh	r3, [r7, #2]
 8001dc0:	041a      	lsls	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	ffff0000 	.word	0xffff0000
 8001dd4:	0800a174 	.word	0x0800a174

08001dd8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001de4:	887b      	ldrh	r3, [r7, #2]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d004      	beq.n	8001df4 <HAL_GPIO_TogglePin+0x1c>
 8001dea:	887a      	ldrh	r2, [r7, #2]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_GPIO_TogglePin+0x4c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_GPIO_TogglePin+0x26>
 8001df4:	f240 11c3 	movw	r1, #451	; 0x1c3
 8001df8:	480b      	ldr	r0, [pc, #44]	; (8001e28 <HAL_GPIO_TogglePin+0x50>)
 8001dfa:	f7ff f872 	bl	8000ee2 <assert_failed>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695a      	ldr	r2, [r3, #20]
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	401a      	ands	r2, r3
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d104      	bne.n	8001e16 <HAL_GPIO_TogglePin+0x3e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e0c:	887b      	ldrh	r3, [r7, #2]
 8001e0e:	041a      	lsls	r2, r3, #16
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_TogglePin+0x44>
    GPIOx->BSRR = GPIO_Pin;
 8001e16:	887a      	ldrh	r2, [r7, #2]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	619a      	str	r2, [r3, #24]
}
 8001e1c:	bf00      	nop
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	ffff0000 	.word	0xffff0000
 8001e28:	0800a174 	.word	0x0800a174

08001e2c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e3a:	6013      	str	r3, [r2, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	58024800 	.word	0x58024800

08001e4c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d007      	beq.n	8001e6a <HAL_PWREx_ConfigSupply+0x1e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d004      	beq.n	8001e6a <HAL_PWREx_ConfigSupply+0x1e>
 8001e60:	f240 113f 	movw	r1, #319	; 0x13f
 8001e64:	481a      	ldr	r0, [pc, #104]	; (8001ed0 <HAL_PWREx_ConfigSupply+0x84>)
 8001e66:	f7ff f83c 	bl	8000ee2 <assert_failed>

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_PWREx_ConfigSupply+0x88>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d00a      	beq.n	8001e8c <HAL_PWREx_ConfigSupply+0x40>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <HAL_PWREx_ConfigSupply+0x88>)
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d001      	beq.n	8001e88 <HAL_PWREx_ConfigSupply+0x3c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e01f      	b.n	8001ec8 <HAL_PWREx_ConfigSupply+0x7c>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e01d      	b.n	8001ec8 <HAL_PWREx_ConfigSupply+0x7c>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001e8c:	4b11      	ldr	r3, [pc, #68]	; (8001ed4 <HAL_PWREx_ConfigSupply+0x88>)
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	f023 0207 	bic.w	r2, r3, #7
 8001e94:	490f      	ldr	r1, [pc, #60]	; (8001ed4 <HAL_PWREx_ConfigSupply+0x88>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001e9c:	f7ff fb3e 	bl	800151c <HAL_GetTick>
 8001ea0:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ea2:	e009      	b.n	8001eb8 <HAL_PWREx_ConfigSupply+0x6c>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ea4:	f7ff fb3a 	bl	800151c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001eb2:	d901      	bls.n	8001eb8 <HAL_PWREx_ConfigSupply+0x6c>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e007      	b.n	8001ec8 <HAL_PWREx_ConfigSupply+0x7c>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001eb8:	4b06      	ldr	r3, [pc, #24]	; (8001ed4 <HAL_PWREx_ConfigSupply+0x88>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ec4:	d1ee      	bne.n	8001ea4 <HAL_PWREx_ConfigSupply+0x58>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	0800a1f4 	.word	0x0800a1f4
 8001ed4:	58024800 	.word	0x58024800

08001ed8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f000 bd25 	b.w	8002936 <HAL_RCC_OscConfig+0xa5e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d028      	beq.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d122      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d11c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0310 	and.w	r3, r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d116      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d110      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10a      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0320 	and.w	r3, r3, #32
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d104      	bne.n	8001f46 <HAL_RCC_OscConfig+0x6e>
 8001f3c:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001f40:	489b      	ldr	r0, [pc, #620]	; (80021b0 <HAL_RCC_OscConfig+0x2d8>)
 8001f42:	f7fe ffce 	bl	8000ee2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f000 809d 	beq.w	800208e <HAL_RCC_OscConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <HAL_RCC_OscConfig+0xa2>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_OscConfig+0xa2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f6e:	d004      	beq.n	8001f7a <HAL_RCC_OscConfig+0xa2>
 8001f70:	f240 11a3 	movw	r1, #419	; 0x1a3
 8001f74:	488e      	ldr	r0, [pc, #568]	; (80021b0 <HAL_RCC_OscConfig+0x2d8>)
 8001f76:	f7fe ffb4 	bl	8000ee2 <assert_failed>

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7a:	4b8e      	ldr	r3, [pc, #568]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f84:	4b8b      	ldr	r3, [pc, #556]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8c:	2b10      	cmp	r3, #16
 8001f8e:	d007      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xc8>
 8001f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f92:	2b18      	cmp	r3, #24
 8001f94:	d111      	bne.n	8001fba <HAL_RCC_OscConfig+0xe2>
 8001f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d10c      	bne.n	8001fba <HAL_RCC_OscConfig+0xe2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa0:	4b84      	ldr	r3, [pc, #528]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d06f      	beq.n	800208c <HAL_RCC_OscConfig+0x1b4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d16b      	bne.n	800208c <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	f000 bcbe 	b.w	8002936 <HAL_RCC_OscConfig+0xa5e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc2:	d106      	bne.n	8001fd2 <HAL_RCC_OscConfig+0xfa>
 8001fc4:	4b7b      	ldr	r3, [pc, #492]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a7a      	ldr	r2, [pc, #488]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fce:	6013      	str	r3, [r2, #0]
 8001fd0:	e02e      	b.n	8002030 <HAL_RCC_OscConfig+0x158>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10c      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x11c>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	4b73      	ldr	r3, [pc, #460]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a72      	ldr	r2, [pc, #456]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8001fec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	e01d      	b.n	8002030 <HAL_RCC_OscConfig+0x158>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCC_OscConfig+0x140>
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a69      	ldr	r2, [pc, #420]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	e00b      	b.n	8002030 <HAL_RCC_OscConfig+0x158>
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 800201e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002022:	6013      	str	r3, [r2, #0]
 8002024:	4b63      	ldr	r3, [pc, #396]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a62      	ldr	r2, [pc, #392]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 800202a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800202e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d014      	beq.n	8002062 <HAL_RCC_OscConfig+0x18a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fa70 	bl	800151c <HAL_GetTick>
 800203c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCC_OscConfig+0x17c>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002040:	f7ff fa6c 	bl	800151c <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b64      	cmp	r3, #100	; 0x64
 800204c:	d902      	bls.n	8002054 <HAL_RCC_OscConfig+0x17c>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	f000 bc71 	b.w	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002054:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCC_OscConfig+0x168>
 8002060:	e015      	b.n	800208e <HAL_RCC_OscConfig+0x1b6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002062:	f7ff fa5b 	bl	800151c <HAL_GetTick>
 8002066:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002068:	e009      	b.n	800207e <HAL_RCC_OscConfig+0x1a6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206a:	f7ff fa57 	bl	800151c <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d902      	bls.n	800207e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	f000 bc5c 	b.w	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800207e:	4b4d      	ldr	r3, [pc, #308]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ef      	bne.n	800206a <HAL_RCC_OscConfig+0x192>
 800208a:	e000      	b.n	800208e <HAL_RCC_OscConfig+0x1b6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 80d7 	beq.w	800224a <HAL_RCC_OscConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d018      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d014      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d010      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d00c      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b11      	cmp	r3, #17
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b19      	cmp	r3, #25
 80020ca:	d004      	beq.n	80020d6 <HAL_RCC_OscConfig+0x1fe>
 80020cc:	f240 11d7 	movw	r1, #471	; 0x1d7
 80020d0:	4837      	ldr	r0, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x2d8>)
 80020d2:	f7fe ff06 	bl	8000ee2 <assert_failed>
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b7f      	cmp	r3, #127	; 0x7f
 80020dc:	d904      	bls.n	80020e8 <HAL_RCC_OscConfig+0x210>
 80020de:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80020e2:	4833      	ldr	r0, [pc, #204]	; (80021b0 <HAL_RCC_OscConfig+0x2d8>)
 80020e4:	f7fe fefd 	bl	8000ee2 <assert_failed>

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e8:	4b32      	ldr	r3, [pc, #200]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020f2:	4b30      	ldr	r3, [pc, #192]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_RCC_OscConfig+0x236>
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	2b18      	cmp	r3, #24
 8002102:	d13b      	bne.n	800217c <HAL_RCC_OscConfig+0x2a4>
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	2b00      	cmp	r3, #0
 800210c:	d136      	bne.n	800217c <HAL_RCC_OscConfig+0x2a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_RCC_OscConfig+0x250>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_RCC_OscConfig+0x250>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	f000 bc07 	b.w	8002936 <HAL_RCC_OscConfig+0xa5e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	f7ff fa26 	bl	8001578 <HAL_GetREVID>
 800212c:	4602      	mov	r2, r0
 800212e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002132:	429a      	cmp	r2, r3
 8002134:	d817      	bhi.n	8002166 <HAL_RCC_OscConfig+0x28e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b40      	cmp	r3, #64	; 0x40
 800213c:	d108      	bne.n	8002150 <HAL_RCC_OscConfig+0x278>
 800213e:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002146:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800214c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800214e:	e07c      	b.n	800224a <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	031b      	lsls	r3, r3, #12
 800215e:	4915      	ldr	r1, [pc, #84]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002160:	4313      	orrs	r3, r2
 8002162:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002164:	e071      	b.n	800224a <HAL_RCC_OscConfig+0x372>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	061b      	lsls	r3, r3, #24
 8002174:	490f      	ldr	r1, [pc, #60]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217a:	e066      	b.n	800224a <HAL_RCC_OscConfig+0x372>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d049      	beq.n	8002218 <HAL_RCC_OscConfig+0x340>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002184:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 0219 	bic.w	r2, r3, #25
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4908      	ldr	r1, [pc, #32]	; (80021b4 <HAL_RCC_OscConfig+0x2dc>)
 8002192:	4313      	orrs	r3, r2
 8002194:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff f9c1 	bl	800151c <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219c:	e00c      	b.n	80021b8 <HAL_RCC_OscConfig+0x2e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800219e:	f7ff f9bd 	bl	800151c <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d905      	bls.n	80021b8 <HAL_RCC_OscConfig+0x2e0>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e3c2      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
 80021b0:	0800a274 	.word	0x0800a274
 80021b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b8:	4ba4      	ldr	r3, [pc, #656]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0ec      	beq.n	800219e <HAL_RCC_OscConfig+0x2c6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	f7ff f9d8 	bl	8001578 <HAL_GetREVID>
 80021c8:	4602      	mov	r2, r0
 80021ca:	f241 0303 	movw	r3, #4099	; 0x1003
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d817      	bhi.n	8002202 <HAL_RCC_OscConfig+0x32a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	2b40      	cmp	r3, #64	; 0x40
 80021d8:	d108      	bne.n	80021ec <HAL_RCC_OscConfig+0x314>
 80021da:	4b9c      	ldr	r3, [pc, #624]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021e2:	4a9a      	ldr	r2, [pc, #616]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	6053      	str	r3, [r2, #4]
 80021ea:	e02e      	b.n	800224a <HAL_RCC_OscConfig+0x372>
 80021ec:	4b97      	ldr	r3, [pc, #604]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	031b      	lsls	r3, r3, #12
 80021fa:	4994      	ldr	r1, [pc, #592]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
 8002200:	e023      	b.n	800224a <HAL_RCC_OscConfig+0x372>
 8002202:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	061b      	lsls	r3, r3, #24
 8002210:	498e      	ldr	r1, [pc, #568]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002212:	4313      	orrs	r3, r2
 8002214:	604b      	str	r3, [r1, #4]
 8002216:	e018      	b.n	800224a <HAL_RCC_OscConfig+0x372>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002218:	4b8c      	ldr	r3, [pc, #560]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a8b      	ldr	r2, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800221e:	f023 0301 	bic.w	r3, r3, #1
 8002222:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7ff f97a 	bl	800151c <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222c:	f7ff f976 	bl	800151c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e37b      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800223e:	4b83      	ldr	r3, [pc, #524]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0304 	and.w	r3, r3, #4
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x354>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80bf 	beq.w	80023d6 <HAL_RCC_OscConfig+0x4fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d008      	beq.n	8002272 <HAL_RCC_OscConfig+0x39a>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	2b80      	cmp	r3, #128	; 0x80
 8002266:	d004      	beq.n	8002272 <HAL_RCC_OscConfig+0x39a>
 8002268:	f240 211a 	movw	r1, #538	; 0x21a
 800226c:	4878      	ldr	r0, [pc, #480]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 800226e:	f7fe fe38 	bl	8000ee2 <assert_failed>
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	2b3f      	cmp	r3, #63	; 0x3f
 8002278:	d904      	bls.n	8002284 <HAL_RCC_OscConfig+0x3ac>
 800227a:	f240 211b 	movw	r1, #539	; 0x21b
 800227e:	4874      	ldr	r0, [pc, #464]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 8002280:	f7fe fe2f 	bl	8000ee2 <assert_failed>

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002284:	4b71      	ldr	r3, [pc, #452]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800228c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800228e:	4b6f      	ldr	r3, [pc, #444]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	2b08      	cmp	r3, #8
 8002298:	d007      	beq.n	80022aa <HAL_RCC_OscConfig+0x3d2>
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b18      	cmp	r3, #24
 800229e:	d13a      	bne.n	8002316 <HAL_RCC_OscConfig+0x43e>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d135      	bne.n	8002316 <HAL_RCC_OscConfig+0x43e>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022aa:	4b68      	ldr	r3, [pc, #416]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ea>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	2b80      	cmp	r3, #128	; 0x80
 80022bc:	d001      	beq.n	80022c2 <HAL_RCC_OscConfig+0x3ea>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e339      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022c2:	f7ff f959 	bl	8001578 <HAL_GetREVID>
 80022c6:	4602      	mov	r2, r0
 80022c8:	f241 0303 	movw	r3, #4099	; 0x1003
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d817      	bhi.n	8002300 <HAL_RCC_OscConfig+0x428>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	2b20      	cmp	r3, #32
 80022d6:	d108      	bne.n	80022ea <HAL_RCC_OscConfig+0x412>
 80022d8:	4b5c      	ldr	r3, [pc, #368]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80022e0:	4a5a      	ldr	r2, [pc, #360]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80022e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022e6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022e8:	e075      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022ea:	4b58      	ldr	r3, [pc, #352]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	069b      	lsls	r3, r3, #26
 80022f8:	4954      	ldr	r1, [pc, #336]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022fe:	e06a      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002300:	4b52      	ldr	r3, [pc, #328]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	061b      	lsls	r3, r3, #24
 800230e:	494f      	ldr	r1, [pc, #316]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002310:	4313      	orrs	r3, r2
 8002312:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002314:	e05f      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d042      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800231e:	4b4b      	ldr	r3, [pc, #300]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a4a      	ldr	r2, [pc, #296]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002328:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232a:	f7ff f8f7 	bl	800151c <HAL_GetTick>
 800232e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x46c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002332:	f7ff f8f3 	bl	800151c <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e2f8      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002344:	4b41      	ldr	r3, [pc, #260]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0f0      	beq.n	8002332 <HAL_RCC_OscConfig+0x45a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002350:	f7ff f912 	bl	8001578 <HAL_GetREVID>
 8002354:	4602      	mov	r2, r0
 8002356:	f241 0303 	movw	r3, #4099	; 0x1003
 800235a:	429a      	cmp	r2, r3
 800235c:	d817      	bhi.n	800238e <HAL_RCC_OscConfig+0x4b6>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	2b20      	cmp	r3, #32
 8002364:	d108      	bne.n	8002378 <HAL_RCC_OscConfig+0x4a0>
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800236e:	4a37      	ldr	r2, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002374:	6053      	str	r3, [r2, #4]
 8002376:	e02e      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
 8002378:	4b34      	ldr	r3, [pc, #208]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	069b      	lsls	r3, r3, #26
 8002386:	4931      	ldr	r1, [pc, #196]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
 800238c:	e023      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
 800238e:	4b2f      	ldr	r3, [pc, #188]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	061b      	lsls	r3, r3, #24
 800239c:	492b      	ldr	r1, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	60cb      	str	r3, [r1, #12]
 80023a2:	e018      	b.n	80023d6 <HAL_RCC_OscConfig+0x4fe>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80023a4:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80023aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b0:	f7ff f8b4 	bl	800151c <HAL_GetTick>
 80023b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x4f2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80023b8:	f7ff f8b0 	bl	800151c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x4f2>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2b5      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80023ca:	4b20      	ldr	r3, [pc, #128]	; (800244c <HAL_RCC_OscConfig+0x574>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d047      	beq.n	8002472 <HAL_RCC_OscConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCC_OscConfig+0x524>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d004      	beq.n	80023fc <HAL_RCC_OscConfig+0x524>
 80023f2:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80023f6:	4816      	ldr	r0, [pc, #88]	; (8002450 <HAL_RCC_OscConfig+0x578>)
 80023f8:	f7fe fd73 	bl	8000ee2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d019      	beq.n	8002438 <HAL_RCC_OscConfig+0x560>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002404:	4b11      	ldr	r3, [pc, #68]	; (800244c <HAL_RCC_OscConfig+0x574>)
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	4a10      	ldr	r2, [pc, #64]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff f884 	bl	800151c <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002418:	f7ff f880 	bl	800151c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e285      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800242c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x540>
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x59a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800243a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243c:	4a03      	ldr	r2, [pc, #12]	; (800244c <HAL_RCC_OscConfig+0x574>)
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7ff f86a 	bl	800151c <HAL_GetTick>
 8002448:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800244a:	e00c      	b.n	8002466 <HAL_RCC_OscConfig+0x58e>
 800244c:	58024400 	.word	0x58024400
 8002450:	0800a274 	.word	0x0800a274
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002454:	f7ff f862 	bl	800151c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x58e>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e267      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002466:	4b71      	ldr	r3, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0x57c>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0320 	and.w	r3, r3, #32
 800247a:	2b00      	cmp	r3, #0
 800247c:	d043      	beq.n	8002506 <HAL_RCC_OscConfig+0x62e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCC_OscConfig+0x5c0>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d004      	beq.n	8002498 <HAL_RCC_OscConfig+0x5c0>
 800248e:	f240 2187 	movw	r1, #647	; 0x287
 8002492:	4867      	ldr	r0, [pc, #412]	; (8002630 <HAL_RCC_OscConfig+0x758>)
 8002494:	f7fe fd25 	bl	8000ee2 <assert_failed>

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d019      	beq.n	80024d4 <HAL_RCC_OscConfig+0x5fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024a0:	4b62      	ldr	r3, [pc, #392]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a61      	ldr	r2, [pc, #388]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024ac:	f7ff f836 	bl	800151c <HAL_GetTick>
 80024b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x5ee>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024b4:	f7ff f832 	bl	800151c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x5ee>
        {
          return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e237      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024c6:	4b59      	ldr	r3, [pc, #356]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x5dc>
 80024d2:	e018      	b.n	8002506 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024d4:	4b55      	ldr	r3, [pc, #340]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a54      	ldr	r2, [pc, #336]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024e0:	f7ff f81c 	bl	800151c <HAL_GetTick>
 80024e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x622>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80024e8:	f7ff f818 	bl	800151c <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x622>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e21d      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f0      	bne.n	80024e8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8098 	beq.w	8002644 <HAL_RCC_OscConfig+0x76c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00c      	beq.n	8002536 <HAL_RCC_OscConfig+0x65e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d008      	beq.n	8002536 <HAL_RCC_OscConfig+0x65e>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b05      	cmp	r3, #5
 800252a:	d004      	beq.n	8002536 <HAL_RCC_OscConfig+0x65e>
 800252c:	f240 21b1 	movw	r1, #689	; 0x2b1
 8002530:	483f      	ldr	r0, [pc, #252]	; (8002630 <HAL_RCC_OscConfig+0x758>)
 8002532:	f7fe fcd6 	bl	8000ee2 <assert_failed>

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_OscConfig+0x75c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a3e      	ldr	r2, [pc, #248]	; (8002634 <HAL_RCC_OscConfig+0x75c>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002542:	f7fe ffeb 	bl	800151c <HAL_GetTick>
 8002546:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002548:	e008      	b.n	800255c <HAL_RCC_OscConfig+0x684>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe ffe7 	bl	800151c <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b64      	cmp	r3, #100	; 0x64
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x684>
      {
        return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e1ec      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255c:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCC_OscConfig+0x75c>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0f0      	beq.n	800254a <HAL_RCC_OscConfig+0x672>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x6a6>
 8002570:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002574:	4a2d      	ldr	r2, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6713      	str	r3, [r2, #112]	; 0x70
 800257c:	e02d      	b.n	80025da <HAL_RCC_OscConfig+0x702>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10c      	bne.n	80025a0 <HAL_RCC_OscConfig+0x6c8>
 8002586:	4b29      	ldr	r3, [pc, #164]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258a:	4a28      	ldr	r2, [pc, #160]	; (800262c <HAL_RCC_OscConfig+0x754>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	6713      	str	r3, [r2, #112]	; 0x70
 8002592:	4b26      	ldr	r3, [pc, #152]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002596:	4a25      	ldr	r2, [pc, #148]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002598:	f023 0304 	bic.w	r3, r3, #4
 800259c:	6713      	str	r3, [r2, #112]	; 0x70
 800259e:	e01c      	b.n	80025da <HAL_RCC_OscConfig+0x702>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	2b05      	cmp	r3, #5
 80025a6:	d10c      	bne.n	80025c2 <HAL_RCC_OscConfig+0x6ea>
 80025a8:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025ae:	f043 0304 	orr.w	r3, r3, #4
 80025b2:	6713      	str	r3, [r2, #112]	; 0x70
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b8:	4a1c      	ldr	r2, [pc, #112]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	6713      	str	r3, [r2, #112]	; 0x70
 80025c0:	e00b      	b.n	80025da <HAL_RCC_OscConfig+0x702>
 80025c2:	4b1a      	ldr	r3, [pc, #104]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	4a19      	ldr	r2, [pc, #100]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025c8:	f023 0301 	bic.w	r3, r3, #1
 80025cc:	6713      	str	r3, [r2, #112]	; 0x70
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d2:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_RCC_OscConfig+0x754>)
 80025d4:	f023 0304 	bic.w	r3, r3, #4
 80025d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d015      	beq.n	800260e <HAL_RCC_OscConfig+0x736>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	f7fe ff9b 	bl	800151c <HAL_GetTick>
 80025e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025e8:	e00a      	b.n	8002600 <HAL_RCC_OscConfig+0x728>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025ea:	f7fe ff97 	bl	800151c <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e19a      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002600:	4b0a      	ldr	r3, [pc, #40]	; (800262c <HAL_RCC_OscConfig+0x754>)
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ee      	beq.n	80025ea <HAL_RCC_OscConfig+0x712>
 800260c:	e01a      	b.n	8002644 <HAL_RCC_OscConfig+0x76c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260e:	f7fe ff85 	bl	800151c <HAL_GetTick>
 8002612:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002614:	e010      	b.n	8002638 <HAL_RCC_OscConfig+0x760>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7fe ff81 	bl	800151c <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d907      	bls.n	8002638 <HAL_RCC_OscConfig+0x760>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e184      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
 800262c:	58024400 	.word	0x58024400
 8002630:	0800a274 	.word	0x0800a274
 8002634:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002638:	4b9b      	ldr	r3, [pc, #620]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800263a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e8      	bne.n	8002616 <HAL_RCC_OscConfig+0x73e>
      }
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_RCC_OscConfig+0x78e>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	d008      	beq.n	8002666 <HAL_RCC_OscConfig+0x78e>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	2b02      	cmp	r3, #2
 800265a:	d004      	beq.n	8002666 <HAL_RCC_OscConfig+0x78e>
 800265c:	f240 21e3 	movw	r1, #739	; 0x2e3
 8002660:	4892      	ldr	r0, [pc, #584]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 8002662:	f7fe fc3e 	bl	8000ee2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 8162 	beq.w	8002934 <HAL_RCC_OscConfig+0xa5c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002670:	4b8d      	ldr	r3, [pc, #564]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002678:	2b18      	cmp	r3, #24
 800267a:	f000 811d 	beq.w	80028b8 <HAL_RCC_OscConfig+0x9e0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b02      	cmp	r3, #2
 8002684:	f040 80f6 	bne.w	8002874 <HAL_RCC_OscConfig+0x99c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268c:	2b01      	cmp	r3, #1
 800268e:	d010      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7da>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00c      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7da>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b03      	cmp	r3, #3
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7da>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d004      	beq.n	80026b2 <HAL_RCC_OscConfig+0x7da>
 80026a8:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 80026ac:	487f      	ldr	r0, [pc, #508]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 80026ae:	f7fe fc18 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_RCC_OscConfig+0x7ea>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026be:	2b3f      	cmp	r3, #63	; 0x3f
 80026c0:	d904      	bls.n	80026cc <HAL_RCC_OscConfig+0x7f4>
 80026c2:	f240 21ed 	movw	r1, #749	; 0x2ed
 80026c6:	4879      	ldr	r0, [pc, #484]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 80026c8:	f7fe fc0b 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d904      	bls.n	80026de <HAL_RCC_OscConfig+0x806>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026dc:	d904      	bls.n	80026e8 <HAL_RCC_OscConfig+0x810>
 80026de:	f240 21ee 	movw	r1, #750	; 0x2ee
 80026e2:	4872      	ldr	r0, [pc, #456]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 80026e4:	f7fe fbfd 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_RCC_OscConfig+0x820>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	d904      	bls.n	8002702 <HAL_RCC_OscConfig+0x82a>
 80026f8:	f240 21ef 	movw	r1, #751	; 0x2ef
 80026fc:	486b      	ldr	r0, [pc, #428]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 80026fe:	f7fe fbf0 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_RCC_OscConfig+0x83a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d904      	bls.n	800271c <HAL_RCC_OscConfig+0x844>
 8002712:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8002716:	4865      	ldr	r0, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 8002718:	f7fe fbe3 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_RCC_OscConfig+0x854>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002728:	2b80      	cmp	r3, #128	; 0x80
 800272a:	d904      	bls.n	8002736 <HAL_RCC_OscConfig+0x85e>
 800272c:	f240 21f1 	movw	r1, #753	; 0x2f1
 8002730:	485e      	ldr	r0, [pc, #376]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 8002732:	f7fe fbd6 	bl	8000ee2 <assert_failed>
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800273a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273e:	d304      	bcc.n	800274a <HAL_RCC_OscConfig+0x872>
 8002740:	f240 21f2 	movw	r1, #754	; 0x2f2
 8002744:	4859      	ldr	r0, [pc, #356]	; (80028ac <HAL_RCC_OscConfig+0x9d4>)
 8002746:	f7fe fbcc 	bl	8000ee2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274a:	4b57      	ldr	r3, [pc, #348]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a56      	ldr	r2, [pc, #344]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002750:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fee1 	bl	800151c <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x898>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe fedd 	bl	800151c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x898>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e0e2      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002770:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x886>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b4a      	ldr	r3, [pc, #296]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800277e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002780:	4b4b      	ldr	r3, [pc, #300]	; (80028b0 <HAL_RCC_OscConfig+0x9d8>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	430a      	orrs	r2, r1
 8002790:	4945      	ldr	r1, [pc, #276]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	628b      	str	r3, [r1, #40]	; 0x28
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	3b01      	subs	r3, #1
 800279c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027a4:	3b01      	subs	r3, #1
 80027a6:	025b      	lsls	r3, r3, #9
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
 80027b4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027be:	3b01      	subs	r3, #1
 80027c0:	061b      	lsls	r3, r3, #24
 80027c2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80027c6:	4938      	ldr	r1, [pc, #224]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80027cc:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	4a35      	ldr	r2, [pc, #212]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027d8:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027dc:	4b35      	ldr	r3, [pc, #212]	; (80028b4 <HAL_RCC_OscConfig+0x9dc>)
 80027de:	4013      	ands	r3, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	4930      	ldr	r1, [pc, #192]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027ec:	4b2e      	ldr	r3, [pc, #184]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f023 020c 	bic.w	r2, r3, #12
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	492b      	ldr	r1, [pc, #172]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	f023 0202 	bic.w	r2, r3, #2
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	4927      	ldr	r1, [pc, #156]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800280c:	4313      	orrs	r3, r2
 800280e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002810:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002814:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281c:	4b22      	ldr	r3, [pc, #136]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	4a21      	ldr	r2, [pc, #132]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002828:	4b1f      	ldr	r3, [pc, #124]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	4a1e      	ldr	r2, [pc, #120]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800282e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	4a1b      	ldr	r2, [pc, #108]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002840:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002846:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fe66 	bl	800151c <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x98e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fe62 	bl	800151c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x98e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e067      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d0f0      	beq.n	8002854 <HAL_RCC_OscConfig+0x97c>
 8002872:	e05f      	b.n	8002934 <HAL_RCC_OscConfig+0xa5c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002874:	4b0c      	ldr	r3, [pc, #48]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a0b      	ldr	r2, [pc, #44]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800287a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800287e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002880:	f7fe fe4c 	bl	800151c <HAL_GetTick>
 8002884:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0x9c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002888:	f7fe fe48 	bl	800151c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b02      	cmp	r3, #2
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0x9c2>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e04d      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800289a:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_OscConfig+0x9d0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0x9b0>
 80028a6:	e045      	b.n	8002934 <HAL_RCC_OscConfig+0xa5c>
 80028a8:	58024400 	.word	0x58024400
 80028ac:	0800a274 	.word	0x0800a274
 80028b0:	fffffc0c 	.word	0xfffffc0c
 80028b4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028b8:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_RCC_OscConfig+0xa68>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028be:	4b20      	ldr	r3, [pc, #128]	; (8002940 <HAL_RCC_OscConfig+0xa68>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d031      	beq.n	8002930 <HAL_RCC_OscConfig+0xa58>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0203 	and.w	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d12a      	bne.n	8002930 <HAL_RCC_OscConfig+0xa58>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	091b      	lsrs	r3, r3, #4
 80028de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d122      	bne.n	8002930 <HAL_RCC_OscConfig+0xa58>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d11a      	bne.n	8002930 <HAL_RCC_OscConfig+0xa58>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	0a5b      	lsrs	r3, r3, #9
 80028fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d111      	bne.n	8002930 <HAL_RCC_OscConfig+0xa58>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	0c1b      	lsrs	r3, r3, #16
 8002910:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d108      	bne.n	8002930 <HAL_RCC_OscConfig+0xa58>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	0e1b      	lsrs	r3, r3, #24
 8002922:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0xa5c>
      {
        return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <HAL_RCC_OscConfig+0xa5e>
      }
    }
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3730      	adds	r7, #48	; 0x30
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	58024400 	.word	0x58024400

08002944 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e354      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <HAL_RCC_ClockConfig+0x24>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b3f      	cmp	r3, #63	; 0x3f
 8002966:	d904      	bls.n	8002972 <HAL_RCC_ClockConfig+0x2e>
 8002968:	f240 317f 	movw	r1, #895	; 0x37f
 800296c:	4827      	ldr	r0, [pc, #156]	; (8002a0c <HAL_RCC_ClockConfig+0xc8>)
 800296e:	f7fe fab8 	bl	8000ee2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d031      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d02e      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d02b      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d028      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d025      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2b05      	cmp	r3, #5
 8002994:	d022      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b06      	cmp	r3, #6
 800299a:	d01f      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b07      	cmp	r3, #7
 80029a0:	d01c      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	d019      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b09      	cmp	r3, #9
 80029ac:	d016      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b0a      	cmp	r3, #10
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	2b0b      	cmp	r3, #11
 80029b8:	d010      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	2b0c      	cmp	r3, #12
 80029be:	d00d      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b0d      	cmp	r3, #13
 80029c4:	d00a      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	2b0e      	cmp	r3, #14
 80029ca:	d007      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	d004      	beq.n	80029dc <HAL_RCC_ClockConfig+0x98>
 80029d2:	f44f 7160 	mov.w	r1, #896	; 0x380
 80029d6:	480d      	ldr	r0, [pc, #52]	; (8002a0c <HAL_RCC_ClockConfig+0xc8>)
 80029d8:	f7fe fa83 	bl	8000ee2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029dc:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <HAL_RCC_ClockConfig+0xcc>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 030f 	and.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d914      	bls.n	8002a14 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0xcc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f023 020f 	bic.w	r2, r3, #15
 80029f2:	4907      	ldr	r1, [pc, #28]	; (8002a10 <HAL_RCC_ClockConfig+0xcc>)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <HAL_RCC_ClockConfig+0xcc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e2fa      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
 8002a0c:	0800a274 	.word	0x0800a274
 8002a10:	52002000 	.word	0x52002000

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d029      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x130>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	4b9a      	ldr	r3, [pc, #616]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d921      	bls.n	8002a74 <HAL_RCC_ClockConfig+0x130>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d014      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x11e>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b40      	cmp	r3, #64	; 0x40
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x11e>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	2b50      	cmp	r3, #80	; 0x50
 8002a46:	d00c      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x11e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b60      	cmp	r3, #96	; 0x60
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x11e>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	2b70      	cmp	r3, #112	; 0x70
 8002a56:	d004      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x11e>
 8002a58:	f44f 7167 	mov.w	r1, #924	; 0x39c
 8002a5c:	488d      	ldr	r0, [pc, #564]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002a5e:	f7fe fa40 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a62:	4b8b      	ldr	r3, [pc, #556]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	4988      	ldr	r1, [pc, #544]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d029      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x190>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002a86:	69db      	ldr	r3, [r3, #28]
 8002a88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d921      	bls.n	8002ad4 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d014      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x17e>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	2b40      	cmp	r3, #64	; 0x40
 8002a9e:	d010      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x17e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b50      	cmp	r3, #80	; 0x50
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x17e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	2b60      	cmp	r3, #96	; 0x60
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x17e>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	2b70      	cmp	r3, #112	; 0x70
 8002ab6:	d004      	beq.n	8002ac2 <HAL_RCC_ClockConfig+0x17e>
 8002ab8:	f240 31ae 	movw	r1, #942	; 0x3ae
 8002abc:	4875      	ldr	r0, [pc, #468]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002abe:	f7fe fa10 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ac2:	4b73      	ldr	r3, [pc, #460]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	4970      	ldr	r1, [pc, #448]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0310 	and.w	r3, r3, #16
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02d      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x1f8>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d925      	bls.n	8002b3c <HAL_RCC_ClockConfig+0x1f8>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d018      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1e6>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b00:	d013      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1e6>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002b0a:	d00e      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1e6>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002b14:	d009      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1e6>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b1e:	d004      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x1e6>
 8002b20:	f240 31bf 	movw	r1, #959	; 0x3bf
 8002b24:	485b      	ldr	r0, [pc, #364]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002b26:	f7fe f9dc 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	4956      	ldr	r1, [pc, #344]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d029      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x258>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69da      	ldr	r2, [r3, #28]
 8002b4c:	4b50      	ldr	r3, [pc, #320]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d921      	bls.n	8002b9c <HAL_RCC_ClockConfig+0x258>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69db      	ldr	r3, [r3, #28]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x246>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	69db      	ldr	r3, [r3, #28]
 8002b64:	2b40      	cmp	r3, #64	; 0x40
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x246>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	2b50      	cmp	r3, #80	; 0x50
 8002b6e:	d00c      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x246>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	69db      	ldr	r3, [r3, #28]
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d008      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x246>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
 8002b7c:	2b70      	cmp	r3, #112	; 0x70
 8002b7e:	d004      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x246>
 8002b80:	f240 31d1 	movw	r1, #977	; 0x3d1
 8002b84:	4843      	ldr	r0, [pc, #268]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002b86:	f7fe f9ac 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b8a:	4b41      	ldr	r3, [pc, #260]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	493e      	ldr	r1, [pc, #248]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d039      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x2d8>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d931      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x2d8>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d024      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d020      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	2b09      	cmp	r3, #9
 8002bce:	d01c      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	2b0a      	cmp	r3, #10
 8002bd6:	d018      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b0b      	cmp	r3, #11
 8002bde:	d014      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b0c      	cmp	r3, #12
 8002be6:	d010      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b0d      	cmp	r3, #13
 8002bee:	d00c      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	2b0e      	cmp	r3, #14
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	2b0f      	cmp	r3, #15
 8002bfe:	d004      	beq.n	8002c0a <HAL_RCC_ClockConfig+0x2c6>
 8002c00:	f44f 7179 	mov.w	r1, #996	; 0x3e4
 8002c04:	4823      	ldr	r0, [pc, #140]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002c06:	f7fe f96c 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f023 020f 	bic.w	r2, r3, #15
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	491e      	ldr	r1, [pc, #120]	; (8002c90 <HAL_RCC_ClockConfig+0x34c>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f000 80a2 	beq.w	8002d6e <HAL_RCC_ClockConfig+0x42a>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d032      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d02d      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8002c44:	d028      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002c4e:	d023      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8002c58:	d01e      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c62:	d019      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8002c6c:	d014      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002c76:	d00f      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c82:	f44f 717d 	mov.w	r1, #1012	; 0x3f4
 8002c86:	4803      	ldr	r0, [pc, #12]	; (8002c94 <HAL_RCC_ClockConfig+0x350>)
 8002c88:	f7fe f92b 	bl	8000ee2 <assert_failed>
 8002c8c:	e004      	b.n	8002c98 <HAL_RCC_ClockConfig+0x354>
 8002c8e:	bf00      	nop
 8002c90:	58024400 	.word	0x58024400
 8002c94:	0800a274 	.word	0x0800a274
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d010      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x37e>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00c      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x37e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x37e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d004      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x37e>
 8002cb8:	f240 31f5 	movw	r1, #1013	; 0x3f5
 8002cbc:	4858      	ldr	r0, [pc, #352]	; (8002e20 <HAL_RCC_ClockConfig+0x4dc>)
 8002cbe:	f7fe f910 	bl	8000ee2 <assert_failed>
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002cc2:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	4955      	ldr	r1, [pc, #340]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_ClockConfig+0x3a8>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cdc:	4b51      	ldr	r3, [pc, #324]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d121      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e18a      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x3c0>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf4:	4b4b      	ldr	r3, [pc, #300]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d115      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e17e      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d107      	bne.n	8002d1c <HAL_RCC_ClockConfig+0x3d8>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e172      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d1c:	4b41      	ldr	r3, [pc, #260]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_RCC_ClockConfig+0x3e8>
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e16a      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d2c:	4b3d      	ldr	r3, [pc, #244]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f023 0207 	bic.w	r2, r3, #7
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	493a      	ldr	r1, [pc, #232]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fbed 	bl	800151c <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_ClockConfig+0x418>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d46:	f7fe fbe9 	bl	800151c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_ClockConfig+0x418>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e152      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5c:	4b31      	ldr	r3, [pc, #196]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d1eb      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x402>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d039      	beq.n	8002dee <HAL_RCC_ClockConfig+0x4aa>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d231      	bcs.n	8002dee <HAL_RCC_ClockConfig+0x4aa>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d024      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d020      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b09      	cmp	r3, #9
 8002da0:	d01c      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b0a      	cmp	r3, #10
 8002da8:	d018      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	2b0b      	cmp	r3, #11
 8002db0:	d014      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d010      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	2b0d      	cmp	r3, #13
 8002dc0:	d00c      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b0e      	cmp	r3, #14
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	d004      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x498>
 8002dd2:	f240 4136 	movw	r1, #1078	; 0x436
 8002dd6:	4812      	ldr	r0, [pc, #72]	; (8002e20 <HAL_RCC_ClockConfig+0x4dc>)
 8002dd8:	f7fe f883 	bl	8000ee2 <assert_failed>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ddc:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f023 020f 	bic.w	r2, r3, #15
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	490e      	ldr	r1, [pc, #56]	; (8002e24 <HAL_RCC_ClockConfig+0x4e0>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x4e4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d217      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x4e8>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <HAL_RCC_ClockConfig+0x4e4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f023 020f 	bic.w	r2, r3, #15
 8002e04:	4908      	ldr	r1, [pc, #32]	; (8002e28 <HAL_RCC_ClockConfig+0x4e4>)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <HAL_RCC_ClockConfig+0x4e4>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d008      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x4e8>
    {
      return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e0f1      	b.n	8003002 <HAL_RCC_ClockConfig+0x6be>
 8002e1e:	bf00      	nop
 8002e20:	0800a274 	.word	0x0800a274
 8002e24:	58024400 	.word	0x58024400
 8002e28:	52002000 	.word	0x52002000
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0304 	and.w	r3, r3, #4
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d029      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x548>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d221      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x548>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d014      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x536>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	2b40      	cmp	r3, #64	; 0x40
 8002e56:	d010      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x536>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	2b50      	cmp	r3, #80	; 0x50
 8002e5e:	d00c      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x536>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b60      	cmp	r3, #96	; 0x60
 8002e66:	d008      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x536>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b70      	cmp	r3, #112	; 0x70
 8002e6e:	d004      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x536>
 8002e70:	f240 4157 	movw	r1, #1111	; 0x457
 8002e74:	4866      	ldr	r0, [pc, #408]	; (8003010 <HAL_RCC_ClockConfig+0x6cc>)
 8002e76:	f7fe f834 	bl	8000ee2 <assert_failed>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e7a:	4b64      	ldr	r3, [pc, #400]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	4961      	ldr	r1, [pc, #388]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0308 	and.w	r3, r3, #8
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d029      	beq.n	8002eec <HAL_RCC_ClockConfig+0x5a8>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	4b5b      	ldr	r3, [pc, #364]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d221      	bcs.n	8002eec <HAL_RCC_ClockConfig+0x5a8>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	695b      	ldr	r3, [r3, #20]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d014      	beq.n	8002eda <HAL_RCC_ClockConfig+0x596>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	2b40      	cmp	r3, #64	; 0x40
 8002eb6:	d010      	beq.n	8002eda <HAL_RCC_ClockConfig+0x596>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	695b      	ldr	r3, [r3, #20]
 8002ebc:	2b50      	cmp	r3, #80	; 0x50
 8002ebe:	d00c      	beq.n	8002eda <HAL_RCC_ClockConfig+0x596>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	2b60      	cmp	r3, #96	; 0x60
 8002ec6:	d008      	beq.n	8002eda <HAL_RCC_ClockConfig+0x596>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	2b70      	cmp	r3, #112	; 0x70
 8002ece:	d004      	beq.n	8002eda <HAL_RCC_ClockConfig+0x596>
 8002ed0:	f240 4169 	movw	r1, #1129	; 0x469
 8002ed4:	484e      	ldr	r0, [pc, #312]	; (8003010 <HAL_RCC_ClockConfig+0x6cc>)
 8002ed6:	f7fe f804 	bl	8000ee2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eda:	4b4c      	ldr	r3, [pc, #304]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4949      	ldr	r1, [pc, #292]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0310 	and.w	r3, r3, #16
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d02d      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x610>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	4b43      	ldr	r3, [pc, #268]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d225      	bcs.n	8002f54 <HAL_RCC_ClockConfig+0x610>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d018      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x5fe>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d013      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x5fe>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f22:	d00e      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x5fe>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f2c:	d009      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x5fe>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f36:	d004      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x5fe>
 8002f38:	f240 417b 	movw	r1, #1147	; 0x47b
 8002f3c:	4834      	ldr	r0, [pc, #208]	; (8003010 <HAL_RCC_ClockConfig+0x6cc>)
 8002f3e:	f7fd ffd0 	bl	8000ee2 <assert_failed>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	492f      	ldr	r1, [pc, #188]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d029      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x670>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	4b29      	ldr	r3, [pc, #164]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d221      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x670>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	69db      	ldr	r3, [r3, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d014      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x65e>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	2b40      	cmp	r3, #64	; 0x40
 8002f7e:	d010      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x65e>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	2b50      	cmp	r3, #80	; 0x50
 8002f86:	d00c      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x65e>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	2b60      	cmp	r3, #96	; 0x60
 8002f8e:	d008      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x65e>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	2b70      	cmp	r3, #112	; 0x70
 8002f96:	d004      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x65e>
 8002f98:	f240 418d 	movw	r1, #1165	; 0x48d
 8002f9c:	481c      	ldr	r0, [pc, #112]	; (8003010 <HAL_RCC_ClockConfig+0x6cc>)
 8002f9e:	f7fd ffa0 	bl	8000ee2 <assert_failed>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fa2:	4b1a      	ldr	r3, [pc, #104]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	4917      	ldr	r1, [pc, #92]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb4:	f000 f836 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8002fb8:	4601      	mov	r1, r0
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	0a1b      	lsrs	r3, r3, #8
 8002fc0:	f003 030f 	and.w	r3, r3, #15
 8002fc4:	4a13      	ldr	r2, [pc, #76]	; (8003014 <HAL_RCC_ClockConfig+0x6d0>)
 8002fc6:	5cd3      	ldrb	r3, [r2, r3]
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fd2:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_ClockConfig+0x6c8>)
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 030f 	and.w	r3, r3, #15
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <HAL_RCC_ClockConfig+0x6d0>)
 8002fdc:	5cd3      	ldrb	r3, [r2, r3]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x6d4>)
 8002fea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x6d8>)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x6dc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fd ffe6 	bl	8000fc8 <HAL_InitTick>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003000:	7bfb      	ldrb	r3, [r7, #15]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58024400 	.word	0x58024400
 8003010:	0800a274 	.word	0x0800a274
 8003014:	0800a524 	.word	0x0800a524
 8003018:	2400000c 	.word	0x2400000c
 800301c:	24000008 	.word	0x24000008
 8003020:	24000010 	.word	0x24000010

08003024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b089      	sub	sp, #36	; 0x24
 8003028:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800302a:	4baf      	ldr	r3, [pc, #700]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003032:	2b18      	cmp	r3, #24
 8003034:	f200 814e 	bhi.w	80032d4 <HAL_RCC_GetSysClockFreq+0x2b0>
 8003038:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <HAL_RCC_GetSysClockFreq+0x1c>)
 800303a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303e:	bf00      	nop
 8003040:	080030a5 	.word	0x080030a5
 8003044:	080032d5 	.word	0x080032d5
 8003048:	080032d5 	.word	0x080032d5
 800304c:	080032d5 	.word	0x080032d5
 8003050:	080032d5 	.word	0x080032d5
 8003054:	080032d5 	.word	0x080032d5
 8003058:	080032d5 	.word	0x080032d5
 800305c:	080032d5 	.word	0x080032d5
 8003060:	080030cb 	.word	0x080030cb
 8003064:	080032d5 	.word	0x080032d5
 8003068:	080032d5 	.word	0x080032d5
 800306c:	080032d5 	.word	0x080032d5
 8003070:	080032d5 	.word	0x080032d5
 8003074:	080032d5 	.word	0x080032d5
 8003078:	080032d5 	.word	0x080032d5
 800307c:	080032d5 	.word	0x080032d5
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080032d5 	.word	0x080032d5
 8003088:	080032d5 	.word	0x080032d5
 800308c:	080032d5 	.word	0x080032d5
 8003090:	080032d5 	.word	0x080032d5
 8003094:	080032d5 	.word	0x080032d5
 8003098:	080032d5 	.word	0x080032d5
 800309c:	080032d5 	.word	0x080032d5
 80030a0:	080030d7 	.word	0x080030d7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a4:	4b90      	ldr	r3, [pc, #576]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d009      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80030b0:	4b8d      	ldr	r3, [pc, #564]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	4a8c      	ldr	r2, [pc, #560]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80030c2:	e10a      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80030c4:	4b89      	ldr	r3, [pc, #548]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 80030c6:	61bb      	str	r3, [r7, #24]
    break;
 80030c8:	e107      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80030cc:	61bb      	str	r3, [r7, #24]
    break;
 80030ce:	e104      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80030d0:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 80030d2:	61bb      	str	r3, [r7, #24]
    break;
 80030d4:	e101      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030d6:	4b84      	ldr	r3, [pc, #528]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80030e0:	4b81      	ldr	r3, [pc, #516]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ea:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030ec:	4b7e      	ldr	r3, [pc, #504]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80030f6:	4b7c      	ldr	r3, [pc, #496]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80030f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	fb02 f303 	mul.w	r3, r2, r3
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80da 	beq.w	80032ce <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d05a      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003120:	2b01      	cmp	r3, #1
 8003122:	d302      	bcc.n	800312a <HAL_RCC_GetSysClockFreq+0x106>
 8003124:	2b02      	cmp	r3, #2
 8003126:	d078      	beq.n	800321a <HAL_RCC_GetSysClockFreq+0x1f6>
 8003128:	e099      	b.n	800325e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800312a:	4b6f      	ldr	r3, [pc, #444]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d02d      	beq.n	8003192 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003136:	4b6c      	ldr	r3, [pc, #432]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	08db      	lsrs	r3, r3, #3
 800313c:	f003 0303 	and.w	r3, r3, #3
 8003140:	4a6a      	ldr	r2, [pc, #424]	; (80032ec <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003142:	fa22 f303 	lsr.w	r3, r2, r3
 8003146:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003160:	4b61      	ldr	r3, [pc, #388]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003168:	ee07 3a90 	vmov	s15, r3
 800316c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003170:	ed97 6a02 	vldr	s12, [r7, #8]
 8003174:	eddf 5a60 	vldr	s11, [pc, #384]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003178:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003184:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003188:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003190:	e087      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	ee07 3a90 	vmov	s15, r3
 8003198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319c:	eddf 6a57 	vldr	s13, [pc, #348]	; 80032fc <HAL_RCC_GetSysClockFreq+0x2d8>
 80031a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a4:	4b50      	ldr	r3, [pc, #320]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 80031bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031d4:	e065      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e0:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003300 <HAL_RCC_GetSysClockFreq+0x2dc>
 80031e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e8:	4b3f      	ldr	r3, [pc, #252]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80031ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f0:	ee07 3a90 	vmov	s15, r3
 80031f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f8:	ed97 6a02 	vldr	s12, [r7, #8]
 80031fc:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003200:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003204:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003208:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800320c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003210:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003214:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003218:	e043      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	ee07 3a90 	vmov	s15, r3
 8003220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003224:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003304 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003228:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800322c:	4b2e      	ldr	r3, [pc, #184]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800322e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003230:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003234:	ee07 3a90 	vmov	s15, r3
 8003238:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800323c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003240:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003244:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003248:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800324c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003250:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800325c:	e021      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	ee07 3a90 	vmov	s15, r3
 8003264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003268:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003300 <HAL_RCC_GetSysClockFreq+0x2dc>
 800326c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	ee07 3a90 	vmov	s15, r3
 800327c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003280:	ed97 6a02 	vldr	s12, [r7, #8]
 8003284:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80032f8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003288:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800328c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003290:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003294:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800329c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80032a0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80032a2:	4b11      	ldr	r3, [pc, #68]	; (80032e8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	0a5b      	lsrs	r3, r3, #9
 80032a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ac:	3301      	adds	r3, #1
 80032ae:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80032be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032c6:	ee17 3a90 	vmov	r3, s15
 80032ca:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80032cc:	e005      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61bb      	str	r3, [r7, #24]
    break;
 80032d2:	e002      	b.n	80032da <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80032d6:	61bb      	str	r3, [r7, #24]
    break;
 80032d8:	bf00      	nop
  }

  return sysclockfreq;
 80032da:	69bb      	ldr	r3, [r7, #24]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3724      	adds	r7, #36	; 0x24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	58024400 	.word	0x58024400
 80032ec:	03d09000 	.word	0x03d09000
 80032f0:	003d0900 	.word	0x003d0900
 80032f4:	007a1200 	.word	0x007a1200
 80032f8:	46000000 	.word	0x46000000
 80032fc:	4c742400 	.word	0x4c742400
 8003300:	4a742400 	.word	0x4a742400
 8003304:	4af42400 	.word	0x4af42400

08003308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800330e:	f7ff fe89 	bl	8003024 <HAL_RCC_GetSysClockFreq>
 8003312:	4601      	mov	r1, r0
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <HAL_RCC_GetHCLKFreq+0x50>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	0a1b      	lsrs	r3, r3, #8
 800331a:	f003 030f 	and.w	r3, r3, #15
 800331e:	4a0f      	ldr	r2, [pc, #60]	; (800335c <HAL_RCC_GetHCLKFreq+0x54>)
 8003320:	5cd3      	ldrb	r3, [r2, r3]
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	fa21 f303 	lsr.w	r3, r1, r3
 800332a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800332c:	4b0a      	ldr	r3, [pc, #40]	; (8003358 <HAL_RCC_GetHCLKFreq+0x50>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	f003 030f 	and.w	r3, r3, #15
 8003334:	4a09      	ldr	r2, [pc, #36]	; (800335c <HAL_RCC_GetHCLKFreq+0x54>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	fa22 f303 	lsr.w	r3, r2, r3
 8003342:	4a07      	ldr	r2, [pc, #28]	; (8003360 <HAL_RCC_GetHCLKFreq+0x58>)
 8003344:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003346:	4a07      	ldr	r2, [pc, #28]	; (8003364 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <HAL_RCC_GetHCLKFreq+0x58>)
 800334e:	681b      	ldr	r3, [r3, #0]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	58024400 	.word	0x58024400
 800335c:	0800a524 	.word	0x0800a524
 8003360:	2400000c 	.word	0x2400000c
 8003364:	24000008 	.word	0x24000008

08003368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800336c:	f7ff ffcc 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 8003370:	4601      	mov	r1, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	; (800338c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	091b      	lsrs	r3, r3, #4
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4a04      	ldr	r2, [pc, #16]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x28>)
 800337e:	5cd3      	ldrb	r3, [r2, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	0800a524 	.word	0x0800a524

08003394 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003398:	f7ff ffb6 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 800339c:	4601      	mov	r1, r0
 800339e:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	0a1b      	lsrs	r3, r3, #8
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	58024400 	.word	0x58024400
 80033bc:	0800a524 	.word	0x0800a524

080033c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	223f      	movs	r2, #63	; 0x3f
 80033ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033d0:	4b1a      	ldr	r3, [pc, #104]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	f003 0207 	and.w	r2, r3, #7
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80033e8:	4b14      	ldr	r3, [pc, #80]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	f003 020f 	and.w	r2, r3, #15
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80033f4:	4b11      	ldr	r3, [pc, #68]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 8003402:	69db      	ldr	r3, [r3, #28]
 8003404:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 800340e:	69db      	ldr	r3, [r3, #28]
 8003410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_RCC_GetClockConfig+0x7c>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetClockConfig+0x80>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 020f 	and.w	r2, r3, #15
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	58024400 	.word	0x58024400
 8003440:	52002000 	.word	0x52002000

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800344c:	2300      	movs	r3, #0
 800344e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003450:	2300      	movs	r3, #0
 8003452:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03d      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003468:	d013      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800346a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800346e:	d802      	bhi.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003470:	2b00      	cmp	r3, #0
 8003472:	d007      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003474:	e01f      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003476:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800347a:	d013      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800347c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003480:	d01c      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003482:	e018      	b.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4baf      	ldr	r3, [pc, #700]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003488:	4aae      	ldr	r2, [pc, #696]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003490:	e015      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	3304      	adds	r3, #4
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f001 fc21 	bl	8004ce0 <RCCEx_PLL2_Config>
 800349e:	4603      	mov	r3, r0
 80034a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034a2:	e00c      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3324      	adds	r3, #36	; 0x24
 80034a8:	2102      	movs	r1, #2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fd3a 	bl	8004f24 <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80034b4:	e003      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
      break;
 80034ba:	e000      	b.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80034bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034be:	7dfb      	ldrb	r3, [r7, #23]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034c4:	4b9f      	ldr	r3, [pc, #636]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d0:	499c      	ldr	r1, [pc, #624]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	650b      	str	r3, [r1, #80]	; 0x50
 80034d6:	e001      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d03d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d826      	bhi.n	800353e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80034f0:	a201      	add	r2, pc, #4	; (adr r2, 80034f8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80034f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f6:	bf00      	nop
 80034f8:	0800350d 	.word	0x0800350d
 80034fc:	0800351b 	.word	0x0800351b
 8003500:	0800352d 	.word	0x0800352d
 8003504:	08003545 	.word	0x08003545
 8003508:	08003545 	.word	0x08003545
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350c:	4b8d      	ldr	r3, [pc, #564]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	4a8c      	ldr	r2, [pc, #560]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003516:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003518:	e015      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	2100      	movs	r1, #0
 8003520:	4618      	mov	r0, r3
 8003522:	f001 fbdd 	bl	8004ce0 <RCCEx_PLL2_Config>
 8003526:	4603      	mov	r3, r0
 8003528:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800352a:	e00c      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3324      	adds	r3, #36	; 0x24
 8003530:	2100      	movs	r1, #0
 8003532:	4618      	mov	r0, r3
 8003534:	f001 fcf6 	bl	8004f24 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	75fb      	strb	r3, [r7, #23]
      break;
 8003542:	e000      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003544:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800354c:	4b7d      	ldr	r3, [pc, #500]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800354e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003550:	f023 0207 	bic.w	r2, r3, #7
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	497a      	ldr	r1, [pc, #488]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800355a:	4313      	orrs	r3, r2
 800355c:	650b      	str	r3, [r1, #80]	; 0x50
 800355e:	e001      	b.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003560:	7dfb      	ldrb	r3, [r7, #23]
 8003562:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800356c:	2b00      	cmp	r3, #0
 800356e:	d03e      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003574:	2b80      	cmp	r3, #128	; 0x80
 8003576:	d01c      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d804      	bhi.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003580:	2b40      	cmp	r3, #64	; 0x40
 8003582:	d00d      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003584:	e01e      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003586:	2bc0      	cmp	r3, #192	; 0xc0
 8003588:	d01f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x186>
 800358a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800358e:	d01e      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003590:	e018      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003592:	4b6c      	ldr	r3, [pc, #432]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003596:	4a6b      	ldr	r2, [pc, #428]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003598:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800359c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800359e:	e017      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	3304      	adds	r3, #4
 80035a4:	2100      	movs	r1, #0
 80035a6:	4618      	mov	r0, r3
 80035a8:	f001 fb9a 	bl	8004ce0 <RCCEx_PLL2_Config>
 80035ac:	4603      	mov	r3, r0
 80035ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035b0:	e00e      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3324      	adds	r3, #36	; 0x24
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fcb3 	bl	8004f24 <RCCEx_PLL3_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80035c2:	e005      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	75fb      	strb	r3, [r7, #23]
      break;
 80035c8:	e002      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035ca:	bf00      	nop
 80035cc:	e000      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80035ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d109      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035d6:	4b5b      	ldr	r3, [pc, #364]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035da:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e2:	4958      	ldr	r1, [pc, #352]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	650b      	str	r3, [r1, #80]	; 0x50
 80035e8:	e001      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ea:	7dfb      	ldrb	r3, [r7, #23]
 80035ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d044      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003604:	d01f      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003606:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360a:	d805      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003614:	d00e      	beq.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003616:	e01f      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003618:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800361c:	d01f      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800361e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003622:	d01e      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003624:	e018      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003626:	4b47      	ldr	r3, [pc, #284]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362a:	4a46      	ldr	r2, [pc, #280]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800362c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003630:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003632:	e017      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	2100      	movs	r1, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f001 fb50 	bl	8004ce0 <RCCEx_PLL2_Config>
 8003640:	4603      	mov	r3, r0
 8003642:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003644:	e00e      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	3324      	adds	r3, #36	; 0x24
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f001 fc69 	bl	8004f24 <RCCEx_PLL3_Config>
 8003652:	4603      	mov	r3, r0
 8003654:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003656:	e005      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	75fb      	strb	r3, [r7, #23]
      break;
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003664:	7dfb      	ldrb	r3, [r7, #23]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10a      	bne.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800366a:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800366c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003678:	4932      	ldr	r1, [pc, #200]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800367a:	4313      	orrs	r3, r2
 800367c:	658b      	str	r3, [r1, #88]	; 0x58
 800367e:	e001      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800368c:	2b00      	cmp	r3, #0
 800368e:	d044      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003696:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800369a:	d01f      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800369c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036a0:	d805      	bhi.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x278>
 80036a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036aa:	d00e      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x286>
 80036ac:	e01f      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80036ae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036b2:	d01f      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b8:	d01e      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036ba:	e018      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036bc:	4b21      	ldr	r3, [pc, #132]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c0:	4a20      	ldr	r2, [pc, #128]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036c8:	e017      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	3304      	adds	r3, #4
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fb05 	bl	8004ce0 <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80036da:	e00e      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3324      	adds	r3, #36	; 0x24
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fc1e 	bl	8004f24 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ec:	e005      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	75fb      	strb	r3, [r7, #23]
      break;
 80036f2:	e002      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80036f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d10a      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003700:	4b10      	ldr	r3, [pc, #64]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003704:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800370e:	490d      	ldr	r1, [pc, #52]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003710:	4313      	orrs	r3, r2
 8003712:	658b      	str	r3, [r1, #88]	; 0x58
 8003714:	e001      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003716:	7dfb      	ldrb	r3, [r7, #23]
 8003718:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d035      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372a:	2b10      	cmp	r3, #16
 800372c:	d00c      	beq.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800372e:	2b10      	cmp	r3, #16
 8003730:	d802      	bhi.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01b      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003736:	e017      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003738:	2b20      	cmp	r3, #32
 800373a:	d00c      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d018      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003740:	e012      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003742:	bf00      	nop
 8003744:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4baf      	ldr	r3, [pc, #700]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4aae      	ldr	r2, [pc, #696]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003754:	e00e      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	2102      	movs	r1, #2
 800375c:	4618      	mov	r0, r3
 800375e:	f001 fabf 	bl	8004ce0 <RCCEx_PLL2_Config>
 8003762:	4603      	mov	r3, r0
 8003764:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003766:	e005      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	75fb      	strb	r3, [r7, #23]
      break;
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003772:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003774:	7dfb      	ldrb	r3, [r7, #23]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800377a:	4ba3      	ldr	r3, [pc, #652]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003786:	49a0      	ldr	r1, [pc, #640]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800378c:	e001      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378e:	7dfb      	ldrb	r3, [r7, #23]
 8003790:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d042      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a6:	d01f      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d805      	bhi.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80037b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b6:	d00e      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80037b8:	e01f      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80037ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80037be:	d01f      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80037c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037c4:	d01e      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80037c6:	e018      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c8:	4b8f      	ldr	r3, [pc, #572]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a8e      	ldr	r2, [pc, #568]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80037ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037d4:	e017      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	3304      	adds	r3, #4
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fa7f 	bl	8004ce0 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037e6:	e00e      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3324      	adds	r3, #36	; 0x24
 80037ec:	2100      	movs	r1, #0
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 fb98 	bl	8004f24 <RCCEx_PLL3_Config>
 80037f4:	4603      	mov	r3, r0
 80037f6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80037f8:	e005      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
      break;
 80037fe:	e002      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003806:	7dfb      	ldrb	r3, [r7, #23]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d109      	bne.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800380c:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003818:	497b      	ldr	r1, [pc, #492]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	650b      	str	r3, [r1, #80]	; 0x50
 800381e:	e001      	b.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d042      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003834:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003838:	d01b      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800383a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800383e:	d805      	bhi.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d022      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003844:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003848:	d00a      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800384a:	e01b      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800384c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003850:	d01d      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003856:	d01c      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003858:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800385c:	d01b      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800385e:	e011      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3304      	adds	r3, #4
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f001 fa3a 	bl	8004ce0 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003870:	e012      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3324      	adds	r3, #36	; 0x24
 8003876:	2101      	movs	r1, #1
 8003878:	4618      	mov	r0, r3
 800387a:	f001 fb53 	bl	8004f24 <RCCEx_PLL3_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003882:	e009      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	75fb      	strb	r3, [r7, #23]
      break;
 8003888:	e006      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800388a:	bf00      	nop
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800388e:	bf00      	nop
 8003890:	e002      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003892:	bf00      	nop
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800389e:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038aa:	4957      	ldr	r1, [pc, #348]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	650b      	str	r3, [r1, #80]	; 0x50
 80038b0:	e001      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	7dfb      	ldrb	r3, [r7, #23]
 80038b4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d044      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038cc:	d01b      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80038ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038d2:	d805      	bhi.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d022      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80038de:	e01b      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80038e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e4:	d01d      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ea:	d01c      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80038ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80038f0:	d01b      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80038f2:	e011      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3304      	adds	r3, #4
 80038f8:	2101      	movs	r1, #1
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 f9f0 	bl	8004ce0 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003904:	e012      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	3324      	adds	r3, #36	; 0x24
 800390a:	2101      	movs	r1, #1
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fb09 	bl	8004f24 <RCCEx_PLL3_Config>
 8003912:	4603      	mov	r3, r0
 8003914:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003916:	e009      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	75fb      	strb	r3, [r7, #23]
      break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800391e:	bf00      	nop
 8003920:	e004      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003922:	bf00      	nop
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800392a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800392c:	7dfb      	ldrb	r3, [r7, #23]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d10a      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003932:	4b35      	ldr	r3, [pc, #212]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003936:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003940:	4931      	ldr	r1, [pc, #196]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003942:	4313      	orrs	r3, r2
 8003944:	658b      	str	r3, [r1, #88]	; 0x58
 8003946:	e001      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
 800394a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02d      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003960:	d005      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003962:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003966:	d009      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d013      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800396c:	e00f      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003978:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800397a:	e00c      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f001 f9ac 	bl	8004ce0 <RCCEx_PLL2_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800398c:	e003      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
      break;
 8003992:	e000      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800399e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039a8:	4917      	ldr	r1, [pc, #92]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	650b      	str	r3, [r1, #80]	; 0x50
 80039ae:	e001      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039b0:	7dfb      	ldrb	r3, [r7, #23]
 80039b2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d037      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d81b      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a0d 	.word	0x08003a0d
 80039d4:	080039e1 	.word	0x080039e1
 80039d8:	080039ef 	.word	0x080039ef
 80039dc:	08003a0d 	.word	0x08003a0d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039ec:	e00f      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2102      	movs	r1, #2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 f973 	bl	8004ce0 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80039fe:	e006      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	75fb      	strb	r3, [r7, #23]
      break;
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003a06:	bf00      	nop
 8003a08:	58024400 	.word	0x58024400
      break;
 8003a0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a14:	4b04      	ldr	r3, [pc, #16]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	f023 0203 	bic.w	r2, r3, #3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a20:	4901      	ldr	r1, [pc, #4]	; (8003a28 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003a26:	e003      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5ec>
 8003a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 829b 	beq.w	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a48:	f000 81a9 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a56:	f000 81a2 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a60:	f5b3 5f0c 	cmp.w	r3, #8960	; 0x2300
 8003a64:	f000 819b 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a6e:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 8003a72:	f000 8194 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a7c:	f5b3 4f86 	cmp.w	r3, #17152	; 0x4300
 8003a80:	f000 818d 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a8a:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 8003a8e:	f000 8186 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a98:	f5b3 4fc6 	cmp.w	r3, #25344	; 0x6300
 8003a9c:	f000 817f 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aa6:	f5b3 4fe6 	cmp.w	r3, #29440	; 0x7300
 8003aaa:	f000 8178 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab4:	f5b3 4f03 	cmp.w	r3, #33536	; 0x8300
 8003ab8:	f000 8171 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ac2:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8003ac6:	f000 816a 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ad0:	f5b3 4f23 	cmp.w	r3, #41728	; 0xa300
 8003ad4:	f000 8163 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ade:	f5b3 4f33 	cmp.w	r3, #45824	; 0xb300
 8003ae2:	f000 815c 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003aec:	f5b3 4f43 	cmp.w	r3, #49920	; 0xc300
 8003af0:	f000 8155 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003afa:	f5b3 4f53 	cmp.w	r3, #54016	; 0xd300
 8003afe:	f000 814e 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b08:	f5b3 4f63 	cmp.w	r3, #58112	; 0xe300
 8003b0c:	f000 8147 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b16:	f5b3 4f73 	cmp.w	r3, #62208	; 0xf300
 8003b1a:	f000 8140 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b24:	4aa8      	ldr	r2, [pc, #672]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x984>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	f000 8139 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b32:	4aa6      	ldr	r2, [pc, #664]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x988>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	f000 8132 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b40:	4aa3      	ldr	r2, [pc, #652]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x98c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	f000 812b 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b4e:	4aa1      	ldr	r2, [pc, #644]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x990>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	f000 8124 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b5c:	4a9e      	ldr	r2, [pc, #632]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x994>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	f000 811d 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b6a:	4a9c      	ldr	r2, [pc, #624]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x998>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	f000 8116 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b78:	4a99      	ldr	r2, [pc, #612]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x99c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	f000 810f 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b86:	4a97      	ldr	r2, [pc, #604]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	f000 8108 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b94:	4a94      	ldr	r2, [pc, #592]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	f000 8101 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ba2:	4a92      	ldr	r2, [pc, #584]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	f000 80fa 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bb0:	4a8f      	ldr	r2, [pc, #572]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	f000 80f3 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bbe:	4a8d      	ldr	r2, [pc, #564]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x9b0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	f000 80ec 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bcc:	4a8a      	ldr	r2, [pc, #552]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	f000 80e5 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bda:	4a88      	ldr	r2, [pc, #544]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f000 80de 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003be8:	4a85      	ldr	r2, [pc, #532]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	f000 80d7 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bf6:	4a83      	ldr	r2, [pc, #524]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	f000 80d0 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c04:	4a80      	ldr	r2, [pc, #512]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	f000 80c9 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c12:	4a7e      	ldr	r2, [pc, #504]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x9c8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	f000 80c2 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c20:	4a7b      	ldr	r2, [pc, #492]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	f000 80bb 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c2e:	4a79      	ldr	r2, [pc, #484]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	f000 80b4 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c3c:	4a76      	ldr	r2, [pc, #472]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	f000 80ad 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c4a:	4a74      	ldr	r2, [pc, #464]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x9d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f000 80a6 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c58:	4a71      	ldr	r2, [pc, #452]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x9dc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	f000 809f 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c66:	4a6f      	ldr	r2, [pc, #444]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x9e0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	f000 8098 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c74:	4a6c      	ldr	r2, [pc, #432]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	f000 8091 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c82:	4a6a      	ldr	r2, [pc, #424]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9e8>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	f000 808a 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c90:	4a67      	ldr	r2, [pc, #412]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	f000 8083 	beq.w	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9e:	4a65      	ldr	r2, [pc, #404]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d07c      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003caa:	4a63      	ldr	r2, [pc, #396]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x9f4>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d076      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb6:	4a61      	ldr	r2, [pc, #388]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x9f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d070      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cc2:	4a5f      	ldr	r2, [pc, #380]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x9fc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d06a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cce:	4a5d      	ldr	r2, [pc, #372]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0xa00>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d064      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cda:	4a5b      	ldr	r2, [pc, #364]	; (8003e48 <HAL_RCCEx_PeriphCLKConfig+0xa04>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d05e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ce6:	4a59      	ldr	r2, [pc, #356]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0xa08>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d058      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cf2:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_RCCEx_PeriphCLKConfig+0xa0c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d052      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cfe:	4a55      	ldr	r2, [pc, #340]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0xa10>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04c      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d0a:	4a53      	ldr	r2, [pc, #332]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0xa14>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d046      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d16:	4a51      	ldr	r2, [pc, #324]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d040      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d22:	4a4f      	ldr	r2, [pc, #316]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0xa1c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d03a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d2e:	4a4d      	ldr	r2, [pc, #308]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa20>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d034      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d3a:	4a4b      	ldr	r2, [pc, #300]	; (8003e68 <HAL_RCCEx_PeriphCLKConfig+0xa24>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d02e      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d46:	4a49      	ldr	r2, [pc, #292]	; (8003e6c <HAL_RCCEx_PeriphCLKConfig+0xa28>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d028      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d52:	4a47      	ldr	r2, [pc, #284]	; (8003e70 <HAL_RCCEx_PeriphCLKConfig+0xa2c>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d022      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d5e:	4a45      	ldr	r2, [pc, #276]	; (8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa30>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d01c      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d6a:	4a43      	ldr	r2, [pc, #268]	; (8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa34>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d016      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d76:	4a41      	ldr	r2, [pc, #260]	; (8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa38>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d010      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d82:	4a3f      	ldr	r2, [pc, #252]	; (8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa3c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00a      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d8e:	4a3d      	ldr	r2, [pc, #244]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0xa40>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d004      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x95a>
 8003d94:	f240 317f 	movw	r1, #895	; 0x37f
 8003d98:	483b      	ldr	r0, [pc, #236]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0xa44>)
 8003d9a:	f7fd f8a2 	bl	8000ee2 <assert_failed>

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d9e:	4b3b      	ldr	r3, [pc, #236]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a3a      	ldr	r2, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa48>)
 8003da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003daa:	f7fd fbb7 	bl	800151c <HAL_GetTick>
 8003dae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003db0:	e06e      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db2:	f7fd fbb3 	bl	800151c <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	2b64      	cmp	r3, #100	; 0x64
 8003dbe:	d967      	bls.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
      {
        ret = HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	75fb      	strb	r3, [r7, #23]
        break;
 8003dc4:	e06a      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
 8003dc6:	bf00      	nop
 8003dc8:	00010300 	.word	0x00010300
 8003dcc:	00011300 	.word	0x00011300
 8003dd0:	00012300 	.word	0x00012300
 8003dd4:	00013300 	.word	0x00013300
 8003dd8:	00014300 	.word	0x00014300
 8003ddc:	00015300 	.word	0x00015300
 8003de0:	00016300 	.word	0x00016300
 8003de4:	00017300 	.word	0x00017300
 8003de8:	00018300 	.word	0x00018300
 8003dec:	00019300 	.word	0x00019300
 8003df0:	0001a300 	.word	0x0001a300
 8003df4:	0001b300 	.word	0x0001b300
 8003df8:	0001c300 	.word	0x0001c300
 8003dfc:	0001d300 	.word	0x0001d300
 8003e00:	0001e300 	.word	0x0001e300
 8003e04:	0001f300 	.word	0x0001f300
 8003e08:	00020300 	.word	0x00020300
 8003e0c:	00021300 	.word	0x00021300
 8003e10:	00022300 	.word	0x00022300
 8003e14:	00023300 	.word	0x00023300
 8003e18:	00024300 	.word	0x00024300
 8003e1c:	00025300 	.word	0x00025300
 8003e20:	00026300 	.word	0x00026300
 8003e24:	00027300 	.word	0x00027300
 8003e28:	00028300 	.word	0x00028300
 8003e2c:	00029300 	.word	0x00029300
 8003e30:	0002a300 	.word	0x0002a300
 8003e34:	0002b300 	.word	0x0002b300
 8003e38:	0002c300 	.word	0x0002c300
 8003e3c:	0002d300 	.word	0x0002d300
 8003e40:	0002e300 	.word	0x0002e300
 8003e44:	0002f300 	.word	0x0002f300
 8003e48:	00030300 	.word	0x00030300
 8003e4c:	00031300 	.word	0x00031300
 8003e50:	00032300 	.word	0x00032300
 8003e54:	00033300 	.word	0x00033300
 8003e58:	00034300 	.word	0x00034300
 8003e5c:	00035300 	.word	0x00035300
 8003e60:	00036300 	.word	0x00036300
 8003e64:	00037300 	.word	0x00037300
 8003e68:	00038300 	.word	0x00038300
 8003e6c:	00039300 	.word	0x00039300
 8003e70:	0003a300 	.word	0x0003a300
 8003e74:	0003b300 	.word	0x0003b300
 8003e78:	0003c300 	.word	0x0003c300
 8003e7c:	0003d300 	.word	0x0003d300
 8003e80:	0003e300 	.word	0x0003e300
 8003e84:	0003f300 	.word	0x0003f300
 8003e88:	0800a2f4 	.word	0x0800a2f4
 8003e8c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e90:	4bb9      	ldr	r3, [pc, #740]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d08a      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x96e>
      }
    }

    if(ret == HAL_OK)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d166      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xb2c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003ea2:	4bb6      	ldr	r3, [pc, #728]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ea4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eac:	4053      	eors	r3, r2
 8003eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d013      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xa9a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb6:	4bb1      	ldr	r3, [pc, #708]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec0:	4bae      	ldr	r3, [pc, #696]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec4:	4aad      	ldr	r2, [pc, #692]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ecc:	4bab      	ldr	r3, [pc, #684]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	4aaa      	ldr	r2, [pc, #680]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ed8:	4aa8      	ldr	r2, [pc, #672]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d115      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eea:	f7fd fb17 	bl	800151c <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ef0:	e00b      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xac6>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef2:	f7fd fb13 	bl	800151c <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d902      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xac6>
          {
            ret = HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	75fb      	strb	r3, [r7, #23]
            break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0a:	4b9c      	ldr	r3, [pc, #624]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0ed      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
          }
        }
      }

      if(ret == HAL_OK)
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d126      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xb26>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8003f2c:	4b93      	ldr	r3, [pc, #588]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f3a:	0919      	lsrs	r1, r3, #4
 8003f3c:	4b90      	ldr	r3, [pc, #576]	; (8004180 <HAL_RCCEx_PeriphCLKConfig+0xd3c>)
 8003f3e:	400b      	ands	r3, r1
 8003f40:	498e      	ldr	r1, [pc, #568]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	610b      	str	r3, [r1, #16]
 8003f46:	e005      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8003f48:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	4a8b      	ldr	r2, [pc, #556]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f52:	6113      	str	r3, [r2, #16]
 8003f54:	4b89      	ldr	r3, [pc, #548]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f62:	4986      	ldr	r1, [pc, #536]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	670b      	str	r3, [r1, #112]	; 0x70
 8003f68:	e004      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f6a:	7dfb      	ldrb	r3, [r7, #23]
 8003f6c:	75bb      	strb	r3, [r7, #22]
 8003f6e:	e001      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d07e      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc3a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f84:	2b28      	cmp	r3, #40	; 0x28
 8003f86:	d867      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	0800405f 	.word	0x0800405f
 8003f94:	08004059 	.word	0x08004059
 8003f98:	08004059 	.word	0x08004059
 8003f9c:	08004059 	.word	0x08004059
 8003fa0:	08004059 	.word	0x08004059
 8003fa4:	08004059 	.word	0x08004059
 8003fa8:	08004059 	.word	0x08004059
 8003fac:	08004059 	.word	0x08004059
 8003fb0:	08004035 	.word	0x08004035
 8003fb4:	08004059 	.word	0x08004059
 8003fb8:	08004059 	.word	0x08004059
 8003fbc:	08004059 	.word	0x08004059
 8003fc0:	08004059 	.word	0x08004059
 8003fc4:	08004059 	.word	0x08004059
 8003fc8:	08004059 	.word	0x08004059
 8003fcc:	08004059 	.word	0x08004059
 8003fd0:	08004047 	.word	0x08004047
 8003fd4:	08004059 	.word	0x08004059
 8003fd8:	08004059 	.word	0x08004059
 8003fdc:	08004059 	.word	0x08004059
 8003fe0:	08004059 	.word	0x08004059
 8003fe4:	08004059 	.word	0x08004059
 8003fe8:	08004059 	.word	0x08004059
 8003fec:	08004059 	.word	0x08004059
 8003ff0:	0800405f 	.word	0x0800405f
 8003ff4:	08004059 	.word	0x08004059
 8003ff8:	08004059 	.word	0x08004059
 8003ffc:	08004059 	.word	0x08004059
 8004000:	08004059 	.word	0x08004059
 8004004:	08004059 	.word	0x08004059
 8004008:	08004059 	.word	0x08004059
 800400c:	08004059 	.word	0x08004059
 8004010:	0800405f 	.word	0x0800405f
 8004014:	08004059 	.word	0x08004059
 8004018:	08004059 	.word	0x08004059
 800401c:	08004059 	.word	0x08004059
 8004020:	08004059 	.word	0x08004059
 8004024:	08004059 	.word	0x08004059
 8004028:	08004059 	.word	0x08004059
 800402c:	08004059 	.word	0x08004059
 8004030:	0800405f 	.word	0x0800405f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2101      	movs	r1, #1
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fe50 	bl	8004ce0 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004044:	e00c      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc1c>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f000 ff69 	bl	8004f24 <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e000      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
      break;
 800405e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xc36>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004066:	4b45      	ldr	r3, [pc, #276]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004072:	4942      	ldr	r1, [pc, #264]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004074:	4313      	orrs	r3, r2
 8004076:	654b      	str	r3, [r1, #84]	; 0x54
 8004078:	e001      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xc3a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407a:	7dfb      	ldrb	r3, [r7, #23]
 800407c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d037      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800408e:	2b05      	cmp	r3, #5
 8004090:	d820      	bhi.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xc90>
 8004092:	a201      	add	r2, pc, #4	; (adr r2, 8004098 <HAL_RCCEx_PeriphCLKConfig+0xc54>)
 8004094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004098:	080040db 	.word	0x080040db
 800409c:	080040b1 	.word	0x080040b1
 80040a0:	080040c3 	.word	0x080040c3
 80040a4:	080040db 	.word	0x080040db
 80040a8:	080040db 	.word	0x080040db
 80040ac:	080040db 	.word	0x080040db
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3304      	adds	r3, #4
 80040b4:	2101      	movs	r1, #1
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 fe12 	bl	8004ce0 <RCCEx_PLL2_Config>
 80040bc:	4603      	mov	r3, r0
 80040be:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040c0:	e00c      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc98>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	3324      	adds	r3, #36	; 0x24
 80040c6:	2101      	movs	r1, #1
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 ff2b 	bl	8004f24 <RCCEx_PLL3_Config>
 80040ce:	4603      	mov	r3, r0
 80040d0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80040d2:	e003      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	75fb      	strb	r3, [r7, #23]
      break;
 80040d8:	e000      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xc98>
      break;
 80040da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040dc:	7dfb      	ldrb	r3, [r7, #23]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ee:	4923      	ldr	r1, [pc, #140]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	654b      	str	r3, [r1, #84]	; 0x54
 80040f4:	e001      	b.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	7dfb      	ldrb	r3, [r7, #23]
 80040f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0304 	and.w	r3, r3, #4
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	2b05      	cmp	r3, #5
 800410e:	d821      	bhi.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004110:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_RCCEx_PeriphCLKConfig+0xcd4>)
 8004112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004116:	bf00      	nop
 8004118:	0800415b 	.word	0x0800415b
 800411c:	08004131 	.word	0x08004131
 8004120:	08004143 	.word	0x08004143
 8004124:	0800415b 	.word	0x0800415b
 8004128:	0800415b 	.word	0x0800415b
 800412c:	0800415b 	.word	0x0800415b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fdd2 	bl	8004ce0 <RCCEx_PLL2_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004140:	e00c      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd18>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3324      	adds	r3, #36	; 0x24
 8004146:	2101      	movs	r1, #1
 8004148:	4618      	mov	r0, r3
 800414a:	f000 feeb 	bl	8004f24 <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004152:	e003      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	75fb      	strb	r3, [r7, #23]
      break;
 8004158:	e000      	b.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 800415a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800415c:	7dfb      	ldrb	r3, [r7, #23]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d110      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	f023 0207 	bic.w	r2, r3, #7
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004170:	4902      	ldr	r1, [pc, #8]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004172:	4313      	orrs	r3, r2
 8004174:	658b      	str	r3, [r1, #88]	; 0x58
 8004176:	e007      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004178:	58024800 	.word	0x58024800
 800417c:	58024400 	.word	0x58024400
 8004180:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004184:	7dfb      	ldrb	r3, [r7, #23]
 8004186:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0320 	and.w	r3, r3, #32
 8004190:	2b00      	cmp	r3, #0
 8004192:	d044      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800419e:	d01b      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80041a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a4:	d805      	bhi.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d022      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80041aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041ae:	d00a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 80041b0:	e01b      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
 80041b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b6:	d01d      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
 80041b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041bc:	d01c      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80041be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041c2:	d01b      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xdb8>
 80041c4:	e011      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xda6>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3304      	adds	r3, #4
 80041ca:	2100      	movs	r1, #0
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd87 	bl	8004ce0 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041d6:	e012      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3324      	adds	r3, #36	; 0x24
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fea0 	bl	8004f24 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041e8:	e009      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	75fb      	strb	r3, [r7, #23]
      break;
 80041ee:	e006      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80041f0:	bf00      	nop
 80041f2:	e004      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80041f4:	bf00      	nop
 80041f6:	e002      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80041f8:	bf00      	nop
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xdba>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xdd6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004204:	4bb6      	ldr	r3, [pc, #728]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8004206:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004208:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004212:	49b3      	ldr	r1, [pc, #716]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8004214:	4313      	orrs	r3, r2
 8004216:	654b      	str	r3, [r1, #84]	; 0x54
 8004218:	e001      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d044      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe70>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004234:	d01b      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xe2a>
 8004236:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800423a:	d805      	bhi.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xe04>
 800423c:	2b00      	cmp	r3, #0
 800423e:	d022      	beq.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0xe42>
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe18>
 8004246:	e01b      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8004248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800424c:	d01d      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xe46>
 800424e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004252:	d01c      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xe4a>
 8004254:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004258:	d01b      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xe4e>
 800425a:	e011      	b.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3304      	adds	r3, #4
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fd3c 	bl	8004ce0 <RCCEx_PLL2_Config>
 8004268:	4603      	mov	r3, r0
 800426a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800426c:	e012      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	3324      	adds	r3, #36	; 0x24
 8004272:	2102      	movs	r1, #2
 8004274:	4618      	mov	r0, r3
 8004276:	f000 fe55 	bl	8004f24 <RCCEx_PLL3_Config>
 800427a:	4603      	mov	r3, r0
 800427c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800427e:	e009      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	75fb      	strb	r3, [r7, #23]
      break;
 8004284:	e006      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8004286:	bf00      	nop
 8004288:	e004      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800428a:	bf00      	nop
 800428c:	e002      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 800428e:	bf00      	nop
 8004290:	e000      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      break;
 8004292:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10a      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800429a:	4b91      	ldr	r3, [pc, #580]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800429c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800429e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a8:	498d      	ldr	r1, [pc, #564]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	658b      	str	r3, [r1, #88]	; 0x58
 80042ae:	e001      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xe70>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7dfb      	ldrb	r3, [r7, #23]
 80042b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d044      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf06>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ca:	d01b      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0xec0>
 80042cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d0:	d805      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xe9a>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d022      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xed8>
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xeae>
 80042dc:	e01b      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xed2>
 80042de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e2:	d01d      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xedc>
 80042e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042e8:	d01c      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0xee0>
 80042ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ee:	d01b      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xee4>
 80042f0:	e011      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	2100      	movs	r1, #0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fcf1 	bl	8004ce0 <RCCEx_PLL2_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004302:	e012      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3324      	adds	r3, #36	; 0x24
 8004308:	2102      	movs	r1, #2
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fe0a 	bl	8004f24 <RCCEx_PLL3_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004314:	e009      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	75fb      	strb	r3, [r7, #23]
      break;
 800431a:	e006      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 800431c:	bf00      	nop
 800431e:	e004      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xee6>
      break;
 8004328:	bf00      	nop
    }

    if(ret == HAL_OK)
 800432a:	7dfb      	ldrb	r3, [r7, #23]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xf02>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004330:	4b6b      	ldr	r3, [pc, #428]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8004332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004334:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800433e:	4968      	ldr	r1, [pc, #416]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8004340:	4313      	orrs	r3, r2
 8004342:	658b      	str	r3, [r1, #88]	; 0x58
 8004344:	e001      	b.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf06>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	7dfb      	ldrb	r3, [r7, #23]
 8004348:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d036      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004360:	d015      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800436c:	d00f      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800437e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004382:	d004      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
 8004384:	f240 510f 	movw	r1, #1295	; 0x50f
 8004388:	4856      	ldr	r0, [pc, #344]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 800438a:	f7fc fdaa 	bl	8000ee2 <assert_failed>

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004398:	d10a      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3324      	adds	r3, #36	; 0x24
 800439e:	2102      	movs	r1, #2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f000 fdbf 	bl	8004f24 <RCCEx_PLL3_Config>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xf6c>
        {
          status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043be:	4948      	ldr	r1, [pc, #288]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d036      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e6:	d00f      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80043fc:	d004      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xfc4>
 80043fe:	f240 5122 	movw	r1, #1314	; 0x522
 8004402:	4838      	ldr	r0, [pc, #224]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x10a0>)
 8004404:	f7fc fd6d 	bl	8000ee2 <assert_failed>

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800440e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004412:	d10a      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3324      	adds	r3, #36	; 0x24
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fd82 	bl	8004f24 <RCCEx_PLL3_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfe6>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800442a:	4b2d      	ldr	r3, [pc, #180]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004438:	4929      	ldr	r1, [pc, #164]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d030      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1068>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004454:	d00d      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x102e>
 8004456:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800445a:	d016      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x1046>
 800445c:	2b00      	cmp	r3, #0
 800445e:	d111      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1040>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3304      	adds	r3, #4
 8004464:	2100      	movs	r1, #0
 8004466:	4618      	mov	r0, r3
 8004468:	f000 fc3a 	bl	8004ce0 <RCCEx_PLL2_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004470:	e00c      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1048>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fd53 	bl	8004f24 <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004482:	e003      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1048>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75fb      	strb	r3, [r7, #23]
      break;
 8004488:	e000      	b.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x1048>
      break;
 800448a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10a      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1064>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004492:	4b13      	ldr	r3, [pc, #76]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 8004494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80044a0:	490f      	ldr	r1, [pc, #60]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	658b      	str	r3, [r1, #88]	; 0x58
 80044a6:	e001      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1068>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a8:	7dfb      	ldrb	r3, [r7, #23]
 80044aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d034      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x10de>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044c2:	d011      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
 80044c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80044c8:	d01a      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80044ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044ce:	d114      	bne.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x10b6>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4a02      	ldr	r2, [pc, #8]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x109c>)
 80044d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044da:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80044dc:	e011      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 80044de:	bf00      	nop
 80044e0:	58024400 	.word	0x58024400
 80044e4:	0800a2f4 	.word	0x0800a2f4

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 fd18 	bl	8004f24 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80044f8:	e003      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
      break;
 80044fe:	e000      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x10be>
      break;
 8004500:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10a      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x10da>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004508:	4b9c      	ldr	r3, [pc, #624]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004516:	4999      	ldr	r1, [pc, #612]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004518:	4313      	orrs	r3, r2
 800451a:	654b      	str	r3, [r1, #84]	; 0x54
 800451c:	e001      	b.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x10de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800451e:	7dfb      	ldrb	r3, [r7, #23]
 8004520:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d037      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x115a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800453e:	d004      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1106>
 8004540:	f44f 61b1 	mov.w	r1, #1416	; 0x588
 8004544:	488e      	ldr	r0, [pc, #568]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004546:	f7fc fccc 	bl	8000ee2 <assert_failed>

    switch(PeriphClkInit->SdmmcClockSelection)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004556:	d007      	beq.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1124>
 8004558:	e00f      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800455a:	4b88      	ldr	r3, [pc, #544]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	4a87      	ldr	r2, [pc, #540]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004564:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004566:	e00b      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	2102      	movs	r1, #2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 fbb6 	bl	8004ce0 <RCCEx_PLL2_Config>
 8004574:	4603      	mov	r3, r0
 8004576:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004578:	e002      	b.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x113c>

    default:
      ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	75fb      	strb	r3, [r7, #23]
      break;
 800457e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004580:	7dfb      	ldrb	r3, [r7, #23]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x1156>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004586:	4b7d      	ldr	r3, [pc, #500]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	497a      	ldr	r1, [pc, #488]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004594:	4313      	orrs	r3, r2
 8004596:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004598:	e001      	b.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x115a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
 800459c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x117c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	3324      	adds	r3, #36	; 0x24
 80045ae:	2102      	movs	r1, #2
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fcb7 	bl	8004f24 <RCCEx_PLL3_Config>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d001      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x117c>
    {
      status=HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02f      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
  {

    switch(PeriphClkInit->RngClockSelection)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045d4:	d00c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x11ac>
 80045d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045da:	d802      	bhi.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x119e>
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d011      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
 80045e0:	e00d      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x11ba>
 80045e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e6:	d00f      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x11c4>
 80045e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ec:	d00e      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80045ee:	e006      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x11ba>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f0:	4b62      	ldr	r3, [pc, #392]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	4a61      	ldr	r2, [pc, #388]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 80045f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80045fc:	e007      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	75fb      	strb	r3, [r7, #23]
      break;
 8004602:	e004      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8004604:	bf00      	nop
 8004606:	e002      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 8004608:	bf00      	nop
 800460a:	e000      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x11ca>
      break;
 800460c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800460e:	7dfb      	ldrb	r3, [r7, #23]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d109      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x11e4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004614:	4b59      	ldr	r3, [pc, #356]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004620:	4956      	ldr	r1, [pc, #344]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004622:	4313      	orrs	r3, r2
 8004624:	654b      	str	r3, [r1, #84]	; 0x54
 8004626:	e001      	b.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004628:	7dfb      	ldrb	r3, [r7, #23]
 800462a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x1222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	2b00      	cmp	r3, #0
 800463e:	d009      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004648:	d004      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1210>
 800464a:	f240 51e7 	movw	r1, #1511	; 0x5e7
 800464e:	484c      	ldr	r0, [pc, #304]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004650:	f7fc fc47 	bl	8000ee2 <assert_failed>

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004654:	4b49      	ldr	r3, [pc, #292]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004658:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4946      	ldr	r1, [pc, #280]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004662:	4313      	orrs	r3, r2
 8004664:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d019      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x1262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00a      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x124e>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004686:	d004      	beq.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x124e>
 8004688:	f240 51f1 	movw	r1, #1521	; 0x5f1
 800468c:	483c      	ldr	r0, [pc, #240]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800468e:	f7fc fc28 	bl	8000ee2 <assert_failed>

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046a0:	4936      	ldr	r1, [pc, #216]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d016      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d009      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x128a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046c2:	d004      	beq.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x128a>
 80046c4:	f240 51fb 	movw	r1, #1531	; 0x5fb
 80046c8:	482d      	ldr	r0, [pc, #180]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80046ca:	f7fc fc0a 	bl	8000ee2 <assert_failed>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 80046d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046da:	4928      	ldr	r1, [pc, #160]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d01d      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x12e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x12c8>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80046fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004700:	d004      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x12c8>
 8004702:	f240 6111 	movw	r1, #1553	; 0x611
 8004706:	481e      	ldr	r0, [pc, #120]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004708:	f7fc fbeb 	bl	8000ee2 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800470c:	4b1b      	ldr	r3, [pc, #108]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	4a1a      	ldr	r2, [pc, #104]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004712:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004716:	6113      	str	r3, [r2, #16]
 8004718:	4b18      	ldr	r3, [pc, #96]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 800471a:	691a      	ldr	r2, [r3, #16]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004722:	4916      	ldr	r1, [pc, #88]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004724:	4313      	orrs	r3, r2
 8004726:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	da1b      	bge.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x1324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1312>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004740:	d009      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1312>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800474a:	d004      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1312>
 800474c:	f240 611b 	movw	r1, #1563	; 0x61b
 8004750:	480b      	ldr	r0, [pc, #44]	; (8004780 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004752:	f7fc fbc6 	bl	8000ee2 <assert_failed>

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004756:	4b09      	ldr	r3, [pc, #36]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800475a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004762:	4906      	ldr	r1, [pc, #24]	; (800477c <HAL_RCCEx_PeriphCLKConfig+0x1338>)
 8004764:	4313      	orrs	r3, r2
 8004766:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004768:	7dbb      	ldrb	r3, [r7, #22]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  {
    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x1330>
  }
  return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	58024400 	.word	0x58024400
 8004780:	0800a2f4 	.word	0x0800a2f4

08004784 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004788:	f7fe fdbe 	bl	8003308 <HAL_RCC_GetHCLKFreq>
 800478c:	4601      	mov	r1, r0
 800478e:	4b06      	ldr	r3, [pc, #24]	; (80047a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	091b      	lsrs	r3, r3, #4
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4a04      	ldr	r2, [pc, #16]	; (80047ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800479a:	5cd3      	ldrb	r3, [r2, r3]
 800479c:	f003 031f 	and.w	r3, r3, #31
 80047a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	58024400 	.word	0x58024400
 80047ac:	0800a524 	.word	0x0800a524

080047b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b089      	sub	sp, #36	; 0x24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047b8:	4b9d      	ldr	r3, [pc, #628]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80047c2:	4b9b      	ldr	r3, [pc, #620]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	0b1b      	lsrs	r3, r3, #12
 80047c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047ce:	4b98      	ldr	r3, [pc, #608]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d2:	091b      	lsrs	r3, r3, #4
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80047da:	4b95      	ldr	r3, [pc, #596]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047de:	08db      	lsrs	r3, r3, #3
 80047e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047e4:	693a      	ldr	r2, [r7, #16]
 80047e6:	fb02 f303 	mul.w	r3, r2, r3
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	f000 810a 	beq.w	8004a12 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d05a      	beq.n	80048ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004804:	2b01      	cmp	r3, #1
 8004806:	d302      	bcc.n	800480e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004808:	2b02      	cmp	r3, #2
 800480a:	d078      	beq.n	80048fe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800480c:	e099      	b.n	8004942 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800480e:	4b88      	ldr	r3, [pc, #544]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d02d      	beq.n	8004876 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800481a:	4b85      	ldr	r3, [pc, #532]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	08db      	lsrs	r3, r3, #3
 8004820:	f003 0303 	and.w	r3, r3, #3
 8004824:	4a83      	ldr	r2, [pc, #524]	; (8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004826:	fa22 f303 	lsr.w	r3, r2, r3
 800482a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	ee07 3a90 	vmov	s15, r3
 800483c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004844:	4b7a      	ldr	r3, [pc, #488]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484c:	ee07 3a90 	vmov	s15, r3
 8004850:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004854:	ed97 6a03 	vldr	s12, [r7, #12]
 8004858:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800485c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004860:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004868:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004870:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004874:	e087      	b.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	ee07 3a90 	vmov	s15, r3
 800487c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004880:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004884:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004888:	4b69      	ldr	r3, [pc, #420]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004890:	ee07 3a90 	vmov	s15, r3
 8004894:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004898:	ed97 6a03 	vldr	s12, [r7, #12]
 800489c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80048a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048b8:	e065      	b.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	ee07 3a90 	vmov	s15, r3
 80048c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80048c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048cc:	4b58      	ldr	r3, [pc, #352]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	ee07 3a90 	vmov	s15, r3
 80048d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80048e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80048e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048fc:	e043      	b.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	ee07 3a90 	vmov	s15, r3
 8004904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004908:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800490c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004910:	4b47      	ldr	r3, [pc, #284]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004918:	ee07 3a90 	vmov	s15, r3
 800491c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004920:	ed97 6a03 	vldr	s12, [r7, #12]
 8004924:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004928:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004930:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004934:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004938:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004940:	e021      	b.n	8004986 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004950:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004954:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004964:	ed97 6a03 	vldr	s12, [r7, #12]
 8004968:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800496c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004970:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004974:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004978:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004980:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004984:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004986:	4b2a      	ldr	r3, [pc, #168]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	0a5b      	lsrs	r3, r3, #9
 800498c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800499c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80049b4:	4b1e      	ldr	r3, [pc, #120]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80049e2:	4b13      	ldr	r3, [pc, #76]	; (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	0e1b      	lsrs	r3, r3, #24
 80049e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80049f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a10:	e008      	b.n	8004a24 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	609a      	str	r2, [r3, #8]
}
 8004a24:	bf00      	nop
 8004a26:	3724      	adds	r7, #36	; 0x24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	58024400 	.word	0x58024400
 8004a34:	03d09000 	.word	0x03d09000
 8004a38:	46000000 	.word	0x46000000
 8004a3c:	4c742400 	.word	0x4c742400
 8004a40:	4a742400 	.word	0x4a742400
 8004a44:	4af42400 	.word	0x4af42400

08004a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	; 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a50:	4b9d      	ldr	r3, [pc, #628]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004a5a:	4b9b      	ldr	r3, [pc, #620]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5e:	0d1b      	lsrs	r3, r3, #20
 8004a60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a66:	4b98      	ldr	r3, [pc, #608]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004a72:	4b95      	ldr	r3, [pc, #596]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	08db      	lsrs	r3, r3, #3
 8004a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 810a 	beq.w	8004caa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d05a      	beq.n	8004b52 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d302      	bcc.n	8004aa6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d078      	beq.n	8004b96 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004aa4:	e099      	b.n	8004bda <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004aa6:	4b88      	ldr	r3, [pc, #544]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0320 	and.w	r3, r3, #32
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d02d      	beq.n	8004b0e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004ab2:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	4a83      	ldr	r2, [pc, #524]	; (8004ccc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	ee07 3a90 	vmov	s15, r3
 8004ad4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004adc:	4b7a      	ldr	r3, [pc, #488]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae4:	ee07 3a90 	vmov	s15, r3
 8004ae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aec:	ed97 6a03 	vldr	s12, [r7, #12]
 8004af0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004af4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004afc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004b0c:	e087      	b.n	8004c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004b1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b20:	4b69      	ldr	r3, [pc, #420]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b30:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004b38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b50:	e065      	b.n	8004c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	ee07 3a90 	vmov	s15, r3
 8004b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004b60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b64:	4b58      	ldr	r3, [pc, #352]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b74:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004b7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004b94:	e043      	b.n	8004c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004ba4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ba8:	4b47      	ldr	r3, [pc, #284]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb0:	ee07 3a90 	vmov	s15, r3
 8004bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bbc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004bc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004bd8:	e021      	b.n	8004c1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004be8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bec:	4b36      	ldr	r3, [pc, #216]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf4:	ee07 3a90 	vmov	s15, r3
 8004bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004cd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004c04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c1c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004c1e:	4b2a      	ldr	r3, [pc, #168]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	0a5b      	lsrs	r3, r3, #9
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	ee07 3a90 	vmov	s15, r3
 8004c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c38:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c44:	ee17 2a90 	vmov	r2, s15
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004c4c:	4b1e      	ldr	r3, [pc, #120]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	0c1b      	lsrs	r3, r3, #16
 8004c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c56:	ee07 3a90 	vmov	s15, r3
 8004c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c72:	ee17 2a90 	vmov	r2, s15
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004c7a:	4b13      	ldr	r3, [pc, #76]	; (8004cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	0e1b      	lsrs	r3, r3, #24
 8004c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004c90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ca0:	ee17 2a90 	vmov	r2, s15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3724      	adds	r7, #36	; 0x24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	58024400 	.word	0x58024400
 8004ccc:	03d09000 	.word	0x03d09000
 8004cd0:	46000000 	.word	0x46000000
 8004cd4:	4c742400 	.word	0x4c742400
 8004cd8:	4a742400 	.word	0x4a742400
 8004cdc:	4af42400 	.word	0x4af42400

08004ce0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2M_VALUE(pll2->PLL2M));
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <RCCEx_PLL2_Config+0x1e>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b3f      	cmp	r3, #63	; 0x3f
 8004cfc:	d904      	bls.n	8004d08 <RCCEx_PLL2_Config+0x28>
 8004cfe:	f640 41b2 	movw	r1, #3250	; 0xcb2
 8004d02:	4885      	ldr	r0, [pc, #532]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d04:	f7fc f8ed 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2N_VALUE(pll2->PLL2N));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d904      	bls.n	8004d1a <RCCEx_PLL2_Config+0x3a>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d18:	d904      	bls.n	8004d24 <RCCEx_PLL2_Config+0x44>
 8004d1a:	f640 41b3 	movw	r1, #3251	; 0xcb3
 8004d1e:	487e      	ldr	r0, [pc, #504]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d20:	f7fc f8df 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2P_VALUE(pll2->PLL2P));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <RCCEx_PLL2_Config+0x54>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d904      	bls.n	8004d3e <RCCEx_PLL2_Config+0x5e>
 8004d34:	f640 41b4 	movw	r1, #3252	; 0xcb4
 8004d38:	4877      	ldr	r0, [pc, #476]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d3a:	f7fc f8d2 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2R_VALUE(pll2->PLL2R));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <RCCEx_PLL2_Config+0x6e>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d904      	bls.n	8004d58 <RCCEx_PLL2_Config+0x78>
 8004d4e:	f640 41b5 	movw	r1, #3253	; 0xcb5
 8004d52:	4871      	ldr	r0, [pc, #452]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d54:	f7fc f8c5 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2Q_VALUE(pll2->PLL2Q));
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <RCCEx_PLL2_Config+0x88>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b80      	cmp	r3, #128	; 0x80
 8004d66:	d904      	bls.n	8004d72 <RCCEx_PLL2_Config+0x92>
 8004d68:	f640 41b6 	movw	r1, #3254	; 0xcb6
 8004d6c:	486a      	ldr	r0, [pc, #424]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d6e:	f7fc f8b8 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <RCCEx_PLL2_Config+0xbc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	695b      	ldr	r3, [r3, #20]
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d00c      	beq.n	8004d9c <RCCEx_PLL2_Config+0xbc>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	2b80      	cmp	r3, #128	; 0x80
 8004d88:	d008      	beq.n	8004d9c <RCCEx_PLL2_Config+0xbc>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d90:	d004      	beq.n	8004d9c <RCCEx_PLL2_Config+0xbc>
 8004d92:	f640 41b7 	movw	r1, #3255	; 0xcb7
 8004d96:	4860      	ldr	r0, [pc, #384]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004d98:	f7fc f8a3 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d008      	beq.n	8004db6 <RCCEx_PLL2_Config+0xd6>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	d004      	beq.n	8004db6 <RCCEx_PLL2_Config+0xd6>
 8004dac:	f640 41b8 	movw	r1, #3256	; 0xcb8
 8004db0:	4859      	ldr	r0, [pc, #356]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004db2:	f7fc f896 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	d304      	bcc.n	8004dca <RCCEx_PLL2_Config+0xea>
 8004dc0:	f640 41b9 	movw	r1, #3257	; 0xcb9
 8004dc4:	4854      	ldr	r0, [pc, #336]	; (8004f18 <RCCEx_PLL2_Config+0x238>)
 8004dc6:	f7fc f88c 	bl	8000ee2 <assert_failed>

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dca:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d101      	bne.n	8004dda <RCCEx_PLL2_Config+0xfa>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e099      	b.n	8004f0e <RCCEx_PLL2_Config+0x22e>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dda:	4b50      	ldr	r3, [pc, #320]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a4f      	ldr	r2, [pc, #316]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004de0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004de4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de6:	f7fc fb99 	bl	800151c <HAL_GetTick>
 8004dea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dec:	e008      	b.n	8004e00 <RCCEx_PLL2_Config+0x120>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004dee:	f7fc fb95 	bl	800151c <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d901      	bls.n	8004e00 <RCCEx_PLL2_Config+0x120>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e086      	b.n	8004f0e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004e00:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1f0      	bne.n	8004dee <RCCEx_PLL2_Config+0x10e>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e0c:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	031b      	lsls	r3, r3, #12
 8004e1a:	4940      	ldr	r1, [pc, #256]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	628b      	str	r3, [r1, #40]	; 0x28
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	025b      	lsls	r3, r3, #9
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	041b      	lsls	r3, r3, #16
 8004e3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	061b      	lsls	r3, r3, #24
 8004e4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004e50:	4932      	ldr	r1, [pc, #200]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e56:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	695b      	ldr	r3, [r3, #20]
 8004e62:	492e      	ldr	r1, [pc, #184]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e68:	4b2c      	ldr	r3, [pc, #176]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	f023 0220 	bic.w	r2, r3, #32
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	4929      	ldr	r1, [pc, #164]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e7a:	4b28      	ldr	r3, [pc, #160]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e86:	4b25      	ldr	r3, [pc, #148]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e8a:	4b25      	ldr	r3, [pc, #148]	; (8004f20 <RCCEx_PLL2_Config+0x240>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	69d2      	ldr	r2, [r2, #28]
 8004e92:	00d2      	lsls	r2, r2, #3
 8004e94:	4921      	ldr	r1, [pc, #132]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9e:	4a1f      	ldr	r2, [pc, #124]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ea0:	f043 0310 	orr.w	r3, r3, #16
 8004ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d106      	bne.n	8004eba <RCCEx_PLL2_Config+0x1da>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	4a1a      	ldr	r2, [pc, #104]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004eb6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004eb8:	e00f      	b.n	8004eda <RCCEx_PLL2_Config+0x1fa>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d106      	bne.n	8004ece <RCCEx_PLL2_Config+0x1ee>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	4a15      	ldr	r2, [pc, #84]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ec6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eca:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ecc:	e005      	b.n	8004eda <RCCEx_PLL2_Config+0x1fa>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ece:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ed4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ed8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004eda:	4b10      	ldr	r3, [pc, #64]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a0f      	ldr	r2, [pc, #60]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004ee0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee6:	f7fc fb19 	bl	800151c <HAL_GetTick>
 8004eea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004eec:	e008      	b.n	8004f00 <RCCEx_PLL2_Config+0x220>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004eee:	f7fc fb15 	bl	800151c <HAL_GetTick>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d901      	bls.n	8004f00 <RCCEx_PLL2_Config+0x220>
      {
        return HAL_TIMEOUT;
 8004efc:	2303      	movs	r3, #3
 8004efe:	e006      	b.n	8004f0e <RCCEx_PLL2_Config+0x22e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <RCCEx_PLL2_Config+0x23c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d0f0      	beq.n	8004eee <RCCEx_PLL2_Config+0x20e>
    }

  }


  return status;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	0800a2f4 	.word	0x0800a2f4
 8004f1c:	58024400 	.word	0x58024400
 8004f20:	ffff0007 	.word	0xffff0007

08004f24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3M_VALUE(pll3->PLL3M));
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <RCCEx_PLL3_Config+0x1e>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8004f40:	d904      	bls.n	8004f4c <RCCEx_PLL3_Config+0x28>
 8004f42:	f640 511a 	movw	r1, #3354	; 0xd1a
 8004f46:	4887      	ldr	r0, [pc, #540]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004f48:	f7fb ffcb 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3N_VALUE(pll3->PLL3N));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	2b03      	cmp	r3, #3
 8004f52:	d904      	bls.n	8004f5e <RCCEx_PLL3_Config+0x3a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f5c:	d904      	bls.n	8004f68 <RCCEx_PLL3_Config+0x44>
 8004f5e:	f640 511b 	movw	r1, #3355	; 0xd1b
 8004f62:	4880      	ldr	r0, [pc, #512]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004f64:	f7fb ffbd 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3P_VALUE(pll3->PLL3P));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d003      	beq.n	8004f78 <RCCEx_PLL3_Config+0x54>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d904      	bls.n	8004f82 <RCCEx_PLL3_Config+0x5e>
 8004f78:	f640 511c 	movw	r1, #3356	; 0xd1c
 8004f7c:	4879      	ldr	r0, [pc, #484]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004f7e:	f7fb ffb0 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3R_VALUE(pll3->PLL3R));
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d003      	beq.n	8004f92 <RCCEx_PLL3_Config+0x6e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b80      	cmp	r3, #128	; 0x80
 8004f90:	d904      	bls.n	8004f9c <RCCEx_PLL3_Config+0x78>
 8004f92:	f640 511d 	movw	r1, #3357	; 0xd1d
 8004f96:	4873      	ldr	r0, [pc, #460]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004f98:	f7fb ffa3 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3Q_VALUE(pll3->PLL3Q));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <RCCEx_PLL3_Config+0x88>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b80      	cmp	r3, #128	; 0x80
 8004faa:	d904      	bls.n	8004fb6 <RCCEx_PLL3_Config+0x92>
 8004fac:	f640 511e 	movw	r1, #3358	; 0xd1e
 8004fb0:	486c      	ldr	r0, [pc, #432]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004fb2:	f7fb ff96 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d013      	beq.n	8004fe6 <RCCEx_PLL3_Config+0xc2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d00e      	beq.n	8004fe6 <RCCEx_PLL3_Config+0xc2>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fd0:	d009      	beq.n	8004fe6 <RCCEx_PLL3_Config+0xc2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695b      	ldr	r3, [r3, #20]
 8004fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fda:	d004      	beq.n	8004fe6 <RCCEx_PLL3_Config+0xc2>
 8004fdc:	f640 511f 	movw	r1, #3359	; 0xd1f
 8004fe0:	4860      	ldr	r0, [pc, #384]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004fe2:	f7fb ff7e 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d009      	beq.n	8005002 <RCCEx_PLL3_Config+0xde>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ff6:	d004      	beq.n	8005002 <RCCEx_PLL3_Config+0xde>
 8004ff8:	f44f 6152 	mov.w	r1, #3360	; 0xd20
 8004ffc:	4859      	ldr	r0, [pc, #356]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8004ffe:	f7fb ff70 	bl	8000ee2 <assert_failed>
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	69db      	ldr	r3, [r3, #28]
 8005006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800500a:	d304      	bcc.n	8005016 <RCCEx_PLL3_Config+0xf2>
 800500c:	f640 5121 	movw	r1, #3361	; 0xd21
 8005010:	4854      	ldr	r0, [pc, #336]	; (8005164 <RCCEx_PLL3_Config+0x240>)
 8005012:	f7fb ff66 	bl	8000ee2 <assert_failed>

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005016:	4b54      	ldr	r3, [pc, #336]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b03      	cmp	r3, #3
 8005020:	d101      	bne.n	8005026 <RCCEx_PLL3_Config+0x102>
  {
    return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e099      	b.n	800515a <RCCEx_PLL3_Config+0x236>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005026:	4b50      	ldr	r3, [pc, #320]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a4f      	ldr	r2, [pc, #316]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800502c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005032:	f7fc fa73 	bl	800151c <HAL_GetTick>
 8005036:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005038:	e008      	b.n	800504c <RCCEx_PLL3_Config+0x128>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800503a:	f7fc fa6f 	bl	800151c <HAL_GetTick>
 800503e:	4602      	mov	r2, r0
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1ad3      	subs	r3, r2, r3
 8005044:	2b02      	cmp	r3, #2
 8005046:	d901      	bls.n	800504c <RCCEx_PLL3_Config+0x128>
      {
        return HAL_TIMEOUT;
 8005048:	2303      	movs	r3, #3
 800504a:	e086      	b.n	800515a <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800504c:	4b46      	ldr	r3, [pc, #280]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1f0      	bne.n	800503a <RCCEx_PLL3_Config+0x116>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005058:	4b43      	ldr	r3, [pc, #268]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800505a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800505c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	051b      	lsls	r3, r3, #20
 8005066:	4940      	ldr	r1, [pc, #256]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005068:	4313      	orrs	r3, r2
 800506a:	628b      	str	r3, [r1, #40]	; 0x28
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	3b01      	subs	r3, #1
 8005072:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	3b01      	subs	r3, #1
 800507c:	025b      	lsls	r3, r3, #9
 800507e:	b29b      	uxth	r3, r3
 8005080:	431a      	orrs	r2, r3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	3b01      	subs	r3, #1
 8005088:	041b      	lsls	r3, r3, #16
 800508a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	3b01      	subs	r3, #1
 8005096:	061b      	lsls	r3, r3, #24
 8005098:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800509c:	4932      	ldr	r1, [pc, #200]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050a2:	4b31      	ldr	r3, [pc, #196]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	492e      	ldr	r1, [pc, #184]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050b4:	4b2c      	ldr	r3, [pc, #176]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	4929      	ldr	r1, [pc, #164]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80050d2:	4b25      	ldr	r3, [pc, #148]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d6:	4b25      	ldr	r3, [pc, #148]	; (800516c <RCCEx_PLL3_Config+0x248>)
 80050d8:	4013      	ands	r3, r2
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	69d2      	ldr	r2, [r2, #28]
 80050de:	00d2      	lsls	r2, r2, #3
 80050e0:	4921      	ldr	r1, [pc, #132]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050e6:	4b20      	ldr	r3, [pc, #128]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	4a1f      	ldr	r2, [pc, #124]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d106      	bne.n	8005106 <RCCEx_PLL3_Config+0x1e2>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050f8:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fc:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 80050fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005102:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005104:	e00f      	b.n	8005126 <RCCEx_PLL3_Config+0x202>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <RCCEx_PLL3_Config+0x1f6>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	4a15      	ldr	r2, [pc, #84]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005112:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005116:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005118:	e005      	b.n	8005126 <RCCEx_PLL3_Config+0x202>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800511a:	4b13      	ldr	r3, [pc, #76]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800511c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005120:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005124:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005126:	4b10      	ldr	r3, [pc, #64]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0f      	ldr	r2, [pc, #60]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800512c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005132:	f7fc f9f3 	bl	800151c <HAL_GetTick>
 8005136:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005138:	e008      	b.n	800514c <RCCEx_PLL3_Config+0x228>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800513a:	f7fc f9ef 	bl	800151c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <RCCEx_PLL3_Config+0x228>
      {
        return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e006      	b.n	800515a <RCCEx_PLL3_Config+0x236>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800514c:	4b06      	ldr	r3, [pc, #24]	; (8005168 <RCCEx_PLL3_Config+0x244>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <RCCEx_PLL3_Config+0x216>
    }

  }


  return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	0800a2f4 	.word	0x0800a2f4
 8005168:	58024400 	.word	0x58024400
 800516c:	ffff0007 	.word	0xffff0007

08005170 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d101      	bne.n	8005182 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e0cd      	b.n	800531e <HAL_TIM_Base_Init+0x1ae>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a68      	ldr	r2, [pc, #416]	; (8005328 <HAL_TIM_Base_Init+0x1b8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d045      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005194:	d040      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a64      	ldr	r2, [pc, #400]	; (800532c <HAL_TIM_Base_Init+0x1bc>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d03b      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a62      	ldr	r2, [pc, #392]	; (8005330 <HAL_TIM_Base_Init+0x1c0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d036      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a61      	ldr	r2, [pc, #388]	; (8005334 <HAL_TIM_Base_Init+0x1c4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d031      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a5f      	ldr	r2, [pc, #380]	; (8005338 <HAL_TIM_Base_Init+0x1c8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d02c      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a5e      	ldr	r2, [pc, #376]	; (800533c <HAL_TIM_Base_Init+0x1cc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d027      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a5c      	ldr	r2, [pc, #368]	; (8005340 <HAL_TIM_Base_Init+0x1d0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d022      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a5b      	ldr	r2, [pc, #364]	; (8005344 <HAL_TIM_Base_Init+0x1d4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d01d      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a59      	ldr	r2, [pc, #356]	; (8005348 <HAL_TIM_Base_Init+0x1d8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d018      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a58      	ldr	r2, [pc, #352]	; (800534c <HAL_TIM_Base_Init+0x1dc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a56      	ldr	r2, [pc, #344]	; (8005350 <HAL_TIM_Base_Init+0x1e0>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d00e      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a55      	ldr	r2, [pc, #340]	; (8005354 <HAL_TIM_Base_Init+0x1e4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d009      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a53      	ldr	r2, [pc, #332]	; (8005358 <HAL_TIM_Base_Init+0x1e8>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d004      	beq.n	8005218 <HAL_TIM_Base_Init+0xa8>
 800520e:	f44f 718b 	mov.w	r1, #278	; 0x116
 8005212:	4852      	ldr	r0, [pc, #328]	; (800535c <HAL_TIM_Base_Init+0x1ec>)
 8005214:	f7fb fe65 	bl	8000ee2 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d014      	beq.n	800524a <HAL_TIM_Base_Init+0xda>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b10      	cmp	r3, #16
 8005226:	d010      	beq.n	800524a <HAL_TIM_Base_Init+0xda>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	2b20      	cmp	r3, #32
 800522e:	d00c      	beq.n	800524a <HAL_TIM_Base_Init+0xda>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b40      	cmp	r3, #64	; 0x40
 8005236:	d008      	beq.n	800524a <HAL_TIM_Base_Init+0xda>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	2b60      	cmp	r3, #96	; 0x60
 800523e:	d004      	beq.n	800524a <HAL_TIM_Base_Init+0xda>
 8005240:	f240 1117 	movw	r1, #279	; 0x117
 8005244:	4845      	ldr	r0, [pc, #276]	; (800535c <HAL_TIM_Base_Init+0x1ec>)
 8005246:	f7fb fe4c 	bl	8000ee2 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00e      	beq.n	8005270 <HAL_TIM_Base_Init+0x100>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800525a:	d009      	beq.n	8005270 <HAL_TIM_Base_Init+0x100>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005264:	d004      	beq.n	8005270 <HAL_TIM_Base_Init+0x100>
 8005266:	f44f 718c 	mov.w	r1, #280	; 0x118
 800526a:	483c      	ldr	r0, [pc, #240]	; (800535c <HAL_TIM_Base_Init+0x1ec>)
 800526c:	f7fb fe39 	bl	8000ee2 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d008      	beq.n	800528a <HAL_TIM_Base_Init+0x11a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	2b80      	cmp	r3, #128	; 0x80
 800527e:	d004      	beq.n	800528a <HAL_TIM_Base_Init+0x11a>
 8005280:	f240 1119 	movw	r1, #281	; 0x119
 8005284:	4835      	ldr	r0, [pc, #212]	; (800535c <HAL_TIM_Base_Init+0x1ec>)
 8005286:	f7fb fe2c 	bl	8000ee2 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005290:	b2db      	uxtb	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_TIM_Base_Init+0x134>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f85e 	bl	8005360 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f000 fa40 	bl	800573c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40010000 	.word	0x40010000
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	40001000 	.word	0x40001000
 800533c:	40001400 	.word	0x40001400
 8005340:	40010400 	.word	0x40010400
 8005344:	40001800 	.word	0x40001800
 8005348:	40001c00 	.word	0x40001c00
 800534c:	40002000 	.word	0x40002000
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800
 800535c:	0800a374 	.word	0x0800a374

08005360 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a3b      	ldr	r2, [pc, #236]	; (8005470 <HAL_TIM_Base_Start_IT+0xfc>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d045      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d040      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a37      	ldr	r2, [pc, #220]	; (8005474 <HAL_TIM_Base_Start_IT+0x100>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d03b      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a36      	ldr	r2, [pc, #216]	; (8005478 <HAL_TIM_Base_Start_IT+0x104>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d036      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a34      	ldr	r2, [pc, #208]	; (800547c <HAL_TIM_Base_Start_IT+0x108>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d031      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a33      	ldr	r2, [pc, #204]	; (8005480 <HAL_TIM_Base_Start_IT+0x10c>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d02c      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a31      	ldr	r2, [pc, #196]	; (8005484 <HAL_TIM_Base_Start_IT+0x110>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d027      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a30      	ldr	r2, [pc, #192]	; (8005488 <HAL_TIM_Base_Start_IT+0x114>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d022      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a2e      	ldr	r2, [pc, #184]	; (800548c <HAL_TIM_Base_Start_IT+0x118>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01d      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a2d      	ldr	r2, [pc, #180]	; (8005490 <HAL_TIM_Base_Start_IT+0x11c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d018      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a2b      	ldr	r2, [pc, #172]	; (8005494 <HAL_TIM_Base_Start_IT+0x120>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d013      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a2a      	ldr	r2, [pc, #168]	; (8005498 <HAL_TIM_Base_Start_IT+0x124>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00e      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a28      	ldr	r2, [pc, #160]	; (800549c <HAL_TIM_Base_Start_IT+0x128>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d009      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <HAL_TIM_Base_Start_IT+0x12c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d004      	beq.n	8005412 <HAL_TIM_Base_Start_IT+0x9e>
 8005408:	f240 11cb 	movw	r1, #459	; 0x1cb
 800540c:	4825      	ldr	r0, [pc, #148]	; (80054a4 <HAL_TIM_Base_Start_IT+0x130>)
 800540e:	f7fb fd68 	bl	8000ee2 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b01      	cmp	r3, #1
 800541c:	d001      	beq.n	8005422 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e021      	b.n	8005466 <HAL_TIM_Base_Start_IT+0xf2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0201 	orr.w	r2, r2, #1
 8005438:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689a      	ldr	r2, [r3, #8]
 8005440:	4b19      	ldr	r3, [pc, #100]	; (80054a8 <HAL_TIM_Base_Start_IT+0x134>)
 8005442:	4013      	ands	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b06      	cmp	r3, #6
 800544a:	d00b      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0xf0>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005452:	d007      	beq.n	8005464 <HAL_TIM_Base_Start_IT+0xf0>
  {
    __HAL_TIM_ENABLE(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3710      	adds	r7, #16
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40001000 	.word	0x40001000
 8005484:	40001400 	.word	0x40001400
 8005488:	40010400 	.word	0x40010400
 800548c:	40001800 	.word	0x40001800
 8005490:	40001c00 	.word	0x40001c00
 8005494:	40002000 	.word	0x40002000
 8005498:	40014000 	.word	0x40014000
 800549c:	40014400 	.word	0x40014400
 80054a0:	40014800 	.word	0x40014800
 80054a4:	0800a374 	.word	0x0800a374
 80054a8:	00010007 	.word	0x00010007

080054ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b02      	cmp	r3, #2
 80054c0:	d122      	bne.n	8005508 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d11b      	bne.n	8005508 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0202 	mvn.w	r2, #2
 80054d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f905 	bl	80056fe <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f8f7 	bl	80056ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f908 	bl	8005712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d122      	bne.n	800555c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f003 0304 	and.w	r3, r3, #4
 8005520:	2b04      	cmp	r3, #4
 8005522:	d11b      	bne.n	800555c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0204 	mvn.w	r2, #4
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2202      	movs	r2, #2
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f8db 	bl	80056fe <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f8cd 	bl	80056ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f8de 	bl	8005712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b08      	cmp	r3, #8
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b08      	cmp	r3, #8
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0208 	mvn.w	r2, #8
 8005580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2204      	movs	r2, #4
 8005586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	69db      	ldr	r3, [r3, #28]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8b1 	bl	80056fe <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f8a3 	bl	80056ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f8b4 	bl	8005712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b10      	cmp	r3, #16
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b10      	cmp	r3, #16
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0210 	mvn.w	r2, #16
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2208      	movs	r2, #8
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f887 	bl	80056fe <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f879 	bl	80056ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f88a 	bl	8005712 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b01      	cmp	r3, #1
 8005610:	d10e      	bne.n	8005630 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b01      	cmp	r3, #1
 800561e:	d107      	bne.n	8005630 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0201 	mvn.w	r2, #1
 8005628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f7fb fc3a 	bl	8000ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b80      	cmp	r3, #128	; 0x80
 800563c:	d10e      	bne.n	800565c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	2b80      	cmp	r3, #128	; 0x80
 800564a:	d107      	bne.n	800565c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 f914 	bl	8005884 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800566a:	d10e      	bne.n	800568a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005676:	2b80      	cmp	r3, #128	; 0x80
 8005678:	d107      	bne.n	800568a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f907 	bl	8005898 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b40      	cmp	r3, #64	; 0x40
 8005696:	d10e      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d107      	bne.n	80056b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 f838 	bl	8005726 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	f003 0320 	and.w	r3, r3, #32
 80056c0:	2b20      	cmp	r3, #32
 80056c2:	d10e      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b20      	cmp	r3, #32
 80056d0:	d107      	bne.n	80056e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f06f 0220 	mvn.w	r2, #32
 80056da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8c7 	bl	8005870 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056e2:	bf00      	nop
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005706:	bf00      	nop
 8005708:	370c      	adds	r7, #12
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
	...

0800573c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a40      	ldr	r2, [pc, #256]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d00f      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3d      	ldr	r2, [pc, #244]	; (8005854 <TIM_Base_SetConfig+0x118>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3c      	ldr	r2, [pc, #240]	; (8005858 <TIM_Base_SetConfig+0x11c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <TIM_Base_SetConfig+0x120>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <TIM_Base_SetConfig+0x124>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2f      	ldr	r2, [pc, #188]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d01f      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d01b      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <TIM_Base_SetConfig+0x118>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d017      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2b      	ldr	r2, [pc, #172]	; (8005858 <TIM_Base_SetConfig+0x11c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d013      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <TIM_Base_SetConfig+0x120>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d00f      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a29      	ldr	r2, [pc, #164]	; (8005860 <TIM_Base_SetConfig+0x124>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <TIM_Base_SetConfig+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d007      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a27      	ldr	r2, [pc, #156]	; (8005868 <TIM_Base_SetConfig+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <TIM_Base_SetConfig+0x130>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a10      	ldr	r2, [pc, #64]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00f      	beq.n	8005834 <TIM_Base_SetConfig+0xf8>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a12      	ldr	r2, [pc, #72]	; (8005860 <TIM_Base_SetConfig+0x124>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d00b      	beq.n	8005834 <TIM_Base_SetConfig+0xf8>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a11      	ldr	r2, [pc, #68]	; (8005864 <TIM_Base_SetConfig+0x128>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d007      	beq.n	8005834 <TIM_Base_SetConfig+0xf8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a10      	ldr	r2, [pc, #64]	; (8005868 <TIM_Base_SetConfig+0x12c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0xf8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a0f      	ldr	r2, [pc, #60]	; (800586c <TIM_Base_SetConfig+0x130>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d103      	bne.n	800583c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	615a      	str	r2, [r3, #20]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40010400 	.word	0x40010400
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800

08005870 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005878:	bf00      	nop
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e0ab      	b.n	8005a16 <HAL_UART_Init+0x16a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d032      	beq.n	800592c <HAL_UART_Init+0x80>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a55      	ldr	r2, [pc, #340]	; (8005a20 <HAL_UART_Init+0x174>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d05f      	beq.n	8005990 <HAL_UART_Init+0xe4>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a53      	ldr	r2, [pc, #332]	; (8005a24 <HAL_UART_Init+0x178>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d05a      	beq.n	8005990 <HAL_UART_Init+0xe4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a52      	ldr	r2, [pc, #328]	; (8005a28 <HAL_UART_Init+0x17c>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d055      	beq.n	8005990 <HAL_UART_Init+0xe4>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a50      	ldr	r2, [pc, #320]	; (8005a2c <HAL_UART_Init+0x180>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d050      	beq.n	8005990 <HAL_UART_Init+0xe4>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a4f      	ldr	r2, [pc, #316]	; (8005a30 <HAL_UART_Init+0x184>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d04b      	beq.n	8005990 <HAL_UART_Init+0xe4>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a4d      	ldr	r2, [pc, #308]	; (8005a34 <HAL_UART_Init+0x188>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d046      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a4c      	ldr	r2, [pc, #304]	; (8005a38 <HAL_UART_Init+0x18c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d041      	beq.n	8005990 <HAL_UART_Init+0xe4>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4a      	ldr	r2, [pc, #296]	; (8005a3c <HAL_UART_Init+0x190>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d03c      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a49      	ldr	r2, [pc, #292]	; (8005a40 <HAL_UART_Init+0x194>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d037      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005920:	f44f 719a 	mov.w	r1, #308	; 0x134
 8005924:	4847      	ldr	r0, [pc, #284]	; (8005a44 <HAL_UART_Init+0x198>)
 8005926:	f7fb fadc 	bl	8000ee2 <assert_failed>
 800592a:	e031      	b.n	8005990 <HAL_UART_Init+0xe4>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a3b      	ldr	r2, [pc, #236]	; (8005a20 <HAL_UART_Init+0x174>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d02c      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a3a      	ldr	r2, [pc, #232]	; (8005a24 <HAL_UART_Init+0x178>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d027      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a38      	ldr	r2, [pc, #224]	; (8005a28 <HAL_UART_Init+0x17c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d022      	beq.n	8005990 <HAL_UART_Init+0xe4>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a37      	ldr	r2, [pc, #220]	; (8005a2c <HAL_UART_Init+0x180>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d01d      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a35      	ldr	r2, [pc, #212]	; (8005a30 <HAL_UART_Init+0x184>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d018      	beq.n	8005990 <HAL_UART_Init+0xe4>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a34      	ldr	r2, [pc, #208]	; (8005a34 <HAL_UART_Init+0x188>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a32      	ldr	r2, [pc, #200]	; (8005a38 <HAL_UART_Init+0x18c>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d00e      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	4a31      	ldr	r2, [pc, #196]	; (8005a3c <HAL_UART_Init+0x190>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d009      	beq.n	8005990 <HAL_UART_Init+0xe4>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <HAL_UART_Init+0x194>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d004      	beq.n	8005990 <HAL_UART_Init+0xe4>
 8005986:	f240 1139 	movw	r1, #313	; 0x139
 800598a:	482e      	ldr	r0, [pc, #184]	; (8005a44 <HAL_UART_Init+0x198>)
 800598c:	f7fb faa9 	bl	8000ee2 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_UART_Init+0xfc>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb fac6 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2224      	movs	r2, #36	; 0x24
 80059ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f022 0201 	bic.w	r2, r2, #1
 80059be:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f8d7 	bl	8005b74 <UART_SetConfig>
 80059c6:	4603      	mov	r3, r0
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d101      	bne.n	80059d0 <HAL_UART_Init+0x124>
  {
    return HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	e022      	b.n	8005a16 <HAL_UART_Init+0x16a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d002      	beq.n	80059de <HAL_UART_Init+0x132>
  {
    UART_AdvFeatureConfig(huart);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 ff55 	bl	8006888 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059ec:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059fc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f042 0201 	orr.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f001 f8b0 	bl	8006b74 <UART_CheckIdleState>
 8005a14:	4603      	mov	r3, r0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	40011000 	.word	0x40011000
 8005a24:	40004400 	.word	0x40004400
 8005a28:	40004800 	.word	0x40004800
 8005a2c:	40004c00 	.word	0x40004c00
 8005a30:	40005000 	.word	0x40005000
 8005a34:	40011400 	.word	0x40011400
 8005a38:	40007800 	.word	0x40007800
 8005a3c:	40007c00 	.word	0x40007c00
 8005a40:	58000c00 	.word	0x58000c00
 8005a44:	0800a3f4 	.word	0x0800a3f4

08005a48 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b08a      	sub	sp, #40	; 0x28
 8005a4c:	af02      	add	r7, sp, #8
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	603b      	str	r3, [r7, #0]
 8005a54:	4613      	mov	r3, r2
 8005a56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a5e:	2b20      	cmp	r3, #32
 8005a60:	f040 8083 	bne.w	8005b6a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Transmit+0x28>
 8005a6a:	88fb      	ldrh	r3, [r7, #6]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d101      	bne.n	8005a74 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e07b      	b.n	8005b6c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_UART_Transmit+0x3a>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e074      	b.n	8005b6c <HAL_UART_Transmit+0x124>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2221      	movs	r2, #33	; 0x21
 8005a96:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005a9a:	f7fb fd3f 	bl	800151c <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	88fa      	ldrh	r2, [r7, #6]
 8005aac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab8:	d108      	bne.n	8005acc <HAL_UART_Transmit+0x84>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e003      	b.n	8005ad4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 8005adc:	e02c      	b.n	8005b38 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	2180      	movs	r1, #128	; 0x80
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f001 f88b 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e039      	b.n	8005b6c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10b      	bne.n	8005b16 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	3302      	adds	r3, #2
 8005b12:	61bb      	str	r3, [r7, #24]
 8005b14:	e007      	b.n	8005b26 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	781a      	ldrb	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	3301      	adds	r3, #1
 8005b24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1cc      	bne.n	8005ade <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f001 f858 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e006      	b.n	8005b6c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2220      	movs	r2, #32
 8005b62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	e000      	b.n	8005b6c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005b6a:	2302      	movs	r3, #2
  }
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3720      	adds	r7, #32
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b74:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005b78:	b08e      	sub	sp, #56	; 0x38
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  PLL2_ClocksTypeDef pll2_clocks;
  PLL3_ClocksTypeDef pll3_clocks;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <UART_SetConfig+0x74>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d904      	bls.n	8005b98 <UART_SetConfig+0x24>
 8005b8e:	f640 3136 	movw	r1, #2870	; 0xb36
 8005b92:	4816      	ldr	r0, [pc, #88]	; (8005bec <UART_SetConfig+0x78>)
 8005b94:	f7fb f9a5 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba0:	d00d      	beq.n	8005bbe <UART_SetConfig+0x4a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d009      	beq.n	8005bbe <UART_SetConfig+0x4a>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb2:	d004      	beq.n	8005bbe <UART_SetConfig+0x4a>
 8005bb4:	f640 3137 	movw	r1, #2871	; 0xb37
 8005bb8:	480c      	ldr	r0, [pc, #48]	; (8005bec <UART_SetConfig+0x78>)
 8005bba:	f7fb f992 	bl	8000ee2 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a0b      	ldr	r2, [pc, #44]	; (8005bf0 <UART_SetConfig+0x7c>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d115      	bne.n	8005bf4 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d037      	beq.n	8005c40 <UART_SetConfig+0xcc>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bd8:	d032      	beq.n	8005c40 <UART_SetConfig+0xcc>
 8005bda:	f640 313a 	movw	r1, #2874	; 0xb3a
 8005bde:	4803      	ldr	r0, [pc, #12]	; (8005bec <UART_SetConfig+0x78>)
 8005be0:	f7fb f97f 	bl	8000ee2 <assert_failed>
 8005be4:	e02c      	b.n	8005c40 <UART_SetConfig+0xcc>
 8005be6:	bf00      	nop
 8005be8:	00bebc20 	.word	0x00bebc20
 8005bec:	0800a3f4 	.word	0x0800a3f4
 8005bf0:	58000c00 	.word	0x58000c00
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bfc:	d012      	beq.n	8005c24 <UART_SetConfig+0xb0>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d00e      	beq.n	8005c24 <UART_SetConfig+0xb0>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c0e:	d009      	beq.n	8005c24 <UART_SetConfig+0xb0>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c18:	d004      	beq.n	8005c24 <UART_SetConfig+0xb0>
 8005c1a:	f640 313e 	movw	r1, #2878	; 0xb3e
 8005c1e:	48aa      	ldr	r0, [pc, #680]	; (8005ec8 <UART_SetConfig+0x354>)
 8005c20:	f7fb f95f 	bl	8000ee2 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d009      	beq.n	8005c40 <UART_SetConfig+0xcc>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a1b      	ldr	r3, [r3, #32]
 8005c30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c34:	d004      	beq.n	8005c40 <UART_SetConfig+0xcc>
 8005c36:	f640 313f 	movw	r1, #2879	; 0xb3f
 8005c3a:	48a3      	ldr	r0, [pc, #652]	; (8005ec8 <UART_SetConfig+0x354>)
 8005c3c:	f7fb f951 	bl	8000ee2 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00e      	beq.n	8005c66 <UART_SetConfig+0xf2>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c50:	d009      	beq.n	8005c66 <UART_SetConfig+0xf2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005c5a:	d004      	beq.n	8005c66 <UART_SetConfig+0xf2>
 8005c5c:	f640 3142 	movw	r1, #2882	; 0xb42
 8005c60:	4899      	ldr	r0, [pc, #612]	; (8005ec8 <UART_SetConfig+0x354>)
 8005c62:	f7fb f93e 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f023 030c 	bic.w	r3, r3, #12
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <UART_SetConfig+0x106>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d104      	bne.n	8005c84 <UART_SetConfig+0x110>
 8005c7a:	f640 3143 	movw	r1, #2883	; 0xb43
 8005c7e:	4892      	ldr	r0, [pc, #584]	; (8005ec8 <UART_SetConfig+0x354>)
 8005c80:	f7fb f92f 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <UART_SetConfig+0x140>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c94:	d00e      	beq.n	8005cb4 <UART_SetConfig+0x140>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9e:	d009      	beq.n	8005cb4 <UART_SetConfig+0x140>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ca8:	d004      	beq.n	8005cb4 <UART_SetConfig+0x140>
 8005caa:	f640 3144 	movw	r1, #2884	; 0xb44
 8005cae:	4886      	ldr	r0, [pc, #536]	; (8005ec8 <UART_SetConfig+0x354>)
 8005cb0:	f7fb f917 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d009      	beq.n	8005cd0 <UART_SetConfig+0x15c>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc4:	d004      	beq.n	8005cd0 <UART_SetConfig+0x15c>
 8005cc6:	f640 3145 	movw	r1, #2885	; 0xb45
 8005cca:	487f      	ldr	r0, [pc, #508]	; (8005ec8 <UART_SetConfig+0x354>)
 8005ccc:	f7fb f909 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d030      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d02c      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d028      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d024      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b04      	cmp	r3, #4
 8005cf6:	d020      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	2b05      	cmp	r3, #5
 8005cfe:	d01c      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b06      	cmp	r3, #6
 8005d06:	d018      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	2b07      	cmp	r3, #7
 8005d0e:	d014      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d010      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	d00c      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d24:	2b0a      	cmp	r3, #10
 8005d26:	d008      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d2c:	2b0b      	cmp	r3, #11
 8005d2e:	d004      	beq.n	8005d3a <UART_SetConfig+0x1c6>
 8005d30:	f640 3146 	movw	r1, #2886	; 0xb46
 8005d34:	4864      	ldr	r0, [pc, #400]	; (8005ec8 <UART_SetConfig+0x354>)
 8005d36:	f7fb f8d4 	bl	8000ee2 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689a      	ldr	r2, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	695b      	ldr	r3, [r3, #20]
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	69db      	ldr	r3, [r3, #28]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b5a      	ldr	r3, [pc, #360]	; (8005ecc <UART_SetConfig+0x358>)
 8005d64:	4013      	ands	r3, r2
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a4f      	ldr	r2, [pc, #316]	; (8005ed0 <UART_SetConfig+0x35c>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d004      	beq.n	8005da0 <UART_SetConfig+0x22c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689a      	ldr	r2, [r3, #8]
 8005da6:	4b4b      	ldr	r3, [pc, #300]	; (8005ed4 <UART_SetConfig+0x360>)
 8005da8:	4013      	ands	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	6812      	ldr	r2, [r2, #0]
 8005dae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005db0:	430b      	orrs	r3, r1
 8005db2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dba:	f023 010f 	bic.w	r1, r3, #15
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a42      	ldr	r2, [pc, #264]	; (8005ed8 <UART_SetConfig+0x364>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	f040 8085 	bne.w	8005ee0 <UART_SetConfig+0x36c>
 8005dd6:	4b41      	ldr	r3, [pc, #260]	; (8005edc <UART_SetConfig+0x368>)
 8005dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dde:	2b28      	cmp	r3, #40	; 0x28
 8005de0:	d86c      	bhi.n	8005ebc <UART_SetConfig+0x348>
 8005de2:	a201      	add	r2, pc, #4	; (adr r2, 8005de8 <UART_SetConfig+0x274>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e8d 	.word	0x08005e8d
 8005dec:	08005ebd 	.word	0x08005ebd
 8005df0:	08005ebd 	.word	0x08005ebd
 8005df4:	08005ebd 	.word	0x08005ebd
 8005df8:	08005ebd 	.word	0x08005ebd
 8005dfc:	08005ebd 	.word	0x08005ebd
 8005e00:	08005ebd 	.word	0x08005ebd
 8005e04:	08005ebd 	.word	0x08005ebd
 8005e08:	08005e95 	.word	0x08005e95
 8005e0c:	08005ebd 	.word	0x08005ebd
 8005e10:	08005ebd 	.word	0x08005ebd
 8005e14:	08005ebd 	.word	0x08005ebd
 8005e18:	08005ebd 	.word	0x08005ebd
 8005e1c:	08005ebd 	.word	0x08005ebd
 8005e20:	08005ebd 	.word	0x08005ebd
 8005e24:	08005ebd 	.word	0x08005ebd
 8005e28:	08005e9d 	.word	0x08005e9d
 8005e2c:	08005ebd 	.word	0x08005ebd
 8005e30:	08005ebd 	.word	0x08005ebd
 8005e34:	08005ebd 	.word	0x08005ebd
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08005ebd 	.word	0x08005ebd
 8005e40:	08005ebd 	.word	0x08005ebd
 8005e44:	08005ebd 	.word	0x08005ebd
 8005e48:	08005ea5 	.word	0x08005ea5
 8005e4c:	08005ebd 	.word	0x08005ebd
 8005e50:	08005ebd 	.word	0x08005ebd
 8005e54:	08005ebd 	.word	0x08005ebd
 8005e58:	08005ebd 	.word	0x08005ebd
 8005e5c:	08005ebd 	.word	0x08005ebd
 8005e60:	08005ebd 	.word	0x08005ebd
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005ead 	.word	0x08005ead
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005ebd 	.word	0x08005ebd
 8005e74:	08005ebd 	.word	0x08005ebd
 8005e78:	08005ebd 	.word	0x08005ebd
 8005e7c:	08005ebd 	.word	0x08005ebd
 8005e80:	08005ebd 	.word	0x08005ebd
 8005e84:	08005ebd 	.word	0x08005ebd
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e92:	e23b      	b.n	800630c <UART_SetConfig+0x798>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9a:	e237      	b.n	800630c <UART_SetConfig+0x798>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea2:	e233      	b.n	800630c <UART_SetConfig+0x798>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eaa:	e22f      	b.n	800630c <UART_SetConfig+0x798>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb2:	e22b      	b.n	800630c <UART_SetConfig+0x798>
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eba:	e227      	b.n	800630c <UART_SetConfig+0x798>
 8005ebc:	2380      	movs	r3, #128	; 0x80
 8005ebe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec2:	bf00      	nop
 8005ec4:	e222      	b.n	800630c <UART_SetConfig+0x798>
 8005ec6:	bf00      	nop
 8005ec8:	0800a3f4 	.word	0x0800a3f4
 8005ecc:	cfff69f3 	.word	0xcfff69f3
 8005ed0:	58000c00 	.word	0x58000c00
 8005ed4:	11fff4ff 	.word	0x11fff4ff
 8005ed8:	40011000 	.word	0x40011000
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4ac9      	ldr	r2, [pc, #804]	; (800620c <UART_SetConfig+0x698>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d131      	bne.n	8005f4e <UART_SetConfig+0x3da>
 8005eea:	4bc9      	ldr	r3, [pc, #804]	; (8006210 <UART_SetConfig+0x69c>)
 8005eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	2b05      	cmp	r3, #5
 8005ef4:	d826      	bhi.n	8005f44 <UART_SetConfig+0x3d0>
 8005ef6:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <UART_SetConfig+0x388>)
 8005ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005efc:	08005f15 	.word	0x08005f15
 8005f00:	08005f1d 	.word	0x08005f1d
 8005f04:	08005f25 	.word	0x08005f25
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	2300      	movs	r3, #0
 8005f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1a:	e1f7      	b.n	800630c <UART_SetConfig+0x798>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f22:	e1f3      	b.n	800630c <UART_SetConfig+0x798>
 8005f24:	2308      	movs	r3, #8
 8005f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2a:	e1ef      	b.n	800630c <UART_SetConfig+0x798>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f32:	e1eb      	b.n	800630c <UART_SetConfig+0x798>
 8005f34:	2320      	movs	r3, #32
 8005f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3a:	e1e7      	b.n	800630c <UART_SetConfig+0x798>
 8005f3c:	2340      	movs	r3, #64	; 0x40
 8005f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f42:	e1e3      	b.n	800630c <UART_SetConfig+0x798>
 8005f44:	2380      	movs	r3, #128	; 0x80
 8005f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4a:	bf00      	nop
 8005f4c:	e1de      	b.n	800630c <UART_SetConfig+0x798>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4ab0      	ldr	r2, [pc, #704]	; (8006214 <UART_SetConfig+0x6a0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d132      	bne.n	8005fbe <UART_SetConfig+0x44a>
 8005f58:	4bad      	ldr	r3, [pc, #692]	; (8006210 <UART_SetConfig+0x69c>)
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	f003 0307 	and.w	r3, r3, #7
 8005f60:	2b05      	cmp	r3, #5
 8005f62:	d827      	bhi.n	8005fb4 <UART_SetConfig+0x440>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <UART_SetConfig+0x3f8>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005f85 	.word	0x08005f85
 8005f70:	08005f8d 	.word	0x08005f8d
 8005f74:	08005f95 	.word	0x08005f95
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005fa5 	.word	0x08005fa5
 8005f80:	08005fad 	.word	0x08005fad
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e1bf      	b.n	800630c <UART_SetConfig+0x798>
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f92:	e1bb      	b.n	800630c <UART_SetConfig+0x798>
 8005f94:	2308      	movs	r3, #8
 8005f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9a:	e1b7      	b.n	800630c <UART_SetConfig+0x798>
 8005f9c:	2310      	movs	r3, #16
 8005f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa2:	e1b3      	b.n	800630c <UART_SetConfig+0x798>
 8005fa4:	2320      	movs	r3, #32
 8005fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005faa:	e1af      	b.n	800630c <UART_SetConfig+0x798>
 8005fac:	2340      	movs	r3, #64	; 0x40
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb2:	e1ab      	b.n	800630c <UART_SetConfig+0x798>
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fba:	bf00      	nop
 8005fbc:	e1a6      	b.n	800630c <UART_SetConfig+0x798>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a95      	ldr	r2, [pc, #596]	; (8006218 <UART_SetConfig+0x6a4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d132      	bne.n	800602e <UART_SetConfig+0x4ba>
 8005fc8:	4b91      	ldr	r3, [pc, #580]	; (8006210 <UART_SetConfig+0x69c>)
 8005fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fcc:	f003 0307 	and.w	r3, r3, #7
 8005fd0:	2b05      	cmp	r3, #5
 8005fd2:	d827      	bhi.n	8006024 <UART_SetConfig+0x4b0>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x468>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08005ff5 	.word	0x08005ff5
 8005fe0:	08005ffd 	.word	0x08005ffd
 8005fe4:	08006005 	.word	0x08006005
 8005fe8:	0800600d 	.word	0x0800600d
 8005fec:	08006015 	.word	0x08006015
 8005ff0:	0800601d 	.word	0x0800601d
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffa:	e187      	b.n	800630c <UART_SetConfig+0x798>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006002:	e183      	b.n	800630c <UART_SetConfig+0x798>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600a:	e17f      	b.n	800630c <UART_SetConfig+0x798>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006012:	e17b      	b.n	800630c <UART_SetConfig+0x798>
 8006014:	2320      	movs	r3, #32
 8006016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601a:	e177      	b.n	800630c <UART_SetConfig+0x798>
 800601c:	2340      	movs	r3, #64	; 0x40
 800601e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006022:	e173      	b.n	800630c <UART_SetConfig+0x798>
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602a:	bf00      	nop
 800602c:	e16e      	b.n	800630c <UART_SetConfig+0x798>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7a      	ldr	r2, [pc, #488]	; (800621c <UART_SetConfig+0x6a8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d132      	bne.n	800609e <UART_SetConfig+0x52a>
 8006038:	4b75      	ldr	r3, [pc, #468]	; (8006210 <UART_SetConfig+0x69c>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f003 0307 	and.w	r3, r3, #7
 8006040:	2b05      	cmp	r3, #5
 8006042:	d827      	bhi.n	8006094 <UART_SetConfig+0x520>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <UART_SetConfig+0x4d8>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	08006065 	.word	0x08006065
 8006050:	0800606d 	.word	0x0800606d
 8006054:	08006075 	.word	0x08006075
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	2300      	movs	r3, #0
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	e14f      	b.n	800630c <UART_SetConfig+0x798>
 800606c:	2304      	movs	r3, #4
 800606e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006072:	e14b      	b.n	800630c <UART_SetConfig+0x798>
 8006074:	2308      	movs	r3, #8
 8006076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607a:	e147      	b.n	800630c <UART_SetConfig+0x798>
 800607c:	2310      	movs	r3, #16
 800607e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006082:	e143      	b.n	800630c <UART_SetConfig+0x798>
 8006084:	2320      	movs	r3, #32
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e13f      	b.n	800630c <UART_SetConfig+0x798>
 800608c:	2340      	movs	r3, #64	; 0x40
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	e13b      	b.n	800630c <UART_SetConfig+0x798>
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	bf00      	nop
 800609c:	e136      	b.n	800630c <UART_SetConfig+0x798>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a5f      	ldr	r2, [pc, #380]	; (8006220 <UART_SetConfig+0x6ac>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d178      	bne.n	800619a <UART_SetConfig+0x626>
 80060a8:	4b59      	ldr	r3, [pc, #356]	; (8006210 <UART_SetConfig+0x69c>)
 80060aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060b0:	2b28      	cmp	r3, #40	; 0x28
 80060b2:	d86d      	bhi.n	8006190 <UART_SetConfig+0x61c>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x548>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	08006161 	.word	0x08006161
 80060c0:	08006191 	.word	0x08006191
 80060c4:	08006191 	.word	0x08006191
 80060c8:	08006191 	.word	0x08006191
 80060cc:	08006191 	.word	0x08006191
 80060d0:	08006191 	.word	0x08006191
 80060d4:	08006191 	.word	0x08006191
 80060d8:	08006191 	.word	0x08006191
 80060dc:	08006169 	.word	0x08006169
 80060e0:	08006191 	.word	0x08006191
 80060e4:	08006191 	.word	0x08006191
 80060e8:	08006191 	.word	0x08006191
 80060ec:	08006191 	.word	0x08006191
 80060f0:	08006191 	.word	0x08006191
 80060f4:	08006191 	.word	0x08006191
 80060f8:	08006191 	.word	0x08006191
 80060fc:	08006171 	.word	0x08006171
 8006100:	08006191 	.word	0x08006191
 8006104:	08006191 	.word	0x08006191
 8006108:	08006191 	.word	0x08006191
 800610c:	08006191 	.word	0x08006191
 8006110:	08006191 	.word	0x08006191
 8006114:	08006191 	.word	0x08006191
 8006118:	08006191 	.word	0x08006191
 800611c:	08006179 	.word	0x08006179
 8006120:	08006191 	.word	0x08006191
 8006124:	08006191 	.word	0x08006191
 8006128:	08006191 	.word	0x08006191
 800612c:	08006191 	.word	0x08006191
 8006130:	08006191 	.word	0x08006191
 8006134:	08006191 	.word	0x08006191
 8006138:	08006191 	.word	0x08006191
 800613c:	08006181 	.word	0x08006181
 8006140:	08006191 	.word	0x08006191
 8006144:	08006191 	.word	0x08006191
 8006148:	08006191 	.word	0x08006191
 800614c:	08006191 	.word	0x08006191
 8006150:	08006191 	.word	0x08006191
 8006154:	08006191 	.word	0x08006191
 8006158:	08006191 	.word	0x08006191
 800615c:	08006189 	.word	0x08006189
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006166:	e0d1      	b.n	800630c <UART_SetConfig+0x798>
 8006168:	2304      	movs	r3, #4
 800616a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616e:	e0cd      	b.n	800630c <UART_SetConfig+0x798>
 8006170:	2308      	movs	r3, #8
 8006172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006176:	e0c9      	b.n	800630c <UART_SetConfig+0x798>
 8006178:	2310      	movs	r3, #16
 800617a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617e:	e0c5      	b.n	800630c <UART_SetConfig+0x798>
 8006180:	2320      	movs	r3, #32
 8006182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006186:	e0c1      	b.n	800630c <UART_SetConfig+0x798>
 8006188:	2340      	movs	r3, #64	; 0x40
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800618e:	e0bd      	b.n	800630c <UART_SetConfig+0x798>
 8006190:	2380      	movs	r3, #128	; 0x80
 8006192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006196:	bf00      	nop
 8006198:	e0b8      	b.n	800630c <UART_SetConfig+0x798>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a21      	ldr	r2, [pc, #132]	; (8006224 <UART_SetConfig+0x6b0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d141      	bne.n	8006228 <UART_SetConfig+0x6b4>
 80061a4:	4b1a      	ldr	r3, [pc, #104]	; (8006210 <UART_SetConfig+0x69c>)
 80061a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	2b05      	cmp	r3, #5
 80061ae:	d827      	bhi.n	8006200 <UART_SetConfig+0x68c>
 80061b0:	a201      	add	r2, pc, #4	; (adr r2, 80061b8 <UART_SetConfig+0x644>)
 80061b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b6:	bf00      	nop
 80061b8:	080061d1 	.word	0x080061d1
 80061bc:	080061d9 	.word	0x080061d9
 80061c0:	080061e1 	.word	0x080061e1
 80061c4:	080061e9 	.word	0x080061e9
 80061c8:	080061f1 	.word	0x080061f1
 80061cc:	080061f9 	.word	0x080061f9
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d6:	e099      	b.n	800630c <UART_SetConfig+0x798>
 80061d8:	2304      	movs	r3, #4
 80061da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061de:	e095      	b.n	800630c <UART_SetConfig+0x798>
 80061e0:	2308      	movs	r3, #8
 80061e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e6:	e091      	b.n	800630c <UART_SetConfig+0x798>
 80061e8:	2310      	movs	r3, #16
 80061ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ee:	e08d      	b.n	800630c <UART_SetConfig+0x798>
 80061f0:	2320      	movs	r3, #32
 80061f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f6:	e089      	b.n	800630c <UART_SetConfig+0x798>
 80061f8:	2340      	movs	r3, #64	; 0x40
 80061fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061fe:	e085      	b.n	800630c <UART_SetConfig+0x798>
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006206:	bf00      	nop
 8006208:	e080      	b.n	800630c <UART_SetConfig+0x798>
 800620a:	bf00      	nop
 800620c:	40004400 	.word	0x40004400
 8006210:	58024400 	.word	0x58024400
 8006214:	40004800 	.word	0x40004800
 8006218:	40004c00 	.word	0x40004c00
 800621c:	40005000 	.word	0x40005000
 8006220:	40011400 	.word	0x40011400
 8006224:	40007800 	.word	0x40007800
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a8f      	ldr	r2, [pc, #572]	; (800646c <UART_SetConfig+0x8f8>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d131      	bne.n	8006296 <UART_SetConfig+0x722>
 8006232:	4b8f      	ldr	r3, [pc, #572]	; (8006470 <UART_SetConfig+0x8fc>)
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	2b05      	cmp	r3, #5
 800623c:	d826      	bhi.n	800628c <UART_SetConfig+0x718>
 800623e:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x6d0>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	0800625d 	.word	0x0800625d
 8006248:	08006265 	.word	0x08006265
 800624c:	0800626d 	.word	0x0800626d
 8006250:	08006275 	.word	0x08006275
 8006254:	0800627d 	.word	0x0800627d
 8006258:	08006285 	.word	0x08006285
 800625c:	2300      	movs	r3, #0
 800625e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006262:	e053      	b.n	800630c <UART_SetConfig+0x798>
 8006264:	2304      	movs	r3, #4
 8006266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800626a:	e04f      	b.n	800630c <UART_SetConfig+0x798>
 800626c:	2308      	movs	r3, #8
 800626e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006272:	e04b      	b.n	800630c <UART_SetConfig+0x798>
 8006274:	2310      	movs	r3, #16
 8006276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627a:	e047      	b.n	800630c <UART_SetConfig+0x798>
 800627c:	2320      	movs	r3, #32
 800627e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006282:	e043      	b.n	800630c <UART_SetConfig+0x798>
 8006284:	2340      	movs	r3, #64	; 0x40
 8006286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628a:	e03f      	b.n	800630c <UART_SetConfig+0x798>
 800628c:	2380      	movs	r3, #128	; 0x80
 800628e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006292:	bf00      	nop
 8006294:	e03a      	b.n	800630c <UART_SetConfig+0x798>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a76      	ldr	r2, [pc, #472]	; (8006474 <UART_SetConfig+0x900>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d132      	bne.n	8006306 <UART_SetConfig+0x792>
 80062a0:	4b73      	ldr	r3, [pc, #460]	; (8006470 <UART_SetConfig+0x8fc>)
 80062a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	2b05      	cmp	r3, #5
 80062aa:	d827      	bhi.n	80062fc <UART_SetConfig+0x788>
 80062ac:	a201      	add	r2, pc, #4	; (adr r2, 80062b4 <UART_SetConfig+0x740>)
 80062ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b2:	bf00      	nop
 80062b4:	080062cd 	.word	0x080062cd
 80062b8:	080062d5 	.word	0x080062d5
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062e5 	.word	0x080062e5
 80062c4:	080062ed 	.word	0x080062ed
 80062c8:	080062f5 	.word	0x080062f5
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062d2:	e01b      	b.n	800630c <UART_SetConfig+0x798>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062da:	e017      	b.n	800630c <UART_SetConfig+0x798>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062e2:	e013      	b.n	800630c <UART_SetConfig+0x798>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ea:	e00f      	b.n	800630c <UART_SetConfig+0x798>
 80062ec:	2320      	movs	r3, #32
 80062ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062f2:	e00b      	b.n	800630c <UART_SetConfig+0x798>
 80062f4:	2340      	movs	r3, #64	; 0x40
 80062f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062fa:	e007      	b.n	800630c <UART_SetConfig+0x798>
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006302:	bf00      	nop
 8006304:	e002      	b.n	800630c <UART_SetConfig+0x798>
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a58      	ldr	r2, [pc, #352]	; (8006474 <UART_SetConfig+0x900>)
 8006312:	4293      	cmp	r3, r2
 8006314:	f040 80b6 	bne.w	8006484 <UART_SetConfig+0x910>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006318:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800631c:	2b08      	cmp	r3, #8
 800631e:	d019      	beq.n	8006354 <UART_SetConfig+0x7e0>
 8006320:	2b08      	cmp	r3, #8
 8006322:	dc04      	bgt.n	800632e <UART_SetConfig+0x7ba>
 8006324:	2b02      	cmp	r3, #2
 8006326:	d009      	beq.n	800633c <UART_SetConfig+0x7c8>
 8006328:	2b04      	cmp	r3, #4
 800632a:	d00b      	beq.n	8006344 <UART_SetConfig+0x7d0>
 800632c:	e034      	b.n	8006398 <UART_SetConfig+0x824>
 800632e:	2b20      	cmp	r3, #32
 8006330:	d02b      	beq.n	800638a <UART_SetConfig+0x816>
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d02c      	beq.n	8006390 <UART_SetConfig+0x81c>
 8006336:	2b10      	cmp	r3, #16
 8006338:	d014      	beq.n	8006364 <UART_SetConfig+0x7f0>
 800633a:	e02d      	b.n	8006398 <UART_SetConfig+0x824>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800633c:	f7fe fa22 	bl	8004784 <HAL_RCCEx_GetD3PCLK1Freq>
 8006340:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006342:	e02f      	b.n	80063a4 <UART_SetConfig+0x830>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006344:	f107 0314 	add.w	r3, r7, #20
 8006348:	4618      	mov	r0, r3
 800634a:	f7fe fa31 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006352:	e027      	b.n	80063a4 <UART_SetConfig+0x830>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006354:	f107 0308 	add.w	r3, r7, #8
 8006358:	4618      	mov	r0, r3
 800635a:	f7fe fb75 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006362:	e01f      	b.n	80063a4 <UART_SetConfig+0x830>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006364:	4b42      	ldr	r3, [pc, #264]	; (8006470 <UART_SetConfig+0x8fc>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0320 	and.w	r3, r3, #32
 800636c:	2b00      	cmp	r3, #0
 800636e:	d009      	beq.n	8006384 <UART_SetConfig+0x810>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006370:	4b3f      	ldr	r3, [pc, #252]	; (8006470 <UART_SetConfig+0x8fc>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	08db      	lsrs	r3, r3, #3
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	4a3f      	ldr	r2, [pc, #252]	; (8006478 <UART_SetConfig+0x904>)
 800637c:	fa22 f303 	lsr.w	r3, r2, r3
 8006380:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006382:	e00f      	b.n	80063a4 <UART_SetConfig+0x830>
          pclk = (uint32_t) HSI_VALUE;
 8006384:	4b3c      	ldr	r3, [pc, #240]	; (8006478 <UART_SetConfig+0x904>)
 8006386:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006388:	e00c      	b.n	80063a4 <UART_SetConfig+0x830>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800638a:	4b3c      	ldr	r3, [pc, #240]	; (800647c <UART_SetConfig+0x908>)
 800638c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800638e:	e009      	b.n	80063a4 <UART_SetConfig+0x830>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006390:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006396:	e005      	b.n	80063a4 <UART_SetConfig+0x830>
      default:
        pclk = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80063a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 8251 	beq.w	800684e <UART_SetConfig+0xcda>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	4a33      	ldr	r2, [pc, #204]	; (8006480 <UART_SetConfig+0x90c>)
 80063b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063b6:	461a      	mov	r2, r3
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80063be:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d305      	bcc.n	80063dc <UART_SetConfig+0x868>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063d6:	6a3a      	ldr	r2, [r7, #32]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d903      	bls.n	80063e4 <UART_SetConfig+0x870>
      {
        ret = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80063e2:	e234      	b.n	800684e <UART_SetConfig+0xcda>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	4618      	mov	r0, r3
 80063e8:	f04f 0100 	mov.w	r1, #0
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <UART_SetConfig+0x90c>)
 80063f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	f04f 0400 	mov.w	r4, #0
 80063fc:	461a      	mov	r2, r3
 80063fe:	4623      	mov	r3, r4
 8006400:	f7fa f892 	bl	8000528 <__aeabi_uldivmod>
 8006404:	4603      	mov	r3, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4619      	mov	r1, r3
 800640a:	4622      	mov	r2, r4
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	f04f 0400 	mov.w	r4, #0
 8006414:	0214      	lsls	r4, r2, #8
 8006416:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800641a:	020b      	lsls	r3, r1, #8
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	6852      	ldr	r2, [r2, #4]
 8006420:	0852      	lsrs	r2, r2, #1
 8006422:	4611      	mov	r1, r2
 8006424:	f04f 0200 	mov.w	r2, #0
 8006428:	eb13 0b01 	adds.w	fp, r3, r1
 800642c:	eb44 0c02 	adc.w	ip, r4, r2
 8006430:	4658      	mov	r0, fp
 8006432:	4661      	mov	r1, ip
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f04f 0400 	mov.w	r4, #0
 800643c:	461a      	mov	r2, r3
 800643e:	4623      	mov	r3, r4
 8006440:	f7fa f872 	bl	8000528 <__aeabi_uldivmod>
 8006444:	4603      	mov	r3, r0
 8006446:	460c      	mov	r4, r1
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006450:	d308      	bcc.n	8006464 <UART_SetConfig+0x8f0>
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006458:	d204      	bcs.n	8006464 <UART_SetConfig+0x8f0>
        {
          huart->Instance->BRR = usartdiv;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006460:	60da      	str	r2, [r3, #12]
 8006462:	e1f4      	b.n	800684e <UART_SetConfig+0xcda>
        }
        else
        {
          ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800646a:	e1f0      	b.n	800684e <UART_SetConfig+0xcda>
 800646c:	40007c00 	.word	0x40007c00
 8006470:	58024400 	.word	0x58024400
 8006474:	58000c00 	.word	0x58000c00
 8006478:	03d09000 	.word	0x03d09000
 800647c:	003d0900 	.word	0x003d0900
 8006480:	0800a534 	.word	0x0800a534
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648c:	f040 80f8 	bne.w	8006680 <UART_SetConfig+0xb0c>
  {
    switch (clocksource)
 8006490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006494:	2b40      	cmp	r3, #64	; 0x40
 8006496:	f200 80b7 	bhi.w	8006608 <UART_SetConfig+0xa94>
 800649a:	a201      	add	r2, pc, #4	; (adr r2, 80064a0 <UART_SetConfig+0x92c>)
 800649c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a0:	080065a5 	.word	0x080065a5
 80064a4:	080065ad 	.word	0x080065ad
 80064a8:	08006609 	.word	0x08006609
 80064ac:	08006609 	.word	0x08006609
 80064b0:	080065b5 	.word	0x080065b5
 80064b4:	08006609 	.word	0x08006609
 80064b8:	08006609 	.word	0x08006609
 80064bc:	08006609 	.word	0x08006609
 80064c0:	080065c5 	.word	0x080065c5
 80064c4:	08006609 	.word	0x08006609
 80064c8:	08006609 	.word	0x08006609
 80064cc:	08006609 	.word	0x08006609
 80064d0:	08006609 	.word	0x08006609
 80064d4:	08006609 	.word	0x08006609
 80064d8:	08006609 	.word	0x08006609
 80064dc:	08006609 	.word	0x08006609
 80064e0:	080065d5 	.word	0x080065d5
 80064e4:	08006609 	.word	0x08006609
 80064e8:	08006609 	.word	0x08006609
 80064ec:	08006609 	.word	0x08006609
 80064f0:	08006609 	.word	0x08006609
 80064f4:	08006609 	.word	0x08006609
 80064f8:	08006609 	.word	0x08006609
 80064fc:	08006609 	.word	0x08006609
 8006500:	08006609 	.word	0x08006609
 8006504:	08006609 	.word	0x08006609
 8006508:	08006609 	.word	0x08006609
 800650c:	08006609 	.word	0x08006609
 8006510:	08006609 	.word	0x08006609
 8006514:	08006609 	.word	0x08006609
 8006518:	08006609 	.word	0x08006609
 800651c:	08006609 	.word	0x08006609
 8006520:	080065fb 	.word	0x080065fb
 8006524:	08006609 	.word	0x08006609
 8006528:	08006609 	.word	0x08006609
 800652c:	08006609 	.word	0x08006609
 8006530:	08006609 	.word	0x08006609
 8006534:	08006609 	.word	0x08006609
 8006538:	08006609 	.word	0x08006609
 800653c:	08006609 	.word	0x08006609
 8006540:	08006609 	.word	0x08006609
 8006544:	08006609 	.word	0x08006609
 8006548:	08006609 	.word	0x08006609
 800654c:	08006609 	.word	0x08006609
 8006550:	08006609 	.word	0x08006609
 8006554:	08006609 	.word	0x08006609
 8006558:	08006609 	.word	0x08006609
 800655c:	08006609 	.word	0x08006609
 8006560:	08006609 	.word	0x08006609
 8006564:	08006609 	.word	0x08006609
 8006568:	08006609 	.word	0x08006609
 800656c:	08006609 	.word	0x08006609
 8006570:	08006609 	.word	0x08006609
 8006574:	08006609 	.word	0x08006609
 8006578:	08006609 	.word	0x08006609
 800657c:	08006609 	.word	0x08006609
 8006580:	08006609 	.word	0x08006609
 8006584:	08006609 	.word	0x08006609
 8006588:	08006609 	.word	0x08006609
 800658c:	08006609 	.word	0x08006609
 8006590:	08006609 	.word	0x08006609
 8006594:	08006609 	.word	0x08006609
 8006598:	08006609 	.word	0x08006609
 800659c:	08006609 	.word	0x08006609
 80065a0:	08006601 	.word	0x08006601
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a4:	f7fc fee0 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 80065a8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065aa:	e033      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7fc fef2 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80065b0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065b2:	e02f      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065b4:	f107 0314 	add.w	r3, r7, #20
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7fe f8f9 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065c2:	e027      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065c4:	f107 0308 	add.w	r3, r7, #8
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fe fa3d 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d2:	e01f      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065d4:	4ba8      	ldr	r3, [pc, #672]	; (8006878 <UART_SetConfig+0xd04>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0320 	and.w	r3, r3, #32
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <UART_SetConfig+0xa80>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065e0:	4ba5      	ldr	r3, [pc, #660]	; (8006878 <UART_SetConfig+0xd04>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	08db      	lsrs	r3, r3, #3
 80065e6:	f003 0303 	and.w	r3, r3, #3
 80065ea:	4aa4      	ldr	r2, [pc, #656]	; (800687c <UART_SetConfig+0xd08>)
 80065ec:	fa22 f303 	lsr.w	r3, r2, r3
 80065f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f2:	e00f      	b.n	8006614 <UART_SetConfig+0xaa0>
          pclk = (uint32_t) HSI_VALUE;
 80065f4:	4ba1      	ldr	r3, [pc, #644]	; (800687c <UART_SetConfig+0xd08>)
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f8:	e00c      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065fa:	4ba1      	ldr	r3, [pc, #644]	; (8006880 <UART_SetConfig+0xd0c>)
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065fe:	e009      	b.n	8006614 <UART_SetConfig+0xaa0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006606:	e005      	b.n	8006614 <UART_SetConfig+0xaa0>
      default:
        pclk = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006612:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 8119 	beq.w	800684e <UART_SetConfig+0xcda>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	4a98      	ldr	r2, [pc, #608]	; (8006884 <UART_SetConfig+0xd10>)
 8006622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006626:	461a      	mov	r2, r3
 8006628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800662a:	fbb3 f3f2 	udiv	r3, r3, r2
 800662e:	005a      	lsls	r2, r3, #1
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	085b      	lsrs	r3, r3, #1
 8006636:	441a      	add	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006640:	b29b      	uxth	r3, r3
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b0f      	cmp	r3, #15
 8006648:	d916      	bls.n	8006678 <UART_SetConfig+0xb04>
 800664a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800664c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006650:	d212      	bcs.n	8006678 <UART_SetConfig+0xb04>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	b29b      	uxth	r3, r3
 8006656:	f023 030f 	bic.w	r3, r3, #15
 800665a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	085b      	lsrs	r3, r3, #1
 8006660:	b29b      	uxth	r3, r3
 8006662:	f003 0307 	and.w	r3, r3, #7
 8006666:	b29a      	uxth	r2, r3
 8006668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800666a:	4313      	orrs	r3, r2
 800666c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006674:	60da      	str	r2, [r3, #12]
 8006676:	e0ea      	b.n	800684e <UART_SetConfig+0xcda>
      }
      else
      {
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800667e:	e0e6      	b.n	800684e <UART_SetConfig+0xcda>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006680:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006684:	2b40      	cmp	r3, #64	; 0x40
 8006686:	f200 80b7 	bhi.w	80067f8 <UART_SetConfig+0xc84>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <UART_SetConfig+0xb1c>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	08006795 	.word	0x08006795
 8006694:	0800679d 	.word	0x0800679d
 8006698:	080067f9 	.word	0x080067f9
 800669c:	080067f9 	.word	0x080067f9
 80066a0:	080067a5 	.word	0x080067a5
 80066a4:	080067f9 	.word	0x080067f9
 80066a8:	080067f9 	.word	0x080067f9
 80066ac:	080067f9 	.word	0x080067f9
 80066b0:	080067b5 	.word	0x080067b5
 80066b4:	080067f9 	.word	0x080067f9
 80066b8:	080067f9 	.word	0x080067f9
 80066bc:	080067f9 	.word	0x080067f9
 80066c0:	080067f9 	.word	0x080067f9
 80066c4:	080067f9 	.word	0x080067f9
 80066c8:	080067f9 	.word	0x080067f9
 80066cc:	080067f9 	.word	0x080067f9
 80066d0:	080067c5 	.word	0x080067c5
 80066d4:	080067f9 	.word	0x080067f9
 80066d8:	080067f9 	.word	0x080067f9
 80066dc:	080067f9 	.word	0x080067f9
 80066e0:	080067f9 	.word	0x080067f9
 80066e4:	080067f9 	.word	0x080067f9
 80066e8:	080067f9 	.word	0x080067f9
 80066ec:	080067f9 	.word	0x080067f9
 80066f0:	080067f9 	.word	0x080067f9
 80066f4:	080067f9 	.word	0x080067f9
 80066f8:	080067f9 	.word	0x080067f9
 80066fc:	080067f9 	.word	0x080067f9
 8006700:	080067f9 	.word	0x080067f9
 8006704:	080067f9 	.word	0x080067f9
 8006708:	080067f9 	.word	0x080067f9
 800670c:	080067f9 	.word	0x080067f9
 8006710:	080067eb 	.word	0x080067eb
 8006714:	080067f9 	.word	0x080067f9
 8006718:	080067f9 	.word	0x080067f9
 800671c:	080067f9 	.word	0x080067f9
 8006720:	080067f9 	.word	0x080067f9
 8006724:	080067f9 	.word	0x080067f9
 8006728:	080067f9 	.word	0x080067f9
 800672c:	080067f9 	.word	0x080067f9
 8006730:	080067f9 	.word	0x080067f9
 8006734:	080067f9 	.word	0x080067f9
 8006738:	080067f9 	.word	0x080067f9
 800673c:	080067f9 	.word	0x080067f9
 8006740:	080067f9 	.word	0x080067f9
 8006744:	080067f9 	.word	0x080067f9
 8006748:	080067f9 	.word	0x080067f9
 800674c:	080067f9 	.word	0x080067f9
 8006750:	080067f9 	.word	0x080067f9
 8006754:	080067f9 	.word	0x080067f9
 8006758:	080067f9 	.word	0x080067f9
 800675c:	080067f9 	.word	0x080067f9
 8006760:	080067f9 	.word	0x080067f9
 8006764:	080067f9 	.word	0x080067f9
 8006768:	080067f9 	.word	0x080067f9
 800676c:	080067f9 	.word	0x080067f9
 8006770:	080067f9 	.word	0x080067f9
 8006774:	080067f9 	.word	0x080067f9
 8006778:	080067f9 	.word	0x080067f9
 800677c:	080067f9 	.word	0x080067f9
 8006780:	080067f9 	.word	0x080067f9
 8006784:	080067f9 	.word	0x080067f9
 8006788:	080067f9 	.word	0x080067f9
 800678c:	080067f9 	.word	0x080067f9
 8006790:	080067f1 	.word	0x080067f1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006794:	f7fc fde8 	bl	8003368 <HAL_RCC_GetPCLK1Freq>
 8006798:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800679a:	e033      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800679c:	f7fc fdfa 	bl	8003394 <HAL_RCC_GetPCLK2Freq>
 80067a0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80067a2:	e02f      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80067a4:	f107 0314 	add.w	r3, r7, #20
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7fe f801 	bl	80047b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067b2:	e027      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067b4:	f107 0308 	add.w	r3, r7, #8
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe f945 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c2:	e01f      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067c4:	4b2c      	ldr	r3, [pc, #176]	; (8006878 <UART_SetConfig+0xd04>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0320 	and.w	r3, r3, #32
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d009      	beq.n	80067e4 <UART_SetConfig+0xc70>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067d0:	4b29      	ldr	r3, [pc, #164]	; (8006878 <UART_SetConfig+0xd04>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	08db      	lsrs	r3, r3, #3
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	4a28      	ldr	r2, [pc, #160]	; (800687c <UART_SetConfig+0xd08>)
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067e2:	e00f      	b.n	8006804 <UART_SetConfig+0xc90>
          pclk = (uint32_t) HSI_VALUE;
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <UART_SetConfig+0xd08>)
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067e8:	e00c      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067ea:	4b25      	ldr	r3, [pc, #148]	; (8006880 <UART_SetConfig+0xd0c>)
 80067ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ee:	e009      	b.n	8006804 <UART_SetConfig+0xc90>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067f6:	e005      	b.n	8006804 <UART_SetConfig+0xc90>
      default:
        pclk = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006802:	bf00      	nop
    }

    if (pclk != 0U)
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d021      	beq.n	800684e <UART_SetConfig+0xcda>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680e:	4a1d      	ldr	r2, [pc, #116]	; (8006884 <UART_SetConfig+0xd10>)
 8006810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006814:	461a      	mov	r2, r3
 8006816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006818:	fbb3 f2f2 	udiv	r2, r3, r2
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	085b      	lsrs	r3, r3, #1
 8006822:	441a      	add	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	fbb2 f3f3 	udiv	r3, r2, r3
 800682c:	b29b      	uxth	r3, r3
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d908      	bls.n	8006848 <UART_SetConfig+0xcd4>
 8006836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800683c:	d204      	bcs.n	8006848 <UART_SetConfig+0xcd4>
      {
        huart->Instance->BRR = usartdiv;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006844:	60da      	str	r2, [r3, #12]
 8006846:	e002      	b.n	800684e <UART_SetConfig+0xcda>
      }
      else
      {
        ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800686a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800686e:	4618      	mov	r0, r3
 8006870:	3738      	adds	r7, #56	; 0x38
 8006872:	46bd      	mov	sp, r7
 8006874:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006878:	58024400 	.word	0x58024400
 800687c:	03d09000 	.word	0x03d09000
 8006880:	003d0900 	.word	0x003d0900
 8006884:	0800a534 	.word	0x0800a534

08006888 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006894:	2bff      	cmp	r3, #255	; 0xff
 8006896:	d904      	bls.n	80068a2 <UART_AdvFeatureConfig+0x1a>
 8006898:	f640 4134 	movw	r1, #3124	; 0xc34
 800689c:	4899      	ldr	r0, [pc, #612]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 800689e:	f7fa fb20 	bl	8000ee2 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d018      	beq.n	80068e0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d009      	beq.n	80068ca <UART_AdvFeatureConfig+0x42>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068be:	d004      	beq.n	80068ca <UART_AdvFeatureConfig+0x42>
 80068c0:	f640 4139 	movw	r1, #3129	; 0xc39
 80068c4:	488f      	ldr	r0, [pc, #572]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 80068c6:	f7fa fb0c 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d018      	beq.n	800691e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d009      	beq.n	8006908 <UART_AdvFeatureConfig+0x80>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068fc:	d004      	beq.n	8006908 <UART_AdvFeatureConfig+0x80>
 80068fe:	f44f 6144 	mov.w	r1, #3136	; 0xc40
 8006902:	4880      	ldr	r0, [pc, #512]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006904:	f7fa faed 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d018      	beq.n	800695c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <UART_AdvFeatureConfig+0xbe>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800693a:	d004      	beq.n	8006946 <UART_AdvFeatureConfig+0xbe>
 800693c:	f640 4147 	movw	r1, #3143	; 0xc47
 8006940:	4870      	ldr	r0, [pc, #448]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006942:	f7fa face 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	430a      	orrs	r2, r1
 800695a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006960:	f003 0308 	and.w	r3, r3, #8
 8006964:	2b00      	cmp	r3, #0
 8006966:	d018      	beq.n	800699a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <UART_AdvFeatureConfig+0xfc>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006978:	d004      	beq.n	8006984 <UART_AdvFeatureConfig+0xfc>
 800697a:	f640 414e 	movw	r1, #3150	; 0xc4e
 800697e:	4861      	ldr	r0, [pc, #388]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006980:	f7fa faaf 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d018      	beq.n	80069d8 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d009      	beq.n	80069c2 <UART_AdvFeatureConfig+0x13a>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069b6:	d004      	beq.n	80069c2 <UART_AdvFeatureConfig+0x13a>
 80069b8:	f640 4155 	movw	r1, #3157	; 0xc55
 80069bc:	4851      	ldr	r0, [pc, #324]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 80069be:	f7fa fa90 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f003 0320 	and.w	r3, r3, #32
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d018      	beq.n	8006a16 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d009      	beq.n	8006a00 <UART_AdvFeatureConfig+0x178>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d004      	beq.n	8006a00 <UART_AdvFeatureConfig+0x178>
 80069f6:	f640 415c 	movw	r1, #3164	; 0xc5c
 80069fa:	4842      	ldr	r0, [pc, #264]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 80069fc:	f7fa fa71 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 8082 	beq.w	8006b28 <UART_AdvFeatureConfig+0x2a0>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a37      	ldr	r2, [pc, #220]	; (8006b08 <UART_AdvFeatureConfig+0x280>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d027      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a36      	ldr	r2, [pc, #216]	; (8006b0c <UART_AdvFeatureConfig+0x284>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d022      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a34      	ldr	r2, [pc, #208]	; (8006b10 <UART_AdvFeatureConfig+0x288>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d01d      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a33      	ldr	r2, [pc, #204]	; (8006b14 <UART_AdvFeatureConfig+0x28c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d018      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a31      	ldr	r2, [pc, #196]	; (8006b18 <UART_AdvFeatureConfig+0x290>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d013      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a30      	ldr	r2, [pc, #192]	; (8006b1c <UART_AdvFeatureConfig+0x294>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d00e      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2e      	ldr	r2, [pc, #184]	; (8006b20 <UART_AdvFeatureConfig+0x298>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d009      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2d      	ldr	r2, [pc, #180]	; (8006b24 <UART_AdvFeatureConfig+0x29c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d004      	beq.n	8006a7e <UART_AdvFeatureConfig+0x1f6>
 8006a74:	f640 4163 	movw	r1, #3171	; 0xc63
 8006a78:	4822      	ldr	r0, [pc, #136]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006a7a:	f7fa fa32 	bl	8000ee2 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d009      	beq.n	8006a9a <UART_AdvFeatureConfig+0x212>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8e:	d004      	beq.n	8006a9a <UART_AdvFeatureConfig+0x212>
 8006a90:	f640 4164 	movw	r1, #3172	; 0xc64
 8006a94:	481b      	ldr	r0, [pc, #108]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006a96:	f7fa fa24 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ab8:	d136      	bne.n	8006b28 <UART_AdvFeatureConfig+0x2a0>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <UART_AdvFeatureConfig+0x262>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ac6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006aca:	d00e      	beq.n	8006aea <UART_AdvFeatureConfig+0x262>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad4:	d009      	beq.n	8006aea <UART_AdvFeatureConfig+0x262>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ada:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006ade:	d004      	beq.n	8006aea <UART_AdvFeatureConfig+0x262>
 8006ae0:	f640 4169 	movw	r1, #3177	; 0xc69
 8006ae4:	4807      	ldr	r0, [pc, #28]	; (8006b04 <UART_AdvFeatureConfig+0x27c>)
 8006ae6:	f7fa f9fc 	bl	8000ee2 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	605a      	str	r2, [r3, #4]
 8006b00:	e012      	b.n	8006b28 <UART_AdvFeatureConfig+0x2a0>
 8006b02:	bf00      	nop
 8006b04:	0800a3f4 	.word	0x0800a3f4
 8006b08:	40011000 	.word	0x40011000
 8006b0c:	40004400 	.word	0x40004400
 8006b10:	40004800 	.word	0x40004800
 8006b14:	40004c00 	.word	0x40004c00
 8006b18:	40005000 	.word	0x40005000
 8006b1c:	40011400 	.word	0x40011400
 8006b20:	40007800 	.word	0x40007800
 8006b24:	40007c00 	.word	0x40007c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d018      	beq.n	8006b66 <UART_AdvFeatureConfig+0x2de>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d009      	beq.n	8006b50 <UART_AdvFeatureConfig+0x2c8>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006b44:	d004      	beq.n	8006b50 <UART_AdvFeatureConfig+0x2c8>
 8006b46:	f640 4171 	movw	r1, #3185	; 0xc71
 8006b4a:	4809      	ldr	r0, [pc, #36]	; (8006b70 <UART_AdvFeatureConfig+0x2e8>)
 8006b4c:	f7fa f9c9 	bl	8000ee2 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  }
}
 8006b66:	bf00      	nop
 8006b68:	3708      	adds	r7, #8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	0800a3f4 	.word	0x0800a3f4

08006b74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b086      	sub	sp, #24
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006b84:	f7fa fcca 	bl	800151c <HAL_GetTick>
 8006b88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0308 	and.w	r3, r3, #8
 8006b94:	2b08      	cmp	r3, #8
 8006b96:	d10e      	bne.n	8006bb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f82c 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e022      	b.n	8006bfc <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 0304 	and.w	r3, r3, #4
 8006bc0:	2b04      	cmp	r3, #4
 8006bc2:	d10e      	bne.n	8006be2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f816 	bl	8006c04 <UART_WaitOnFlagUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d001      	beq.n	8006be2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e00c      	b.n	8006bfc <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2220      	movs	r2, #32
 8006be6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2220      	movs	r2, #32
 8006bee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	4613      	mov	r3, r2
 8006c12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c14:	e062      	b.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1c:	d05e      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1e:	f7fa fc7d 	bl	800151c <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d302      	bcc.n	8006c34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d11d      	bne.n	8006c70 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c42:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689a      	ldr	r2, [r3, #8]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0201 	bic.w	r2, r2, #1
 8006c52:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	e045      	b.n	8006cfc <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d02e      	beq.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c8c:	d126      	bne.n	8006cdc <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681a      	ldr	r2, [r3, #0]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ca6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	689a      	ldr	r2, [r3, #8]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0201 	bic.w	r2, r2, #1
 8006cb6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2220      	movs	r2, #32
 8006ccc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e00f      	b.n	8006cfc <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	69da      	ldr	r2, [r3, #28]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	bf0c      	ite	eq
 8006cec:	2301      	moveq	r3, #1
 8006cee:	2300      	movne	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	79fb      	ldrb	r3, [r7, #7]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d08d      	beq.n	8006c16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	; (8006dcc <HAL_UARTEx_DisableFifoMode+0xc8>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d027      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	; (8006dd0 <HAL_UARTEx_DisableFifoMode+0xcc>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d022      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	; (8006dd4 <HAL_UARTEx_DisableFifoMode+0xd0>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d01d      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	; (8006dd8 <HAL_UARTEx_DisableFifoMode+0xd4>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d018      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a28      	ldr	r2, [pc, #160]	; (8006ddc <HAL_UARTEx_DisableFifoMode+0xd8>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d013      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a27      	ldr	r2, [pc, #156]	; (8006de0 <HAL_UARTEx_DisableFifoMode+0xdc>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d00e      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	; (8006de4 <HAL_UARTEx_DisableFifoMode+0xe0>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d009      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a24      	ldr	r2, [pc, #144]	; (8006de8 <HAL_UARTEx_DisableFifoMode+0xe4>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_UARTEx_DisableFifoMode+0x62>
 8006d5c:	f240 2111 	movw	r1, #529	; 0x211
 8006d60:	4822      	ldr	r0, [pc, #136]	; (8006dec <HAL_UARTEx_DisableFifoMode+0xe8>)
 8006d62:	f7fa f8be 	bl	8000ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d101      	bne.n	8006d74 <HAL_UARTEx_DisableFifoMode+0x70>
 8006d70:	2302      	movs	r3, #2
 8006d72:	e027      	b.n	8006dc4 <HAL_UARTEx_DisableFifoMode+0xc0>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2224      	movs	r2, #36	; 0x24
 8006d80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 0201 	bic.w	r2, r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006da2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3710      	adds	r7, #16
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40011000 	.word	0x40011000
 8006dd0:	40004400 	.word	0x40004400
 8006dd4:	40004800 	.word	0x40004800
 8006dd8:	40004c00 	.word	0x40004c00
 8006ddc:	40005000 	.word	0x40005000
 8006de0:	40011400 	.word	0x40011400
 8006de4:	40007800 	.word	0x40007800
 8006de8:	40007c00 	.word	0x40007c00
 8006dec:	0800a474 	.word	0x0800a474

08006df0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a40      	ldr	r2, [pc, #256]	; (8006f00 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d027      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a3e      	ldr	r2, [pc, #248]	; (8006f04 <HAL_UARTEx_SetTxFifoThreshold+0x114>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d022      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a3d      	ldr	r2, [pc, #244]	; (8006f08 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d01d      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a3b      	ldr	r2, [pc, #236]	; (8006f0c <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d018      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a3a      	ldr	r2, [pc, #232]	; (8006f10 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d013      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a38      	ldr	r2, [pc, #224]	; (8006f14 <HAL_UARTEx_SetTxFifoThreshold+0x124>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d00e      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a37      	ldr	r2, [pc, #220]	; (8006f18 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d009      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d004      	beq.n	8006e54 <HAL_UARTEx_SetTxFifoThreshold+0x64>
 8006e4a:	f240 213f 	movw	r1, #575	; 0x23f
 8006e4e:	4834      	ldr	r0, [pc, #208]	; (8006f20 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8006e50:	f7fa f847 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d018      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e60:	d014      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e68:	d010      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8006e70:	d00c      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e78:	d008      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	f1b3 4f20 	cmp.w	r3, #2684354560	; 0xa0000000
 8006e80:	d004      	beq.n	8006e8c <HAL_UARTEx_SetTxFifoThreshold+0x9c>
 8006e82:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006e86:	4826      	ldr	r0, [pc, #152]	; (8006f20 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
 8006e88:	f7fa f82b 	bl	8000ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d101      	bne.n	8006e9a <HAL_UARTEx_SetTxFifoThreshold+0xaa>
 8006e96:	2302      	movs	r3, #2
 8006e98:	e02d      	b.n	8006ef6 <HAL_UARTEx_SetTxFifoThreshold+0x106>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2201      	movs	r2, #1
 8006e9e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2224      	movs	r2, #36	; 0x24
 8006ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0201 	bic.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8be 	bl	8007058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	40011000 	.word	0x40011000
 8006f04:	40004400 	.word	0x40004400
 8006f08:	40004800 	.word	0x40004800
 8006f0c:	40004c00 	.word	0x40004c00
 8006f10:	40005000 	.word	0x40005000
 8006f14:	40011400 	.word	0x40011400
 8006f18:	40007800 	.word	0x40007800
 8006f1c:	40007c00 	.word	0x40007c00
 8006f20:	0800a474 	.word	0x0800a474

08006f24 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a40      	ldr	r2, [pc, #256]	; (8007034 <HAL_UARTEx_SetRxFifoThreshold+0x110>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d027      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a3e      	ldr	r2, [pc, #248]	; (8007038 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d022      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a3d      	ldr	r2, [pc, #244]	; (800703c <HAL_UARTEx_SetRxFifoThreshold+0x118>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d01d      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a3b      	ldr	r2, [pc, #236]	; (8007040 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d018      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a3a      	ldr	r2, [pc, #232]	; (8007044 <HAL_UARTEx_SetRxFifoThreshold+0x120>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d013      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a38      	ldr	r2, [pc, #224]	; (8007048 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d00e      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a37      	ldr	r2, [pc, #220]	; (800704c <HAL_UARTEx_SetRxFifoThreshold+0x128>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d009      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a35      	ldr	r2, [pc, #212]	; (8007050 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d004      	beq.n	8006f88 <HAL_UARTEx_SetRxFifoThreshold+0x64>
 8006f7e:	f44f 711c 	mov.w	r1, #624	; 0x270
 8006f82:	4834      	ldr	r0, [pc, #208]	; (8007054 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8006f84:	f7f9 ffad 	bl	8000ee2 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d018      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f94:	d014      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f9c:	d010      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8006fa4:	d00c      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fac:	d008      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8006fb4:	d004      	beq.n	8006fc0 <HAL_UARTEx_SetRxFifoThreshold+0x9c>
 8006fb6:	f240 2171 	movw	r1, #625	; 0x271
 8006fba:	4826      	ldr	r0, [pc, #152]	; (8007054 <HAL_UARTEx_SetRxFifoThreshold+0x130>)
 8006fbc:	f7f9 ff91 	bl	8000ee2 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d101      	bne.n	8006fce <HAL_UARTEx_SetRxFifoThreshold+0xaa>
 8006fca:	2302      	movs	r3, #2
 8006fcc:	e02d      	b.n	800702a <HAL_UARTEx_SetRxFifoThreshold+0x106>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2224      	movs	r2, #36	; 0x24
 8006fda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	430a      	orrs	r2, r1
 8007008:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f824 	bl	8007058 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2220      	movs	r2, #32
 800701c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2200      	movs	r2, #0
 8007024:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40011000 	.word	0x40011000
 8007038:	40004400 	.word	0x40004400
 800703c:	40004800 	.word	0x40004800
 8007040:	40004c00 	.word	0x40004c00
 8007044:	40005000 	.word	0x40005000
 8007048:	40011400 	.word	0x40011400
 800704c:	40007800 	.word	0x40007800
 8007050:	40007c00 	.word	0x40007c00
 8007054:	0800a474 	.word	0x0800a474

08007058 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8007060:	4a2f      	ldr	r2, [pc, #188]	; (8007120 <UARTEx_SetNbDataToProcess+0xc8>)
 8007062:	f107 0314 	add.w	r3, r7, #20
 8007066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800706a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800706e:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <UARTEx_SetNbDataToProcess+0xcc>)
 8007070:	f107 030c 	add.w	r3, r7, #12
 8007074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007078:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007080:	2b00      	cmp	r3, #0
 8007082:	d108      	bne.n	8007096 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007094:	e03d      	b.n	8007112 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007096:	2310      	movs	r3, #16
 8007098:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800709a:	2310      	movs	r3, #16
 800709c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	0e5b      	lsrs	r3, r3, #25
 80070a6:	b2db      	uxtb	r3, r3
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	0f5b      	lsrs	r3, r3, #29
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	f003 0307 	and.w	r3, r3, #7
 80070bc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80070be:	7fbb      	ldrb	r3, [r7, #30]
 80070c0:	7f3a      	ldrb	r2, [r7, #28]
 80070c2:	f107 0120 	add.w	r1, r7, #32
 80070c6:	440a      	add	r2, r1
 80070c8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070cc:	fb02 f303 	mul.w	r3, r2, r3
 80070d0:	7f3a      	ldrb	r2, [r7, #28]
 80070d2:	f107 0120 	add.w	r1, r7, #32
 80070d6:	440a      	add	r2, r1
 80070d8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80070dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80070e8:	7ffb      	ldrb	r3, [r7, #31]
 80070ea:	7f7a      	ldrb	r2, [r7, #29]
 80070ec:	f107 0120 	add.w	r1, r7, #32
 80070f0:	440a      	add	r2, r1
 80070f2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80070f6:	fb02 f303 	mul.w	r3, r2, r3
 80070fa:	7f7a      	ldrb	r2, [r7, #29]
 80070fc:	f107 0120 	add.w	r1, r7, #32
 8007100:	440a      	add	r2, r1
 8007102:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007106:	fb93 f3f2 	sdiv	r3, r3, r2
 800710a:	b29a      	uxth	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007112:	bf00      	nop
 8007114:	3724      	adds	r7, #36	; 0x24
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	0800a4f8 	.word	0x0800a4f8
 8007124:	0800a500 	.word	0x0800a500

08007128 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b094      	sub	sp, #80	; 0x50
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	3303      	adds	r3, #3
 800713a:	f023 0303 	bic.w	r3, r3, #3
 800713e:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007140:	f3ef 8310 	mrs	r3, PRIMASK
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007146:	b672      	cpsid	i
    return(primask_value);
 8007148:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800714a:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800714c:	4b52      	ldr	r3, [pc, #328]	; (8007298 <_tx_byte_allocate+0x170>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	643b      	str	r3, [r7, #64]	; 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8007152:	2300      	movs	r3, #0
 8007154:	647b      	str	r3, [r7, #68]	; 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800715a:	621a      	str	r2, [r3, #32]
 800715c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	f383 8810 	msr	PRIMASK, r3
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 f9a5 	bl	80074b8 <_tx_byte_pool_search>
 800716e:	63f8      	str	r0, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007170:	f3ef 8310 	mrs	r3, PRIMASK
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007176:	b672      	cpsid	i
    return(primask_value);
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <_tx_byte_allocate+0x60>
        {
        
            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8007182:	2301      	movs	r3, #1
 8007184:	647b      	str	r3, [r7, #68]	; 0x44
 8007186:	e006      	b.n	8007196 <_tx_byte_allocate+0x6e>
        }
        else
        {
        
            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800718e:	429a      	cmp	r2, r3
 8007190:	d101      	bne.n	8007196 <_tx_byte_allocate+0x6e>
            {
            
                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8007192:	2301      	movs	r3, #1
 8007194:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }

    } while (finished == TX_FALSE);
 8007196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0dc      	beq.n	8007156 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071a0:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d007      	beq.n	80071b8 <_tx_byte_allocate+0x90>
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80071b2:	2300      	movs	r3, #0
 80071b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b6:	e06a      	b.n	800728e <_tx_byte_allocate+0x166>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d060      	beq.n	8007280 <_tx_byte_allocate+0x158>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80071be:	4b37      	ldr	r3, [pc, #220]	; (800729c <_tx_byte_allocate+0x174>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d007      	beq.n	80071d6 <_tx_byte_allocate+0xae>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80071c6:	2310      	movs	r3, #16
 80071c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071cc:	61fb      	str	r3, [r7, #28]
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f383 8810 	msr	PRIMASK, r3
 80071d4:	e05b      	b.n	800728e <_tx_byte_allocate+0x166>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80071d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071d8:	4a31      	ldr	r2, [pc, #196]	; (80072a0 <_tx_byte_allocate+0x178>)
 80071da:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 80071dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 80071e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 80071e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 80071ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007200:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007206:	1c5a      	adds	r2, r3, #1
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	629a      	str	r2, [r3, #40]	; 0x28
            
                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	2b00      	cmp	r3, #0
 8007210:	d109      	bne.n	8007226 <_tx_byte_allocate+0xfe>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007216:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800721c:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800721e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007222:	675a      	str	r2, [r3, #116]	; 0x74
 8007224:	e011      	b.n	800724a <_tx_byte_allocate+0x122>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800722c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007230:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007236:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800723a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800723c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007242:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007246:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007248:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800724a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800724c:	2209      	movs	r2, #9
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	2201      	movs	r2, #1
 8007254:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <_tx_byte_allocate+0x174>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a0e      	ldr	r2, [pc, #56]	; (800729c <_tx_byte_allocate+0x174>)
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007270:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007272:	f001 facf 	bl	8008814 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007276:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800727c:	64bb      	str	r3, [r7, #72]	; 0x48
 800727e:	e006      	b.n	800728e <_tx_byte_allocate+0x166>
 8007280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007282:	617b      	str	r3, [r7, #20]
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	f383 8810 	msr	PRIMASK, r3
    
            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800728a:	2310      	movs	r3, #16
 800728c:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800728e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007290:	4618      	mov	r0, r3
 8007292:	3750      	adds	r7, #80	; 0x50
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}
 8007298:	2400041c 	.word	0x2400041c
 800729c:	24000418 	.word	0x24000418
 80072a0:	080072a5 	.word	0x080072a5

080072a4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08c      	sub	sp, #48	; 0x30
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80072ae:	f3ef 8310 	mrs	r3, PRIMASK
 80072b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80072b4:	b672      	cpsid	i
    return(primask_value);
 80072b6:	69bb      	ldr	r3, [r7, #24]

    
#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80072b8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80072be:	4a31      	ldr	r2, [pc, #196]	; (8007384 <_tx_byte_pool_cleanup+0xe0>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d155      	bne.n	8007370 <_tx_byte_pool_cleanup+0xcc>
    {
    
        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d14f      	bne.n	8007370 <_tx_byte_pool_cleanup+0xcc>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d049      	beq.n	8007370 <_tx_byte_pool_cleanup+0xcc>
            {
            
                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80072dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a29      	ldr	r2, [pc, #164]	; (8007388 <_tx_byte_pool_cleanup+0xe4>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d144      	bne.n	8007370 <_tx_byte_pool_cleanup+0xcc>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d040      	beq.n	8007370 <_tx_byte_pool_cleanup+0xcc>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80072f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f8:	1e5a      	subs	r2, r3, #1
 80072fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072fc:	629a      	str	r2, [r3, #40]	; 0x28
            
                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80072fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007302:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */
    
                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730c:	2200      	movs	r2, #0
 800730e:	625a      	str	r2, [r3, #36]	; 0x24
 8007310:	e013      	b.n	800733a <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007316:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800731c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800731e:	6a3b      	ldr	r3, [r7, #32]
 8007320:	69fa      	ldr	r2, [r7, #28]
 8007322:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007324:	69fb      	ldr	r3, [r7, #28]
 8007326:	6a3a      	ldr	r2, [r7, #32]
 8007328:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	429a      	cmp	r2, r3
 8007332:	d102      	bne.n	800733a <_tx_byte_pool_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8007334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007336:	6a3a      	ldr	r2, [r7, #32]
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	2b09      	cmp	r3, #9
 8007340:	d116      	bne.n	8007370 <_tx_byte_pool_cleanup+0xcc>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2210      	movs	r2, #16
 8007346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800734a:	4b10      	ldr	r3, [pc, #64]	; (800738c <_tx_byte_pool_cleanup+0xe8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3301      	adds	r3, #1
 8007350:	4a0e      	ldr	r2, [pc, #56]	; (800738c <_tx_byte_pool_cleanup+0xe8>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007356:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f001 f964 	bl	800862c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007364:	f3ef 8310 	mrs	r3, PRIMASK
 8007368:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800736a:	b672      	cpsid	i
    return(primask_value);
 800736c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f383 8810 	msr	PRIMASK, r3
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800737a:	bf00      	nop
 800737c:	3730      	adds	r7, #48	; 0x30
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	080072a5 	.word	0x080072a5
 8007388:	42595445 	.word	0x42595445
 800738c:	24000418 	.word	0x24000418

08007390 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08e      	sub	sp, #56	; 0x38
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	607a      	str	r2, [r7, #4]
 800739c:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800739e:	2234      	movs	r2, #52	; 0x34
 80073a0:	2100      	movs	r1, #0
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f002 f954 	bl	8009650 <memset>

    /* Round the pool size down to something that is evenly divisible by 
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the 
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	f1a3 0208 	sub.w	r2, r3, #8
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2202      	movs	r2, #2
 80073dc:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */
    
    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80073e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	4413      	add	r3, r2
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80073ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ec:	3b04      	subs	r3, #4
 80073ee:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80073f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073fc:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80073fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007400:	3b04      	subs	r3, #4
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8007404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 8007416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800741a:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8007420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007422:	3304      	adds	r3, #4
 8007424:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8007426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007428:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800742a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742c:	4a1e      	ldr	r2, [pc, #120]	; (80074a8 <_tx_byte_pool_create+0x118>)
 800742e:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007436:	f3ef 8310 	mrs	r3, PRIMASK
 800743a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800743c:	b672      	cpsid	i
    return(primask_value);
 800743e:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 8007440:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	4a19      	ldr	r2, [pc, #100]	; (80074ac <_tx_byte_pool_create+0x11c>)
 8007446:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8007448:	4b19      	ldr	r3, [pc, #100]	; (80074b0 <_tx_byte_pool_create+0x120>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d109      	bne.n	8007464 <_tx_byte_pool_create+0xd4>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 8007450:	4a18      	ldr	r2, [pc, #96]	; (80074b4 <_tx_byte_pool_create+0x124>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	631a      	str	r2, [r3, #48]	; 0x30
 8007462:	e011      	b.n	8007488 <_tx_byte_pool_create+0xf8>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8007464:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <_tx_byte_pool_create+0x124>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800746a:	6a3b      	ldr	r3, [r7, #32]
 800746c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	68fa      	ldr	r2, [r7, #12]
 800747a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	69fa      	ldr	r2, [r7, #28]
 8007480:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8007488:	4b09      	ldr	r3, [pc, #36]	; (80074b0 <_tx_byte_pool_create+0x120>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	4a08      	ldr	r2, [pc, #32]	; (80074b0 <_tx_byte_pool_create+0x120>)
 8007490:	6013      	str	r3, [r2, #0]
 8007492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007494:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3738      	adds	r7, #56	; 0x38
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	ffffeeee 	.word	0xffffeeee
 80074ac:	42595445 	.word	0x42595445
 80074b0:	2400037c 	.word	0x2400037c
 80074b4:	24000360 	.word	0x24000360

080074b8 <_tx_byte_pool_search>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b095      	sub	sp, #84	; 0x54
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80074c2:	2300      	movs	r3, #0
 80074c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80074c6:	f3ef 8310 	mrs	r3, PRIMASK
 80074ca:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80074cc:	b672      	cpsid	i
    return(primask_value);
 80074ce:	6a3b      	ldr	r3, [r7, #32]
ALIGN_TYPE      *free_ptr;
UCHAR           *work_ptr;


    /* Disable interrupts.  */
    TX_DISABLE
 80074d0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    if (memory_size >= pool_ptr -> tx_byte_pool_available)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d307      	bcc.n	80074ec <_tx_byte_pool_search+0x34>
 80074dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80074ea:	e0d8      	b.n	800769e <_tx_byte_pool_search+0x1e6>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 80074ec:	4b6f      	ldr	r3, [pc, #444]	; (80076ac <_tx_byte_pool_search+0x1f4>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074f6:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	695b      	ldr	r3, [r3, #20]
 80074fc:	64bb      	str	r3, [r7, #72]	; 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	643b      	str	r3, [r7, #64]	; 0x40
        available_bytes =  ((ULONG) 0);
 8007506:	2300      	movs	r3, #0
 8007508:	647b      	str	r3, [r7, #68]	; 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800750a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800750c:	3304      	adds	r3, #4
 800750e:	637b      	str	r3, [r7, #52]	; 0x34
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007512:	633b      	str	r3, [r7, #48]	; 0x30
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a65      	ldr	r2, [pc, #404]	; (80076b0 <_tx_byte_pool_search+0x1f8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d143      	bne.n	80075a6 <_tx_byte_pool_search+0xee>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800751e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d104      	bne.n	800752e <_tx_byte_pool_search+0x76>
                {

                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007528:	615a      	str	r2, [r3, #20]
                
                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800752a:	2301      	movs	r3, #1
 800752c:	63fb      	str	r3, [r7, #60]	; 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800752e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007530:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_ptr =             *this_block_link_ptr;
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8007538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800753a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	647b      	str	r3, [r7, #68]	; 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8007540:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007542:	3b08      	subs	r3, #8
 8007544:	647b      	str	r3, [r7, #68]	; 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8007546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d254      	bcs.n	80075f8 <_tx_byte_pool_search+0x140>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800754e:	2300      	movs	r3, #0
 8007550:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Not enough memory, check to see if the neighbor is 
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	3304      	adds	r3, #4
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	633b      	str	r3, [r7, #48]	; 0x30
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a53      	ldr	r2, [pc, #332]	; (80076b0 <_tx_byte_pool_search+0x1f8>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d113      	bne.n	800758e <_tx_byte_pool_search+0xd6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
                        *this_block_link_ptr =  *next_block_link_ptr;
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	1e5a      	subs	r2, r3, #1
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	695b      	ldr	r3, [r3, #20]
 8007580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007582:	429a      	cmp	r2, r3
 8007584:	d114      	bne.n	80075b0 <_tx_byte_pool_search+0xf8>
                        {
                    
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800758a:	615a      	str	r2, [r3, #20]
 800758c:	e010      	b.n	80075b0 <_tx_byte_pool_search+0xf8>
                    }
                    else
                    {

                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800758e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007590:	627b      	str	r3, [r7, #36]	; 0x24
                        current_ptr =  *next_block_link_ptr;
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8007598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d008      	beq.n	80075b0 <_tx_byte_pool_search+0xf8>
                        {

                            examine_blocks--;
 800759e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a0:	3b01      	subs	r3, #1
 80075a2:	643b      	str	r3, [r7, #64]	; 0x40
 80075a4:	e004      	b.n	80075b0 <_tx_byte_pool_search+0xf8>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80075a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
                current_ptr =  *this_block_link_ptr;
 80075aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80075b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <_tx_byte_pool_search+0x104>
            {

                examine_blocks--;
 80075b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075b8:	3b01      	subs	r3, #1
 80075ba:	643b      	str	r3, [r7, #64]	; 0x40
 80075bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80075c6:	f3ef 8310 	mrs	r3, PRIMASK
 80075ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80075cc:	b672      	cpsid	i
    return(primask_value);
 80075ce:	69bb      	ldr	r3, [r7, #24]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80075d0:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075d8:	429a      	cmp	r2, r3
 80075da:	d009      	beq.n	80075f0 <_tx_byte_pool_search+0x138>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	64bb      	str	r3, [r7, #72]	; 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	3301      	adds	r3, #1
 80075e8:	643b      	str	r3, [r7, #64]	; 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ee:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 80075f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d189      	bne.n	800750a <_tx_byte_pool_search+0x52>
 80075f6:	e000      	b.n	80075fa <_tx_byte_pool_search+0x142>
                    break;
 80075f8:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 80075fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d047      	beq.n	8007690 <_tx_byte_pool_search+0x1d8>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8007600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b13      	cmp	r3, #19
 8007608:	d91e      	bls.n	8007648 <_tx_byte_pool_search+0x190>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	3308      	adds	r3, #8
 800760e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007610:	4413      	add	r3, r2
 8007612:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8007614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007616:	627b      	str	r3, [r7, #36]	; 0x24
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
                *next_block_link_ptr =  *this_block_link_ptr;
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8007624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007626:	3304      	adds	r3, #4
 8007628:	637b      	str	r3, [r7, #52]	; 0x34
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	633b      	str	r3, [r7, #48]	; 0x30
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	4a1f      	ldr	r2, [pc, #124]	; (80076b0 <_tx_byte_pool_search+0x1f8>)
 8007632:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007642:	601a      	str	r2, [r3, #0]
    
                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	647b      	str	r3, [r7, #68]	; 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8007648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800764a:	3304      	adds	r3, #4
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007650:	62fb      	str	r3, [r7, #44]	; 0x2c
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8007652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	f1a3 0208 	sub.w	r2, r3, #8
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	695b      	ldr	r3, [r3, #20]
 800766c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800766e:	429a      	cmp	r2, r3
 8007670:	d105      	bne.n	800767e <_tx_byte_pool_search+0x1c6>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8007672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007674:	62fb      	str	r3, [r7, #44]	; 0x2c
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	615a      	str	r2, [r3, #20]
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8007688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768a:	3308      	adds	r3, #8
 800768c:	64bb      	str	r3, [r7, #72]	; 0x48
 800768e:	e006      	b.n	800769e <_tx_byte_pool_search+0x1e6>
 8007690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800769a:	2300      	movs	r3, #0
 800769c:	64bb      	str	r3, [r7, #72]	; 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800769e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3754      	adds	r7, #84	; 0x54
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	2400041c 	.word	0x2400041c
 80076b0:	ffffeeee 	.word	0xffffeeee

080076b4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80076b8:	f000 fe94 	bl	80083e4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80076bc:	f001 fd98 	bl	80091f0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80076c0:	4b12      	ldr	r3, [pc, #72]	; (800770c <_tx_initialize_high_level+0x58>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
 80076c6:	4b12      	ldr	r3, [pc, #72]	; (8007710 <_tx_initialize_high_level+0x5c>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80076cc:	4b11      	ldr	r3, [pc, #68]	; (8007714 <_tx_initialize_high_level+0x60>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	601a      	str	r2, [r3, #0]
 80076d2:	4b11      	ldr	r3, [pc, #68]	; (8007718 <_tx_initialize_high_level+0x64>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80076d8:	4b10      	ldr	r3, [pc, #64]	; (800771c <_tx_initialize_high_level+0x68>)
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
 80076de:	4b10      	ldr	r3, [pc, #64]	; (8007720 <_tx_initialize_high_level+0x6c>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80076e4:	4b0f      	ldr	r3, [pc, #60]	; (8007724 <_tx_initialize_high_level+0x70>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <_tx_initialize_high_level+0x74>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80076f0:	4b0e      	ldr	r3, [pc, #56]	; (800772c <_tx_initialize_high_level+0x78>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	4b0e      	ldr	r3, [pc, #56]	; (8007730 <_tx_initialize_high_level+0x7c>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80076fc:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <_tx_initialize_high_level+0x80>)
 80076fe:	2200      	movs	r2, #0
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <_tx_initialize_high_level+0x84>)
 8007704:	2200      	movs	r2, #0
 8007706:	601a      	str	r2, [r3, #0]
#endif
}
 8007708:	bf00      	nop
 800770a:	bd80      	pop	{r7, pc}
 800770c:	2400035c 	.word	0x2400035c
 8007710:	2400036c 	.word	0x2400036c
 8007714:	24000378 	.word	0x24000378
 8007718:	24000358 	.word	0x24000358
 800771c:	2400034c 	.word	0x2400034c
 8007720:	24000370 	.word	0x24000370
 8007724:	24000374 	.word	0x24000374
 8007728:	24000368 	.word	0x24000368
 800772c:	24000360 	.word	0x24000360
 8007730:	2400037c 	.word	0x2400037c
 8007734:	24000354 	.word	0x24000354
 8007738:	24000350 	.word	0x24000350

0800773c <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007740:	4b10      	ldr	r3, [pc, #64]	; (8007784 <_tx_initialize_kernel_enter+0x48>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8007748:	d00c      	beq.n	8007764 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate 
           initialization is in progress.  Note that this variable is 
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <_tx_initialize_kernel_enter+0x48>)
 800774c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8007750:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007752:	f7f8 fdc5 	bl	80002e0 <_tx_initialize_low_level>
    
        /* Invoke the high-level initialization to exercise all of the 
           ThreadX components and the application's initialization 
           function.  */
        _tx_initialize_high_level();
 8007756:	f7ff ffad 	bl	80076b4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800775a:	4b0b      	ldr	r3, [pc, #44]	; (8007788 <_tx_initialize_kernel_enter+0x4c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	3301      	adds	r3, #1
 8007760:	4a09      	ldr	r2, [pc, #36]	; (8007788 <_tx_initialize_kernel_enter+0x4c>)
 8007762:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate 
       initialization is in progress.  Note that this variable is 
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007764:	4b07      	ldr	r3, [pc, #28]	; (8007784 <_tx_initialize_kernel_enter+0x48>)
 8007766:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800776a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <_tx_initialize_kernel_enter+0x50>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f7f9 f882 	bl	800087a <tx_application_define>

    /* Set the system state in preparation for entering the thread 
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <_tx_initialize_kernel_enter+0x48>)
 8007778:	2200      	movs	r2, #0
 800777a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800777c:	f7f8 fe00 	bl	8000380 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007780:	bf00      	nop
 8007782:	bd80      	pop	{r7, pc}
 8007784:	24000018 	.word	0x24000018
 8007788:	24000418 	.word	0x24000418
 800778c:	24000364 	.word	0x24000364

08007790 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08c      	sub	sp, #48	; 0x30
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800779a:	f3ef 8310 	mrs	r3, PRIMASK
 800779e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80077a0:	b672      	cpsid	i
    return(primask_value);
 80077a2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80077a4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077aa:	4a31      	ldr	r2, [pc, #196]	; (8007870 <_tx_mutex_cleanup+0xe0>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d155      	bne.n	800785c <_tx_mutex_cleanup+0xcc>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d14f      	bne.n	800785c <_tx_mutex_cleanup+0xcc>
        {
   
            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c0:	62bb      	str	r3, [r7, #40]	; 0x28
    
            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d049      	beq.n	800785c <_tx_mutex_cleanup+0xcc>
            {
    
                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80077c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a29      	ldr	r2, [pc, #164]	; (8007874 <_tx_mutex_cleanup+0xe4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d144      	bne.n	800785c <_tx_mutex_cleanup+0xcc>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80077d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d040      	beq.n	800785c <_tx_mutex_cleanup+0xcc>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80077ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24

                        /* Remove the suspended thread from the list.  */
    
                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80077f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d103      	bne.n	80077fe <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 80077f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f8:	2200      	movs	r2, #0
 80077fa:	619a      	str	r2, [r3, #24]
 80077fc:	e013      	b.n	8007826 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */
    
                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007802:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007808:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	69fa      	ldr	r2, [r7, #28]
 800780e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8007810:	69fb      	ldr	r3, [r7, #28]
 8007812:	6a3a      	ldr	r2, [r7, #32]
 8007814:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8007816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007818:	699b      	ldr	r3, [r3, #24]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	429a      	cmp	r2, r3
 800781e:	d102      	bne.n	8007826 <_tx_mutex_cleanup+0x96>
                            {
            
                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8007820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	619a      	str	r2, [r3, #24]
                            }
                        }
 
                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800782a:	2b0d      	cmp	r3, #13
 800782c:	d116      	bne.n	800785c <_tx_mutex_cleanup+0xcc>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	221d      	movs	r2, #29
 8007832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007836:	4b10      	ldr	r3, [pc, #64]	; (8007878 <_tx_mutex_cleanup+0xe8>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3301      	adds	r3, #1
 800783c:	4a0e      	ldr	r2, [pc, #56]	; (8007878 <_tx_mutex_cleanup+0xe8>)
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE
    
                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 feee 	bl	800862c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007850:	f3ef 8310 	mrs	r3, PRIMASK
 8007854:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007856:	b672      	cpsid	i
    return(primask_value);
 8007858:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800785a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f383 8810 	msr	PRIMASK, r3
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	08007791 	.word	0x08007791
 8007874:	4d555445 	.word	0x4d555445
 8007878:	24000418 	.word	0x24000418

0800787c <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007884:	f3ef 8310 	mrs	r3, PRIMASK
 8007888:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800788a:	b672      	cpsid	i
    return(primask_value);
 800788c:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800788e:	61fb      	str	r3, [r7, #28]
    
    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007890:	4b18      	ldr	r3, [pc, #96]	; (80078f4 <_tx_mutex_thread_release+0x78>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a17      	ldr	r2, [pc, #92]	; (80078f4 <_tx_mutex_thread_release+0x78>)
 8007898:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {
    
        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078a0:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d014      	beq.n	80078d2 <_tx_mutex_thread_release+0x56>
        {
        
            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2201      	movs	r2, #1
 80078ac:	609a      	str	r2, [r3, #8]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	f383 8810 	msr	PRIMASK, r3
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80078b8:	69b8      	ldr	r0, [r7, #24]
 80078ba:	f000 fad3 	bl	8007e64 <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80078be:	f3ef 8310 	mrs	r3, PRIMASK
 80078c2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80078c4:	b672      	cpsid	i
    return(primask_value);
 80078c6:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80078c8:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078d0:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d1e0      	bne.n	800789a <_tx_mutex_thread_release+0x1e>
    
    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 80078d8:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <_tx_mutex_thread_release+0x78>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3b01      	subs	r3, #1
 80078de:	4a05      	ldr	r2, [pc, #20]	; (80078f4 <_tx_mutex_thread_release+0x78>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f383 8810 	msr	PRIMASK, r3
    
    /* Restore interrupts.  */
    TX_RESTORE
}
 80078ec:	bf00      	nop
 80078ee:	3720      	adds	r7, #32
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	24000418 	.word	0x24000418

080078f8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	; 0x28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8007904:	2234      	movs	r2, #52	; 0x34
 8007906:	2100      	movs	r1, #0
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f001 fea1 	bl	8009650 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	68ba      	ldr	r2, [r7, #8]
 8007912:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800791a:	f3ef 8310 	mrs	r3, PRIMASK
 800791e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007920:	b672      	cpsid	i
    return(primask_value);
 8007922:	69bb      	ldr	r3, [r7, #24]
    
    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8007924:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a19      	ldr	r2, [pc, #100]	; (8007990 <_tx_mutex_create+0x98>)
 800792a:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800792c:	4b19      	ldr	r3, [pc, #100]	; (8007994 <_tx_mutex_create+0x9c>)
 800792e:	4a1a      	ldr	r2, [pc, #104]	; (8007998 <_tx_mutex_create+0xa0>)
 8007930:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8007932:	4b1a      	ldr	r3, [pc, #104]	; (800799c <_tx_mutex_create+0xa4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <_tx_mutex_create+0x56>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800793a:	4a19      	ldr	r2, [pc, #100]	; (80079a0 <_tx_mutex_create+0xa8>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	625a      	str	r2, [r3, #36]	; 0x24
 800794c:	e011      	b.n	8007972 <_tx_mutex_create+0x7a>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <_tx_mutex_create+0xa8>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8007960:	69fb      	ldr	r3, [r7, #28]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a3a      	ldr	r2, [r7, #32]
 8007970:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8007972:	4b0a      	ldr	r3, [pc, #40]	; (800799c <_tx_mutex_create+0xa4>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3301      	adds	r3, #1
 8007978:	4a08      	ldr	r2, [pc, #32]	; (800799c <_tx_mutex_create+0xa4>)
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3728      	adds	r7, #40	; 0x28
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	4d555445 	.word	0x4d555445
 8007994:	24000400 	.word	0x24000400
 8007998:	0800787d 	.word	0x0800787d
 800799c:	24000350 	.word	0x24000350
 80079a0:	24000354 	.word	0x24000354

080079a4 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b090      	sub	sp, #64	; 0x40
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80079ae:	f3ef 8310 	mrs	r3, PRIMASK
 80079b2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80079b4:	b672      	cpsid	i
    return(primask_value);
 80079b6:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80079ba:	4b77      	ldr	r3, [pc, #476]	; (8007b98 <_tx_mutex_get+0x1f4>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d143      	bne.n	8007a50 <_tx_mutex_get+0xac>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d2:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 80079d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d032      	beq.n	8007a40 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d106      	bne.n	80079f0 <_tx_mutex_get+0x4c>
            {
         
                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80079e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2220      	movs	r2, #32
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 80079f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079f6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 80079f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00f      	beq.n	8007a1e <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a3a      	ldr	r2, [r7, #32]
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a1c:	e009      	b.n	8007a32 <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8007a1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8007a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8007a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a42:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a4e:	e09e      	b.n	8007b8e <_tx_mutex_get+0x1ea>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d10c      	bne.n	8007a74 <_tx_mutex_get+0xd0>
    {

        /* The owning thread is requesting the mutex again, just 
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	1c5a      	adds	r2, r3, #1
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	609a      	str	r2, [r3, #8]
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	617b      	str	r3, [r7, #20]
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a72:	e08c      	b.n	8007b8e <_tx_mutex_get+0x1ea>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8082 	beq.w	8007b80 <_tx_mutex_get+0x1dc>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8007a7c:	4b47      	ldr	r3, [pc, #284]	; (8007b9c <_tx_mutex_get+0x1f8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <_tx_mutex_get+0xf0>
 8007a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	693b      	ldr	r3, [r7, #16]
 8007a8a:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8007a8e:	231d      	movs	r3, #29
 8007a90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a92:	e07c      	b.n	8007b8e <_tx_mutex_get+0x1ea>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	633b      	str	r3, [r7, #48]	; 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	4a40      	ldr	r2, [pc, #256]	; (8007ba0 <_tx_mutex_get+0x1fc>)
 8007a9e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8007aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	69db      	ldr	r3, [r3, #28]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d109      	bne.n	8007ad0 <_tx_mutex_get+0x12c>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac0:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8007ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ac6:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8007ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007acc:	675a      	str	r2, [r3, #116]	; 0x74
 8007ace:	e011      	b.n	8007af4 <_tx_mutex_get+0x150>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8007ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ada:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8007adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae0:	62bb      	str	r3, [r7, #40]	; 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ae6:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8007ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007aec:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8007aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007af2:	675a      	str	r2, [r3, #116]	; 0x74
                }
            
                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	69db      	ldr	r3, [r3, #28]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8007afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b00:	220d      	movs	r2, #13
 8007b02:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b06:	2201      	movs	r2, #1
 8007b08:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8007b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b0c:	683a      	ldr	r2, [r7, #0]
 8007b0e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8007b10:	4b22      	ldr	r3, [pc, #136]	; (8007b9c <_tx_mutex_get+0x1f8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3301      	adds	r3, #1
 8007b16:	4a21      	ldr	r2, [pc, #132]	; (8007b9c <_tx_mutex_get+0x1f8>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f383 8810 	msr	PRIMASK, r3
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread 
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d121      	bne.n	8007b70 <_tx_mutex_get+0x1cc>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d903      	bls.n	8007b40 <_tx_mutex_get+0x19c>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8007b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 8007b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d204      	bcs.n	8007b58 <_tx_mutex_get+0x1b4>
                    {
                    
                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 8007b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8007b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d905      	bls.n	8007b70 <_tx_mutex_get+0x1cc>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8007b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b6c:	f000 f8c6 	bl	8007cfc <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8007b70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007b72:	f000 fe4f 	bl	8008814 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007b7e:	e006      	b.n	8007b8e <_tx_mutex_get+0x1ea>
 8007b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 8007b8a:	231d      	movs	r3, #29
 8007b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 8007b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3740      	adds	r7, #64	; 0x40
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	2400041c 	.word	0x2400041c
 8007b9c:	24000418 	.word	0x24000418
 8007ba0:	08007791 	.word	0x08007791

08007ba4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b090      	sub	sp, #64	; 0x40
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007bac:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007bb2:	b672      	cpsid	i
    return(primask_value);
 8007bb4:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8007bb6:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	69db      	ldr	r3, [r3, #28]
 8007bbc:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8007bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d805      	bhi.n	8007bd0 <_tx_mutex_prioritize+0x2c>
 8007bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	f383 8810 	msr	PRIMASK, r3
 8007bce:	e08e      	b.n	8007cee <_tx_mutex_prioritize+0x14a>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d114      	bne.n	8007c00 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	633b      	str	r3, [r7, #48]	; 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d202      	bcs.n	8007bf4 <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf2:	619a      	str	r2, [r3, #24]
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f383 8810 	msr	PRIMASK, r3
 8007bfe:	e076      	b.n	8007cee <_tx_mutex_prioritize+0x14a>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	633b      	str	r3, [r7, #48]	; 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 8007c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c0e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8007c10:	4b39      	ldr	r3, [pc, #228]	; (8007cf8 <_tx_mutex_prioritize+0x154>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a38      	ldr	r2, [pc, #224]	; (8007cf8 <_tx_mutex_prioritize+0x154>)
 8007c18:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d201      	bcs.n	8007c2e <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8007c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007c38:	f3ef 8310 	mrs	r3, PRIMASK
 8007c3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007c3e:	b672      	cpsid	i
    return(primask_value);
 8007c40:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8007c42:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if any changes to the list have occurred while 
               interrupts were enabled.  */
              
            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d002      	beq.n	8007c54 <_tx_mutex_prioritize+0xb0>
            {
            
                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c52:	e006      	b.n	8007c62 <_tx_mutex_prioritize+0xbe>
            }
            else
            {
            
                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	69db      	ldr	r3, [r3, #28]
 8007c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d001      	beq.n	8007c62 <_tx_mutex_prioritize+0xbe>
                {
              
                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	62bb      	str	r3, [r7, #40]	; 0x28
                }
            }
             
            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d103      	bne.n	8007c70 <_tx_mutex_prioritize+0xcc>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007c6e:	e00c      	b.n	8007c8a <_tx_mutex_prioritize+0xe6>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	633b      	str	r3, [r7, #48]	; 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	69db      	ldr	r3, [r3, #28]
 8007c7a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 8007c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c84:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	62bb      	str	r3, [r7, #40]	; 0x28
            }

        } while (thread_ptr != head_ptr);
 8007c8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d1c5      	bne.n	8007c1e <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 8007c92:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <_tx_mutex_prioritize+0x154>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	3b01      	subs	r3, #1
 8007c98:	4a17      	ldr	r2, [pc, #92]	; (8007cf8 <_tx_mutex_prioritize+0x154>)
 8007c9a:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front 
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8007c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d01d      	beq.n	8007ce0 <_tx_mutex_prioritize+0x13c>
            /* No, we need to move the highest priority suspended thread to the 
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 8007ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8007caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cae:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	6a3a      	ldr	r2, [r7, #32]
 8007cb4:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cba:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc0:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc6:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8007cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd2:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 8007cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd8:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cde:	619a      	str	r2, [r3, #24]
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8007cea:	f000 fc69 	bl	80085c0 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8007cee:	2300      	movs	r3, #0
#endif
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3740      	adds	r7, #64	; 0x40
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	24000418 	.word	0x24000418

08007cfc <_tx_mutex_priority_change>:
/*                                            _tx_thread_system_suspend,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b08e      	sub	sp, #56	; 0x38
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d06:	f3ef 8310 	mrs	r3, PRIMASK
 8007d0a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d0c:	b672      	cpsid	i
    return(primask_value);
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8007d10:	637b      	str	r3, [r7, #52]	; 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d017      	beq.n	8007d4a <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	62da      	str	r2, [r3, #44]	; 0x2c
            
        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d905      	bls.n	8007d38 <_tx_mutex_priority_change+0x3c>
        {
        
            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d36:	e002      	b.n	8007d3e <_tx_mutex_priority_change+0x42>
        }
        else
        {
        
            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	f383 8810 	msr	PRIMASK, r3
        
        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007d48:	e082      	b.n	8007e50 <_tx_mutex_priority_change+0x154>
        execute_ptr =  _tx_thread_execute_ptr;
 8007d4a:	4b43      	ldr	r3, [pc, #268]	; (8007e58 <_tx_mutex_priority_change+0x15c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	633b      	str	r3, [r7, #48]	; 0x30
        original_priority =  thread_ptr -> tx_thread_priority;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8007d56:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <_tx_mutex_priority_change+0x160>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3302      	adds	r3, #2
 8007d5c:	4a3f      	ldr	r2, [pc, #252]	; (8007e5c <_tx_mutex_priority_change+0x160>)
 8007d5e:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	220e      	movs	r2, #14
 8007d64:	631a      	str	r2, [r3, #48]	; 0x30
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	64da      	str	r2, [r3, #76]	; 0x4c
 8007d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d74:	61bb      	str	r3, [r7, #24]
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	f383 8810 	msr	PRIMASK, r3
        _tx_thread_system_suspend(thread_ptr);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fd49 	bl	8008814 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007d82:	f3ef 8310 	mrs	r3, PRIMASK
 8007d86:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007d88:	b672      	cpsid	i
    return(primask_value);
 8007d8a:	69fb      	ldr	r3, [r7, #28]
        TX_DISABLE
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
        thread_ptr -> tx_thread_priority =  new_priority;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	683a      	ldr	r2, [r7, #0]
 8007d92:	62da      	str	r2, [r3, #44]	; 0x2c
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	d905      	bls.n	8007dac <_tx_mutex_priority_change+0xb0>
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	63da      	str	r2, [r3, #60]	; 0x3c
 8007daa:	e002      	b.n	8007db2 <_tx_mutex_priority_change+0xb6>
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	683a      	ldr	r2, [r7, #0]
 8007db0:	63da      	str	r2, [r3, #60]	; 0x3c
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f383 8810 	msr	PRIMASK, r3
        _tx_thread_system_resume(thread_ptr);
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fc35 	bl	800862c <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007dc8:	b672      	cpsid	i
    return(primask_value);
 8007dca:	697b      	ldr	r3, [r7, #20]
        TX_DISABLE
 8007dcc:	637b      	str	r3, [r7, #52]	; 0x34
        next_execute_ptr =  _tx_thread_execute_ptr;
 8007dce:	4b22      	ldr	r3, [pc, #136]	; (8007e58 <_tx_mutex_priority_change+0x15c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
        if (thread_ptr != next_execute_ptr)
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d034      	beq.n	8007e46 <_tx_mutex_priority_change+0x14a>
            if (thread_ptr -> tx_thread_state == TX_READY)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d130      	bne.n	8007e46 <_tx_mutex_priority_change+0x14a>
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d811      	bhi.n	8007e14 <_tx_mutex_priority_change+0x118>
                    if (thread_ptr == execute_ptr)
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	429a      	cmp	r2, r3
 8007df6:	d126      	bne.n	8007e46 <_tx_mutex_priority_change+0x14a>
                        _tx_thread_execute_ptr =  thread_ptr;
 8007df8:	4a17      	ldr	r2, [pc, #92]	; (8007e58 <_tx_mutex_priority_change+0x15c>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
                        if (original_priority < new_priority)
 8007dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d21f      	bcs.n	8007e46 <_tx_mutex_priority_change+0x14a>
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0a:	4915      	ldr	r1, [pc, #84]	; (8007e60 <_tx_mutex_priority_change+0x164>)
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e12:	e018      	b.n	8007e46 <_tx_mutex_priority_change+0x14a>
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d212      	bcs.n	8007e46 <_tx_mutex_priority_change+0x14a>
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d80c      	bhi.n	8007e46 <_tx_mutex_priority_change+0x14a>
                            _tx_thread_execute_ptr =  thread_ptr;
 8007e2c:	4a0a      	ldr	r2, [pc, #40]	; (8007e58 <_tx_mutex_priority_change+0x15c>)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6013      	str	r3, [r2, #0]
                            if (original_priority < new_priority)
 8007e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	429a      	cmp	r2, r3
 8007e38:	d205      	bcs.n	8007e46 <_tx_mutex_priority_change+0x14a>
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	4908      	ldr	r1, [pc, #32]	; (8007e60 <_tx_mutex_priority_change+0x164>)
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e48:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f383 8810 	msr	PRIMASK, r3
}
 8007e50:	bf00      	nop
 8007e52:	3738      	adds	r7, #56	; 0x38
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	24000420 	.word	0x24000420
 8007e5c:	24000418 	.word	0x24000418
 8007e60:	24000380 	.word	0x24000380

08007e64 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b0a0      	sub	sp, #128	; 0x80
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	673b      	str	r3, [r7, #112]	; 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007e70:	f3ef 8310 	mrs	r3, PRIMASK
 8007e74:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007e76:	b672      	cpsid	i
    return(primask_value);
 8007e78:	6c7b      	ldr	r3, [r7, #68]	; 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 8007e7a:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 81b6 	beq.w	80081f2 <_tx_mutex_put+0x38e>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8007e8c:	4b87      	ldr	r3, [pc, #540]	; (80080ac <_tx_mutex_put+0x248>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	663b      	str	r3, [r7, #96]	; 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d00a      	beq.n	8007eb2 <_tx_mutex_put+0x4e>
        {
        
            /* Determine if the preempt disable flag is set, indicating that 
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8007e9c:	4b84      	ldr	r3, [pc, #528]	; (80080b0 <_tx_mutex_put+0x24c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d106      	bne.n	8007eb2 <_tx_mutex_put+0x4e>
 8007ea4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ea6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8007ea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eaa:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8007eae:	231e      	movs	r3, #30
 8007eb0:	673b      	str	r3, [r7, #112]	; 0x70
            }
        }
        
        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8007eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eb4:	2b20      	cmp	r3, #32
 8007eb6:	f040 81a3 	bne.w	8008200 <_tx_mutex_put+0x39c>
        {
    
            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	1e5a      	subs	r2, r3, #1
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	689b      	ldr	r3, [r3, #8]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d007      	beq.n	8007edc <_tx_mutex_put+0x78>
 8007ecc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ed2:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	673b      	str	r3, [r7, #112]	; 0x70
 8007eda:	e191      	b.n	8008200 <_tx_mutex_put+0x39c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8007edc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d107      	bne.n	8007ef2 <_tx_mutex_put+0x8e>
 8007ee2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007ee4:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee8:	f383 8810 	msr	PRIMASK, r3

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8007eec:	2300      	movs	r3, #0
 8007eee:	673b      	str	r3, [r7, #112]	; 0x70
 8007ef0:	e186      	b.n	8008200 <_tx_mutex_put+0x39c>
                    /* The mutex is now available.   */
            
                    /* Remove this mutex from the owned mutex list.  */
                    
                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8007ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ef4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007efc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8007f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d104      	bne.n	8007f14 <_tx_mutex_put+0xb0>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8007f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8007f12:	e015      	b.n	8007f40 <_tx_mutex_put+0xdc>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f18:	66fb      	str	r3, [r7, #108]	; 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	65fb      	str	r3, [r7, #92]	; 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8007f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f24:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8007f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f28:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f2a:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8007f2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d103      	bne.n	8007f40 <_tx_mutex_put+0xdc>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8007f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f3a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d10d      	bne.n	8007f64 <_tx_mutex_put+0x100>
                    {
                    
                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	691b      	ldr	r3, [r3, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d109      	bne.n	8007f64 <_tx_mutex_put+0x100>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	60da      	str	r2, [r3, #12]
 8007f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f58:	637b      	str	r3, [r7, #52]	; 0x34
 8007f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5c:	f383 8810 	msr	PRIMASK, r3
                            
                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8007f60:	2300      	movs	r3, #0
 8007f62:	673b      	str	r3, [r7, #112]	; 0x70
                        }
                    }
                     
                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8007f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f66:	2b20      	cmp	r3, #32
 8007f68:	f040 814a 	bne.w	8008200 <_tx_mutex_put+0x39c>
                    {
   
                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	67bb      	str	r3, [r7, #120]	; 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8007f70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f76:	677b      	str	r3, [r7, #116]	; 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d13f      	bne.n	8008000 <_tx_mutex_put+0x19c>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8007f80:	4b4b      	ldr	r3, [pc, #300]	; (80080b0 <_tx_mutex_put+0x24c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	4a4a      	ldr	r2, [pc, #296]	; (80080b0 <_tx_mutex_put+0x24c>)
 8007f88:	6013      	str	r3, [r2, #0]
 8007f8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007f8c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	f383 8810 	msr	PRIMASK, r3
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007f94:	2320      	movs	r3, #32
 8007f96:	66bb      	str	r3, [r7, #104]	; 0x68
                            
                            /* Search the owned mutexes for this thread to determine the highest priority for this 
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8007f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8007fa0:	e016      	b.n	8007fd0 <_tx_mutex_put+0x16c>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8007fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d107      	bne.n	8007fba <_tx_mutex_put+0x156>
                                {
                            
                                    /* Determine if highest priority field of the mutex is higher than the priority to 
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8007faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d902      	bls.n	8007fba <_tx_mutex_put+0x156>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8007fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fb8:	66bb      	str	r3, [r7, #104]	; 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8007fba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	66fb      	str	r3, [r7, #108]	; 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8007fc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fc2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d101      	bne.n	8007fd0 <_tx_mutex_put+0x16c>
                                {
                            
                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	66fb      	str	r3, [r7, #108]	; 0x6c
                            while (next_mutex != TX_NULL)
 8007fd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1e5      	bne.n	8007fa2 <_tx_mutex_put+0x13e>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8007fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8007fdc:	b672      	cpsid	i
    return(primask_value);
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8007fe0:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8007fe2:	4b33      	ldr	r3, [pc, #204]	; (80080b0 <_tx_mutex_put+0x24c>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	4a31      	ldr	r2, [pc, #196]	; (80080b0 <_tx_mutex_put+0x24c>)
 8007fea:	6013      	str	r3, [r2, #0]
#endif
                       
                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8007fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ff0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                                
                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8007ff4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007ff6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d201      	bcs.n	8008000 <_tx_mutex_put+0x19c>
                            {
                            
                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8007ffc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ffe:	677b      	str	r3, [r7, #116]	; 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b01      	cmp	r3, #1
 8008006:	d91b      	bls.n	8008040 <_tx_mutex_put+0x1dc>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	691b      	ldr	r3, [r3, #16]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d117      	bne.n	8008040 <_tx_mutex_put+0x1dc>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8008010:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <_tx_mutex_put+0x24c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	3301      	adds	r3, #1
 8008016:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <_tx_mutex_put+0x24c>)
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	f383 8810 	msr	PRIMASK, r3
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f7ff fdbd 	bl	8007ba4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800802a:	f3ef 8310 	mrs	r3, PRIMASK
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008030:	b672      	cpsid	i
    return(primask_value);
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8008034:	67fb      	str	r3, [r7, #124]	; 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8008036:	4b1e      	ldr	r3, [pc, #120]	; (80080b0 <_tx_mutex_put+0x24c>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	3b01      	subs	r3, #1
 800803c:	4a1c      	ldr	r2, [pc, #112]	; (80080b0 <_tx_mutex_put+0x24c>)
 800803e:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	699b      	ldr	r3, [r3, #24]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d135      	bne.n	80080b4 <_tx_mutex_put+0x250>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008048:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <_tx_mutex_put+0x24c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <_tx_mutex_put+0x24c>)
 8008050:	6013      	str	r3, [r2, #0]
 8008052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008054:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	f383 8810 	msr	PRIMASK, r3
                            /* Mutex is not owned, but it is possible that a thread that 
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2220      	movs	r2, #32
 8008060:	629a      	str	r2, [r3, #40]	; 0x28
  
                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008068:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800806a:	429a      	cmp	r2, r3
 800806c:	d005      	beq.n	800807a <_tx_mutex_put+0x216>
                            {
                      
                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8008074:	4618      	mov	r0, r3
 8008076:	f7ff fe41 	bl	8007cfc <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800807a:	f3ef 8310 	mrs	r3, PRIMASK
 800807e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008080:	b672      	cpsid	i
    return(primask_value);
 8008082:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8008084:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <_tx_mutex_put+0x24c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	3b01      	subs	r3, #1
 800808c:	4a08      	ldr	r2, [pc, #32]	; (80080b0 <_tx_mutex_put+0x24c>)
 800808e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008098:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 80080a0:	f000 fa8e 	bl	80085c0 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 80080a4:	2300      	movs	r3, #0
 80080a6:	673b      	str	r3, [r7, #112]	; 0x70
 80080a8:	e0aa      	b.n	8008200 <_tx_mutex_put+0x39c>
 80080aa:	bf00      	nop
 80080ac:	2400041c 	.word	0x2400041c
 80080b0:	24000418 	.word	0x24000418
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	699b      	ldr	r3, [r3, #24]
 80080b8:	667b      	str	r3, [r7, #100]	; 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d109      	bne.n	80080d6 <_tx_mutex_put+0x272>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	67bb      	str	r3, [r7, #120]	; 0x78
        
                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 80080c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2220      	movs	r2, #32
 80080d4:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 80080d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080dc:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 80080de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <_tx_mutex_put+0x296>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 80080e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	687a      	ldr	r2, [r7, #4]
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
 80080f8:	e012      	b.n	8008120 <_tx_mutex_put+0x2bc>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80080fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80080fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008100:	66fb      	str	r3, [r7, #108]	; 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8008102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008106:	65fb      	str	r3, [r7, #92]	; 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8008108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800810e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008118:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800811e:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8008120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008126:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008134:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	1e5a      	subs	r2, r3, #1
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	61da      	str	r2, [r3, #28]
                
                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	657b      	str	r3, [r7, #84]	; 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8008146:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008148:	2b00      	cmp	r3, #0
 800814a:	d103      	bne.n	8008154 <_tx_mutex_put+0x2f0>
                            {

                                /* Yes, the only suspended thread.  */
    
                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	619a      	str	r2, [r3, #24]
 8008152:	e00e      	b.n	8008172 <_tx_mutex_put+0x30e>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8008154:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	653b      	str	r3, [r7, #80]	; 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800815e:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8008160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008164:	64fb      	str	r3, [r7, #76]	; 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8008166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800816a:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800816c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008170:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8008172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008174:	2200      	movs	r2, #0
 8008176:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008178:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8008180:	4b22      	ldr	r3, [pc, #136]	; (800820c <_tx_mutex_put+0x3a8>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	4a21      	ldr	r2, [pc, #132]	; (800820c <_tx_mutex_put+0x3a8>)
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	f383 8810 	msr	PRIMASK, r3

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d124      	bne.n	80081e6 <_tx_mutex_put+0x382>
                            {

                                /* Yes, priority inheritance is requested.  */
        
                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d017      	beq.n	80081d4 <_tx_mutex_put+0x370>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f7ff fcfd 	bl	8007ba4 <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80081aa:	f3ef 8310 	mrs	r3, PRIMASK
 80081ae:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80081b0:	b672      	cpsid	i
    return(primask_value);
 80081b2:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 80081b4:	67fb      	str	r3, [r7, #124]	; 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	699b      	ldr	r3, [r3, #24]
 80081ba:	64bb      	str	r3, [r7, #72]	; 0x48
                                    if (suspended_thread != TX_NULL)
 80081bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <_tx_mutex_put+0x366>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 80081c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	629a      	str	r2, [r3, #40]	; 0x28
 80081ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081cc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f383 8810 	msr	PRIMASK, r3

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */
                    
                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80081d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80081da:	429a      	cmp	r2, r3
 80081dc:	d003      	beq.n	80081e6 <_tx_mutex_put+0x382>
                                {
        
                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80081de:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80081e0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80081e2:	f7ff fd8b 	bl	8007cfc <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80081e6:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80081e8:	f000 fa20 	bl	800862c <_tx_thread_system_resume>
#endif
                     
                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80081ec:	2300      	movs	r3, #0
 80081ee:	673b      	str	r3, [r7, #112]	; 0x70
 80081f0:	e006      	b.n	8008200 <_tx_mutex_put+0x39c>
 80081f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081f4:	60bb      	str	r3, [r7, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
    
        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80081fc:	231e      	movs	r3, #30
 80081fe:	673b      	str	r3, [r7, #112]	; 0x70
    }

    /* Return the completion status.  */
    return(status);
 8008200:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 8008202:	4618      	mov	r0, r3
 8008204:	3780      	adds	r7, #128	; 0x80
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	24000418 	.word	0x24000418

08008210 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b090      	sub	sp, #64	; 0x40
 8008214:	af00      	add	r7, sp, #0
 8008216:	60f8      	str	r0, [r7, #12]
 8008218:	60b9      	str	r1, [r7, #8]
 800821a:	607a      	str	r2, [r7, #4]
 800821c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800821e:	2300      	movs	r3, #0
 8008220:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8008222:	22b0      	movs	r2, #176	; 0xb0
 8008224:	2100      	movs	r1, #0
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f001 fa12 	bl	8009650 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	687a      	ldr	r2, [r7, #4]
 8008236:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008242:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008248:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800824e:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008254:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800825c:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008262:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2220      	movs	r2, #32
 8008268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800826c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826e:	637b      	str	r3, [r7, #52]	; 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8008270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008272:	3b01      	subs	r3, #1
 8008274:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008276:	4413      	add	r3, r2
 8008278:	637b      	str	r3, [r7, #52]	; 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800827e:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8008280:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008284:	429a      	cmp	r2, r3
 8008286:	d007      	beq.n	8008298 <_tx_thread_create+0x88>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2200      	movs	r2, #0
 8008292:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8008296:	e006      	b.n	80082a6 <_tx_thread_create+0x96>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800829c:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2203      	movs	r2, #3
 80082aa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	4a45      	ldr	r2, [pc, #276]	; (80083c4 <_tx_thread_create+0x1b4>)
 80082b0:	655a      	str	r2, [r3, #84]	; 0x54
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the 
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80082b8:	4943      	ldr	r1, [pc, #268]	; (80083c8 <_tx_thread_create+0x1b8>)
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f7f8 f8b0 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80082c0:	f3ef 8310 	mrs	r3, PRIMASK
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80082c6:	b672      	cpsid	i
    return(primask_value);
 80082c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80082ca:	633b      	str	r3, [r7, #48]	; 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4a3f      	ldr	r2, [pc, #252]	; (80083cc <_tx_thread_create+0x1bc>)
 80082d0:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80082d2:	4b3f      	ldr	r3, [pc, #252]	; (80083d0 <_tx_thread_create+0x1c0>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <_tx_thread_create+0xe2>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80082da:	4a3e      	ldr	r2, [pc, #248]	; (80083d4 <_tx_thread_create+0x1c4>)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80082f0:	e016      	b.n	8008320 <_tx_thread_create+0x110>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80082f2:	4b38      	ldr	r3, [pc, #224]	; (80083d4 <_tx_thread_create+0x1c4>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 80082f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082fe:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8008300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008302:	68fa      	ldr	r2, [r7, #12]
 8008304:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8008308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830a:	68fa      	ldr	r2, [r7, #12]
 800830c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008314:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800831c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }
    
    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8008320:	4b2b      	ldr	r3, [pc, #172]	; (80083d0 <_tx_thread_create+0x1c0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	3301      	adds	r3, #1
 8008326:	4a2a      	ldr	r2, [pc, #168]	; (80083d0 <_tx_thread_create+0x1c0>)
 8008328:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800832a:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <_tx_thread_create+0x1c8>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	3301      	adds	r3, #1
 8008330:	4a29      	ldr	r2, [pc, #164]	; (80083d8 <_tx_thread_create+0x1c8>)
 8008332:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8008334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008336:	2b01      	cmp	r3, #1
 8008338:	d128      	bne.n	800838c <_tx_thread_create+0x17c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800833a:	f3ef 8305 	mrs	r3, IPSR
 800833e:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8008340:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8008342:	4b26      	ldr	r3, [pc, #152]	; (80083dc <_tx_thread_create+0x1cc>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800834c:	d30d      	bcc.n	800836a <_tx_thread_create+0x15a>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is 
               not required, since interrupts are assumed to be disabled during 
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800834e:	4b24      	ldr	r3, [pc, #144]	; (80083e0 <_tx_thread_create+0x1d0>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8008354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d009      	beq.n	800836e <_tx_thread_create+0x15e>
            {
                
                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800835a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800835c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835e:	63bb      	str	r3, [r7, #56]	; 0x38

                /* For initialization, temporarily set the preemption-threshold to the 
                   priority level to make sure the highest-priority thread runs once 
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8008360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008366:	63da      	str	r2, [r3, #60]	; 0x3c
 8008368:	e001      	b.n	800836e <_tx_thread_create+0x15e>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800836a:	2300      	movs	r3, #0
 800836c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	f383 8810 	msr	PRIMASK, r3

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f000 f957 	bl	800862c <_tx_thread_system_resume>
#endif
 
        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800837e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008380:	2b00      	cmp	r3, #0
 8008382:	d01a      	beq.n	80083ba <_tx_thread_create+0x1aa>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8008384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008386:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008388:	63da      	str	r2, [r3, #60]	; 0x3c
 800838a:	e016      	b.n	80083ba <_tx_thread_create+0x1aa>
 800838c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008396:	f3ef 8310 	mrs	r3, PRIMASK
 800839a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800839c:	b672      	cpsid	i
    return(primask_value);
 800839e:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80083a0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <_tx_thread_create+0x1c8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	4a0b      	ldr	r2, [pc, #44]	; (80083d8 <_tx_thread_create+0x1c8>)
 80083aa:	6013      	str	r3, [r2, #0]
 80083ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ae:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80083b0:	69bb      	ldr	r3, [r7, #24]
 80083b2:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80083b6:	f000 f903 	bl	80085c0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80083ba:	2300      	movs	r3, #0
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3740      	adds	r7, #64	; 0x40
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	08008ac5 	.word	0x08008ac5
 80083c8:	0800845d 	.word	0x0800845d
 80083cc:	54485244 	.word	0x54485244
 80083d0:	24000410 	.word	0x24000410
 80083d4:	24000408 	.word	0x24000408
 80083d8:	24000418 	.word	0x24000418
 80083dc:	24000018 	.word	0x24000018
 80083e0:	24000420 	.word	0x24000420

080083e4 <_tx_thread_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80083e8:	4b12      	ldr	r3, [pc, #72]	; (8008434 <_tx_thread_initialize+0x50>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80083ee:	4b12      	ldr	r3, [pc, #72]	; (8008438 <_tx_thread_initialize+0x54>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <_tx_thread_initialize+0x58>)
 80083f6:	2200      	movs	r2, #0
 80083f8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80083fa:	4b11      	ldr	r3, [pc, #68]	; (8008440 <_tx_thread_initialize+0x5c>)
 80083fc:	2220      	movs	r2, #32
 80083fe:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8008400:	2280      	movs	r2, #128	; 0x80
 8008402:	2100      	movs	r1, #0
 8008404:	480f      	ldr	r0, [pc, #60]	; (8008444 <_tx_thread_initialize+0x60>)
 8008406:	f001 f923 	bl	8009650 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800840a:	4b0f      	ldr	r3, [pc, #60]	; (8008448 <_tx_thread_initialize+0x64>)
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8008410:	4b0e      	ldr	r3, [pc, #56]	; (800844c <_tx_thread_initialize+0x68>)
 8008412:	2200      	movs	r2, #0
 8008414:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8008416:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <_tx_thread_initialize+0x6c>)
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800841c:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <_tx_thread_initialize+0x70>)
 800841e:	2200      	movs	r2, #0
 8008420:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8008422:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <_tx_thread_initialize+0x74>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f043 7395 	orr.w	r3, r3, #19529728	; 0x12a0000
    _tx_build_options =  _tx_build_options 
 800842a:	4a0b      	ldr	r2, [pc, #44]	; (8008458 <_tx_thread_initialize+0x74>)
 800842c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	2400041c 	.word	0x2400041c
 8008438:	24000420 	.word	0x24000420
 800843c:	24000404 	.word	0x24000404
 8008440:	24000424 	.word	0x24000424
 8008444:	24000380 	.word	0x24000380
 8008448:	24000408 	.word	0x24000408
 800844c:	24000410 	.word	0x24000410
 8008450:	24000418 	.word	0x24000418
 8008454:	24000400 	.word	0x24000400
 8008458:	2400040c 	.word	0x2400040c

0800845c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008462:	4b18      	ldr	r3, [pc, #96]	; (80084c4 <_tx_thread_shell_entry+0x68>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8008474:	4b14      	ldr	r3, [pc, #80]	; (80084c8 <_tx_thread_shell_entry+0x6c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that 
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800847c:	4b12      	ldr	r3, [pc, #72]	; (80084c8 <_tx_thread_shell_entry+0x6c>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008484:	f3ef 8310 	mrs	r3, PRIMASK
 8008488:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800848a:	b672      	cpsid	i
    return(primask_value);
 800848c:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800848e:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2201      	movs	r2, #1
 800849a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2200      	movs	r2, #0
 80084a0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80084a2:	4b0a      	ldr	r3, [pc, #40]	; (80084cc <_tx_thread_shell_entry+0x70>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	4a08      	ldr	r2, [pc, #32]	; (80084cc <_tx_thread_shell_entry+0x70>)
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f383 8810 	msr	PRIMASK, r3
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f000 f9ac 	bl	8008814 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80084bc:	bf00      	nop
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}
 80084c4:	2400041c 	.word	0x2400041c
 80084c8:	24000400 	.word	0x24000400
 80084cc:	24000418 	.word	0x24000418

080084d0 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b08e      	sub	sp, #56	; 0x38
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80084d8:	f3ef 8310 	mrs	r3, PRIMASK
 80084dc:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80084de:	b672      	cpsid	i
    return(primask_value);
 80084e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80084e2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80084e4:	4b32      	ldr	r3, [pc, #200]	; (80085b0 <_tx_thread_sleep+0xe0>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80084ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d107      	bne.n	8008500 <_tx_thread_sleep+0x30>
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80084f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f6:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80084fa:	2313      	movs	r3, #19
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
 80084fe:	e051      	b.n	80085a4 <_tx_thread_sleep+0xd4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008500:	f3ef 8305 	mrs	r3, IPSR
 8008504:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8008506:	6a3a      	ldr	r2, [r7, #32]
    }
    
    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008508:	4b2a      	ldr	r3, [pc, #168]	; (80085b4 <_tx_thread_sleep+0xe4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4313      	orrs	r3, r2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <_tx_thread_sleep+0x52>
 8008512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008514:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800851c:	2313      	movs	r3, #19
 800851e:	637b      	str	r3, [r7, #52]	; 0x34
 8008520:	e040      	b.n	80085a4 <_tx_thread_sleep+0xd4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8008522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008524:	4a24      	ldr	r2, [pc, #144]	; (80085b8 <_tx_thread_sleep+0xe8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d107      	bne.n	800853a <_tx_thread_sleep+0x6a>
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	61bb      	str	r3, [r7, #24]
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
        
        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8008534:	2313      	movs	r3, #19
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
 8008538:	e034      	b.n	80085a4 <_tx_thread_sleep+0xd4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d107      	bne.n	8008550 <_tx_thread_sleep+0x80>
 8008540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE
      
        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800854a:	2300      	movs	r3, #0
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
 800854e:	e029      	b.n	80085a4 <_tx_thread_sleep+0xd4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8008550:	4b1a      	ldr	r3, [pc, #104]	; (80085bc <_tx_thread_sleep+0xec>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d007      	beq.n	8008568 <_tx_thread_sleep+0x98>
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE
        
            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8008562:	2313      	movs	r3, #19
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	e01d      	b.n	80085a4 <_tx_thread_sleep+0xd4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	2204      	movs	r2, #4
 800856c:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2201      	movs	r2, #1
 8008572:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800857c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8008582:	4b0e      	ldr	r3, [pc, #56]	; (80085bc <_tx_thread_sleep+0xec>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	3301      	adds	r3, #1
 8008588:	4a0c      	ldr	r2, [pc, #48]	; (80085bc <_tx_thread_sleep+0xec>)
 800858a:	6013      	str	r3, [r2, #0]
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	60fb      	str	r3, [r7, #12]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f383 8810 	msr	PRIMASK, r3

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8008596:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008598:	f000 f93c 	bl	8008814 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800859c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80085a2:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }
    
    /* Return completion status.  */
    return(status);
 80085a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3738      	adds	r7, #56	; 0x38
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	2400041c 	.word	0x2400041c
 80085b4:	24000018 	.word	0x24000018
 80085b8:	240004bc 	.word	0x240004bc
 80085bc:	24000418 	.word	0x24000418

080085c0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b089      	sub	sp, #36	; 0x24
 80085c4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80085c6:	4b15      	ldr	r3, [pc, #84]	; (800861c <_tx_thread_system_preempt_check+0x5c>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d11e      	bne.n	8008610 <_tx_thread_system_preempt_check+0x50>
    {
    
        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80085d2:	4b13      	ldr	r3, [pc, #76]	; (8008620 <_tx_thread_system_preempt_check+0x60>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80085d8:	4b12      	ldr	r3, [pc, #72]	; (8008624 <_tx_thread_system_preempt_check+0x64>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80085de:	69ba      	ldr	r2, [r7, #24]
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d014      	beq.n	8008610 <_tx_thread_system_preempt_check+0x50>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80085e6:	4b10      	ldr	r3, [pc, #64]	; (8008628 <_tx_thread_system_preempt_check+0x68>)
 80085e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80085ee:	f3ef 8305 	mrs	r3, IPSR
 80085f2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80085f4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10a      	bne.n	8008610 <_tx_thread_system_preempt_check+0x50>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80085fa:	f3ef 8310 	mrs	r3, PRIMASK
 80085fe:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8008600:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 8008602:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8008604:	b662      	cpsie	i
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f383 8810 	msr	PRIMASK, r3

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8008610:	bf00      	nop
 8008612:	3724      	adds	r7, #36	; 0x24
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	24000418 	.word	0x24000418
 8008620:	2400041c 	.word	0x2400041c
 8008624:	24000420 	.word	0x24000420
 8008628:	e000ed04 	.word	0xe000ed04

0800862c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b096      	sub	sp, #88	; 0x58
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008634:	f3ef 8310 	mrs	r3, PRIMASK
 8008638:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800863a:	b672      	cpsid	i
    return(primask_value);
 800863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800863e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008644:	2b00      	cmp	r3, #0
 8008646:	d005      	beq.n	8008654 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	334c      	adds	r3, #76	; 0x4c
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fead 	bl	80093ac <_tx_timer_system_deactivate>
 8008652:	e002      	b.n	800865a <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800865a:	4b67      	ldr	r3, [pc, #412]	; (80087f8 <_tx_thread_system_resume+0x1cc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	3b01      	subs	r3, #1
 8008660:	4a65      	ldr	r2, [pc, #404]	; (80087f8 <_tx_thread_system_resume+0x1cc>)
 8008662:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008668:	2b00      	cmp	r3, #0
 800866a:	d17e      	bne.n	800876a <_tx_thread_system_resume+0x13e>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread 
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 8093 	beq.w	800879c <_tx_thread_system_resume+0x170>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800867a:	2b00      	cmp	r3, #0
 800867c:	d16e      	bne.n	800875c <_tx_thread_system_resume+0x130>
                /* Resume the thread!  */
                
                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008688:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800868a:	4a5c      	ldr	r2, [pc, #368]	; (80087fc <_tx_thread_system_resume+0x1d0>)
 800868c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008692:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8008694:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d150      	bne.n	800873c <_tx_thread_system_resume+0x110>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800869a:	4958      	ldr	r1, [pc, #352]	; (80087fc <_tx_thread_system_resume+0x1d0>)
 800869c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80086b0:	2201      	movs	r2, #1
 80086b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086b4:	fa02 f303 	lsl.w	r3, r2, r3
 80086b8:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80086ba:	4b51      	ldr	r3, [pc, #324]	; (8008800 <_tx_thread_system_resume+0x1d4>)
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086c0:	4313      	orrs	r3, r2
 80086c2:	4a4f      	ldr	r2, [pc, #316]	; (8008800 <_tx_thread_system_resume+0x1d4>)
 80086c4:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80086c6:	4b4f      	ldr	r3, [pc, #316]	; (8008804 <_tx_thread_system_resume+0x1d8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086cc:	429a      	cmp	r2, r3
 80086ce:	d265      	bcs.n	800879c <_tx_thread_system_resume+0x170>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80086d0:	4a4c      	ldr	r2, [pc, #304]	; (8008804 <_tx_thread_system_resume+0x1d8>)
 80086d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086d4:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80086d6:	4b4c      	ldr	r3, [pc, #304]	; (8008808 <_tx_thread_system_resume+0x1dc>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	643b      	str	r3, [r7, #64]	; 0x40
                        
                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80086dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d103      	bne.n	80086ea <_tx_thread_system_resume+0xbe>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80086e2:	4a49      	ldr	r2, [pc, #292]	; (8008808 <_tx_thread_system_resume+0x1dc>)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6013      	str	r3, [r2, #0]
 80086e8:	e058      	b.n	800879c <_tx_thread_system_resume+0x170>
                        {
                        
                            /* Another thread has been scheduled for execution.  */
               
                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80086ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d253      	bcs.n	800879c <_tx_thread_system_resume+0x170>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80086f4:	4a44      	ldr	r2, [pc, #272]	; (8008808 <_tx_thread_system_resume+0x1dc>)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6013      	str	r3, [r2, #0]
 80086fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086fc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	f383 8810 	msr	PRIMASK, r3
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008704:	4b3c      	ldr	r3, [pc, #240]	; (80087f8 <_tx_thread_system_resume+0x1cc>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800870a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800870c:	2b00      	cmp	r3, #0
 800870e:	d16e      	bne.n	80087ee <_tx_thread_system_resume+0x1c2>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8008710:	4b3e      	ldr	r3, [pc, #248]	; (800880c <_tx_thread_system_resume+0x1e0>)
 8008712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008716:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008718:	f3ef 8305 	mrs	r3, IPSR
 800871c:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8008720:	2b00      	cmp	r3, #0
 8008722:	d164      	bne.n	80087ee <_tx_thread_system_resume+0x1c2>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008724:	f3ef 8310 	mrs	r3, PRIMASK
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
    return(primask_value);
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_primask_value();
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800872e:	b662      	cpsie	i
 8008730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008732:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008734:	6a3b      	ldr	r3, [r7, #32]
 8008736:	f383 8810 	msr	PRIMASK, r3
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800873a:	e058      	b.n	80087ee <_tx_thread_system_resume+0x1c2>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800873c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8008742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8008748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008752:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008758:	621a      	str	r2, [r3, #32]
 800875a:	e01f      	b.n	800879c <_tx_thread_system_resume+0x170>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2203      	movs	r2, #3
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
 8008768:	e018      	b.n	800879c <_tx_thread_system_resume+0x170>
        /* A resumption occurred in the middle of a previous thread suspension.  */
        
        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the 
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800876e:	2b01      	cmp	r3, #1
 8008770:	d014      	beq.n	800879c <_tx_thread_system_resume+0x170>
        {
            
            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008776:	2b02      	cmp	r3, #2
 8008778:	d010      	beq.n	800879c <_tx_thread_system_resume+0x170>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <_tx_thread_system_resume+0x164>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
 800878e:	e005      	b.n	800879c <_tx_thread_system_resume+0x170>
                }
                else
                {
                
                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2203      	movs	r2, #3
 800879a:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800879c:	4b1c      	ldr	r3, [pc, #112]	; (8008810 <_tx_thread_system_resume+0x1e4>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80087a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087a4:	61fb      	str	r3, [r7, #28]
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80087ac:	4b16      	ldr	r3, [pc, #88]	; (8008808 <_tx_thread_system_resume+0x1dc>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d01c      	beq.n	80087f0 <_tx_thread_system_resume+0x1c4>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <_tx_thread_system_resume+0x1cc>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80087bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d116      	bne.n	80087f0 <_tx_thread_system_resume+0x1c4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80087c2:	4b12      	ldr	r3, [pc, #72]	; (800880c <_tx_thread_system_resume+0x1e0>)
 80087c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087c8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80087ca:	f3ef 8305 	mrs	r3, IPSR
 80087ce:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80087d0:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10c      	bne.n	80087f0 <_tx_thread_system_resume+0x1c4>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80087d6:	f3ef 8310 	mrs	r3, PRIMASK
 80087da:	617b      	str	r3, [r7, #20]
    return(primask_value);
 80087dc:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 80087de:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80087e0:	b662      	cpsie	i
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f383 8810 	msr	PRIMASK, r3
 80087ec:	e000      	b.n	80087f0 <_tx_thread_system_resume+0x1c4>
                                return;
 80087ee:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80087f0:	3758      	adds	r7, #88	; 0x58
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	24000418 	.word	0x24000418
 80087fc:	24000380 	.word	0x24000380
 8008800:	24000404 	.word	0x24000404
 8008804:	24000424 	.word	0x24000424
 8008808:	24000420 	.word	0x24000420
 800880c:	e000ed04 	.word	0xe000ed04
 8008810:	2400041c 	.word	0x2400041c

08008814 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b09c      	sub	sp, #112	; 0x70
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800881c:	4b7a      	ldr	r3, [pc, #488]	; (8008a08 <_tx_thread_system_suspend+0x1f4>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	66fb      	str	r3, [r7, #108]	; 0x6c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008822:	f3ef 8310 	mrs	r3, PRIMASK
 8008826:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008828:	b672      	cpsid	i
    return(primask_value);
 800882a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800882c:	66bb      	str	r3, [r7, #104]	; 0x68

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008832:	429a      	cmp	r2, r3
 8008834:	d112      	bne.n	800885c <_tx_thread_system_suspend+0x48>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883a:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800883c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883e:	2b00      	cmp	r3, #0
 8008840:	d008      	beq.n	8008854 <_tx_thread_system_suspend+0x40>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8008842:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008848:	d004      	beq.n	8008854 <_tx_thread_system_suspend+0x40>
            {
            
                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	334c      	adds	r3, #76	; 0x4c
 800884e:	4618      	mov	r0, r3
 8008850:	f000 fd4a 	bl	80092e8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	4a6c      	ldr	r2, [pc, #432]	; (8008a0c <_tx_thread_system_suspend+0x1f8>)
 800885a:	6013      	str	r3, [r2, #0]
    }
#endif
    
    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800885c:	4b6c      	ldr	r3, [pc, #432]	; (8008a10 <_tx_thread_system_suspend+0x1fc>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3b01      	subs	r3, #1
 8008862:	4a6b      	ldr	r2, [pc, #428]	; (8008a10 <_tx_thread_system_suspend+0x1fc>)
 8008864:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	2b01      	cmp	r3, #1
 800886c:	f040 809d 	bne.w	80089aa <_tx_thread_system_suspend+0x196>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	663b      	str	r3, [r7, #96]	; 0x60

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a1b      	ldr	r3, [r3, #32]
 8008880:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8008882:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	429a      	cmp	r2, r3
 8008888:	d015      	beq.n	80088b6 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800888e:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8008890:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008892:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008894:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8008896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008898:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800889a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800889c:	4a5d      	ldr	r2, [pc, #372]	; (8008a14 <_tx_thread_system_suspend+0x200>)
 800889e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d152      	bne.n	8008950 <_tx_thread_system_suspend+0x13c>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80088aa:	495a      	ldr	r1, [pc, #360]	; (8008a14 <_tx_thread_system_suspend+0x200>)
 80088ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80088b4:	e04c      	b.n	8008950 <_tx_thread_system_suspend+0x13c>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head 
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80088b6:	4a57      	ldr	r2, [pc, #348]	; (8008a14 <_tx_thread_system_suspend+0x200>)
 80088b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ba:	2100      	movs	r1, #0
 80088bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80088c0:	2201      	movs	r2, #1
 80088c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088c4:	fa02 f303 	lsl.w	r3, r2, r3
 80088c8:	65bb      	str	r3, [r7, #88]	; 0x58
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80088ca:	4b53      	ldr	r3, [pc, #332]	; (8008a18 <_tx_thread_system_suspend+0x204>)
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088d0:	43db      	mvns	r3, r3
 80088d2:	4013      	ands	r3, r2
 80088d4:	4a50      	ldr	r2, [pc, #320]	; (8008a18 <_tx_thread_system_suspend+0x204>)
 80088d6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80088d8:	2300      	movs	r3, #0
 80088da:	657b      	str	r3, [r7, #84]	; 0x54
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80088dc:	4b4e      	ldr	r3, [pc, #312]	; (8008a18 <_tx_thread_system_suspend+0x204>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	653b      	str	r3, [r7, #80]	; 0x50

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80088e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d126      	bne.n	8008936 <_tx_thread_system_suspend+0x122>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80088e8:	4b4c      	ldr	r3, [pc, #304]	; (8008a1c <_tx_thread_system_suspend+0x208>)
 80088ea:	2220      	movs	r2, #32
 80088ec:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 80088ee:	4b4c      	ldr	r3, [pc, #304]	; (8008a20 <_tx_thread_system_suspend+0x20c>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80088f6:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80088f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088fa:	f383 8810 	msr	PRIMASK, r3
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80088fe:	4b44      	ldr	r3, [pc, #272]	; (8008a10 <_tx_thread_system_suspend+0x1fc>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (combined_flags == ((ULONG) 0))
 8008904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d176      	bne.n	80089f8 <_tx_thread_system_suspend+0x1e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800890a:	4b46      	ldr	r3, [pc, #280]	; (8008a24 <_tx_thread_system_suspend+0x210>)
 800890c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008912:	f3ef 8305 	mrs	r3, IPSR
 8008916:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(ipsr_value);
 8008918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    if (__get_ipsr_value() == 0)
 800891a:	2b00      	cmp	r3, #0
 800891c:	d16c      	bne.n	80089f8 <_tx_thread_system_suspend+0x1e4>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800891e:	f3ef 8310 	mrs	r3, PRIMASK
 8008922:	63bb      	str	r3, [r7, #56]	; 0x38
    return(primask_value);
 8008924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
        interrupt_save = __get_primask_value();
 8008926:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8008928:	b662      	cpsie	i
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800892e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008930:	f383 8810 	msr	PRIMASK, r3
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8008934:	e060      	b.n	80089f8 <_tx_thread_system_suspend+0x1e4>
            {
            
                /* Other threads at different priority levels are ready to run.  */
            
                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8008936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008938:	fa93 f3a3 	rbit	r3, r3
 800893c:	653b      	str	r3, [r7, #80]	; 0x50
 800893e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008940:	fab3 f383 	clz	r3, r3
 8008944:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8008946:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008948:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800894a:	4413      	add	r3, r2
 800894c:	4a33      	ldr	r2, [pc, #204]	; (8008a1c <_tx_thread_system_suspend+0x208>)
 800894e:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8008950:	4b33      	ldr	r3, [pc, #204]	; (8008a20 <_tx_thread_system_suspend+0x20c>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	429a      	cmp	r2, r3
 8008958:	d127      	bne.n	80089aa <_tx_thread_system_suspend+0x196>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800895a:	4b30      	ldr	r3, [pc, #192]	; (8008a1c <_tx_thread_system_suspend+0x208>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a2d      	ldr	r2, [pc, #180]	; (8008a14 <_tx_thread_system_suspend+0x200>)
 8008960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008964:	4a2e      	ldr	r2, [pc, #184]	; (8008a20 <_tx_thread_system_suspend+0x20c>)
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	f383 8810 	msr	PRIMASK, r3
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8008972:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <_tx_thread_system_suspend+0x1fc>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	64fb      	str	r3, [r7, #76]	; 0x4c
            if (combined_flags == ((ULONG) 0))
 8008978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800897a:	2b00      	cmp	r3, #0
 800897c:	d13e      	bne.n	80089fc <_tx_thread_system_suspend+0x1e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800897e:	4b29      	ldr	r3, [pc, #164]	; (8008a24 <_tx_thread_system_suspend+0x210>)
 8008980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008984:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008986:	f3ef 8305 	mrs	r3, IPSR
 800898a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800898e:	2b00      	cmp	r3, #0
 8008990:	d134      	bne.n	80089fc <_tx_thread_system_suspend+0x1e8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008992:	f3ef 8310 	mrs	r3, PRIMASK
 8008996:	627b      	str	r3, [r7, #36]	; 0x24
    return(primask_value);
 8008998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_primask_value();
 800899a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 800899c:	b662      	cpsie	i
 800899e:	6a3b      	ldr	r3, [r7, #32]
 80089a0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f383 8810 	msr	PRIMASK, r3
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80089a8:	e028      	b.n	80089fc <_tx_thread_system_suspend+0x1e8>
 80089aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ac:	61bb      	str	r3, [r7, #24]
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80089b4:	4b1a      	ldr	r3, [pc, #104]	; (8008a20 <_tx_thread_system_suspend+0x20c>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d020      	beq.n	8008a00 <_tx_thread_system_suspend+0x1ec>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80089be:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <_tx_thread_system_suspend+0x1fc>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (combined_flags == ((ULONG) 0))
 80089c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d11a      	bne.n	8008a00 <_tx_thread_system_suspend+0x1ec>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80089ca:	4b16      	ldr	r3, [pc, #88]	; (8008a24 <_tx_thread_system_suspend+0x210>)
 80089cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80089d2:	f3ef 8305 	mrs	r3, IPSR
 80089d6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80089d8:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d110      	bne.n	8008a00 <_tx_thread_system_suspend+0x1ec>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80089de:	f3ef 8310 	mrs	r3, PRIMASK
 80089e2:	613b      	str	r3, [r7, #16]
    return(primask_value);
 80089e4:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 80089e6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80089e8:	b662      	cpsie	i
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	f383 8810 	msr	PRIMASK, r3
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 80089f4:	bf00      	nop
 80089f6:	e003      	b.n	8008a00 <_tx_thread_system_suspend+0x1ec>
                return;
 80089f8:	bf00      	nop
 80089fa:	e002      	b.n	8008a02 <_tx_thread_system_suspend+0x1ee>
            return;
 80089fc:	bf00      	nop
 80089fe:	e000      	b.n	8008a02 <_tx_thread_system_suspend+0x1ee>
    return;
 8008a00:	bf00      	nop
}
 8008a02:	3770      	adds	r7, #112	; 0x70
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2400041c 	.word	0x2400041c
 8008a0c:	240004b0 	.word	0x240004b0
 8008a10:	24000418 	.word	0x24000418
 8008a14:	24000380 	.word	0x24000380
 8008a18:	24000404 	.word	0x24000404
 8008a1c:	24000424 	.word	0x24000424
 8008a20:	24000420 	.word	0x24000420
 8008a24:	e000ed04 	.word	0xe000ed04

08008a28 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8008a2e:	4b1f      	ldr	r3, [pc, #124]	; (8008aac <_tx_thread_time_slice+0x84>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008a34:	f3ef 8310 	mrs	r3, PRIMASK
 8008a38:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008a3a:	b672      	cpsid	i
    return(primask_value);
 8008a3c:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8008a3e:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8008a40:	4b1b      	ldr	r3, [pc, #108]	; (8008ab0 <_tx_thread_time_slice+0x88>)
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d024      	beq.n	8008a96 <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d120      	bne.n	8008a96 <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	4a14      	ldr	r2, [pc, #80]	; (8008ab4 <_tx_thread_time_slice+0x8c>)
 8008a62:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	6a1b      	ldr	r3, [r3, #32]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d013      	beq.n	8008a96 <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d10d      	bne.n	8008a96 <_tx_thread_time_slice+0x6e>
                
                    /* Preemption-threshold is not being used by this thread.  */
        
                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	6a12      	ldr	r2, [r2, #32]
 8008a82:	490d      	ldr	r1, [pc, #52]	; (8008ab8 <_tx_thread_time_slice+0x90>)
 8008a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
                    /* Designate the highest priority thread as the one to execute.  Don't use this 
                       thread's priority as an index just in case a higher priority thread is now 
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8008a88:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <_tx_thread_time_slice+0x94>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a0a      	ldr	r2, [pc, #40]	; (8008ab8 <_tx_thread_time_slice+0x90>)
 8008a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a92:	4a0b      	ldr	r2, [pc, #44]	; (8008ac0 <_tx_thread_time_slice+0x98>)
 8008a94:	6013      	str	r3, [r2, #0]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f383 8810 	msr	PRIMASK, r3

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8008aa0:	bf00      	nop
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr
 8008aac:	2400041c 	.word	0x2400041c
 8008ab0:	24000984 	.word	0x24000984
 8008ab4:	240004b0 	.word	0x240004b0
 8008ab8:	24000380 	.word	0x24000380
 8008abc:	24000424 	.word	0x24000424
 8008ac0:	24000420 	.word	0x24000420

08008ac4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08a      	sub	sp, #40	; 0x28
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008ad0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ad4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008ad6:	b672      	cpsid	i
    return(primask_value);
 8008ad8:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8008ada:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d10d      	bne.n	8008b00 <_tx_thread_timeout+0x3c>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8008ae4:	4b12      	ldr	r3, [pc, #72]	; (8008b30 <_tx_thread_timeout+0x6c>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	3301      	adds	r3, #1
 8008aea:	4a11      	ldr	r2, [pc, #68]	; (8008b30 <_tx_thread_timeout+0x6c>)
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8008af8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008afa:	f7ff fd97 	bl	800862c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8008afe:	e012      	b.n	8008b26 <_tx_thread_timeout+0x62>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b04:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8008b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b08:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	60fb      	str	r3, [r7, #12]
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f383 8810 	msr	PRIMASK, r3
        if (suspend_cleanup != TX_NULL)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <_tx_thread_timeout+0x62>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	69b9      	ldr	r1, [r7, #24]
 8008b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b24:	4798      	blx	r3
}
 8008b26:	bf00      	nop
 8008b28:	3728      	adds	r7, #40	; 0x28
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop
 8008b30:	24000418 	.word	0x24000418

08008b34 <_tx_time_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008b3a:	f3ef 8310 	mrs	r3, PRIMASK
 8008b3e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008b40:	b672      	cpsid	i
    return(primask_value);
 8008b42:	683b      	ldr	r3, [r7, #0]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8008b44:	60fb      	str	r3, [r7, #12]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8008b46:	4b07      	ldr	r3, [pc, #28]	; (8008b64 <_tx_time_get+0x30>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60bb      	str	r3, [r7, #8]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8008b56:	68bb      	ldr	r3, [r7, #8]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	24000988 	.word	0x24000988

08008b68 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, 
                                    ULONG memory_size,  ULONG wait_option)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08a      	sub	sp, #40	; 0x28
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	60f8      	str	r0, [r7, #12]
 8008b70:	60b9      	str	r1, [r7, #8]
 8008b72:	607a      	str	r2, [r7, #4]
 8008b74:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008b76:	2300      	movs	r3, #0
 8008b78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <_txe_byte_allocate+0x1e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008b80:	2302      	movs	r3, #2
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
 8008b84:	e029      	b.n	8008bda <_txe_byte_allocate+0x72>
    }
    
    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a2d      	ldr	r2, [pc, #180]	; (8008c40 <_txe_byte_allocate+0xd8>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d002      	beq.n	8008b96 <_txe_byte_allocate+0x2e>
    {
        
        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008b90:	2302      	movs	r3, #2
 8008b92:	627b      	str	r3, [r7, #36]	; 0x24
 8008b94:	e021      	b.n	8008bda <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d102      	bne.n	8008ba2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008ba0:	e01b      	b.n	8008bda <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008ba8:	2305      	movs	r3, #5
 8008baa:	627b      	str	r3, [r7, #36]	; 0x24
 8008bac:	e015      	b.n	8008bda <_txe_byte_allocate+0x72>
    }
    
    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	69db      	ldr	r3, [r3, #28]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d902      	bls.n	8008bbe <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8008bb8:	2305      	movs	r3, #5
 8008bba:	627b      	str	r3, [r7, #36]	; 0x24
 8008bbc:	e00d      	b.n	8008bda <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00a      	beq.n	8008bda <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bc4:	f3ef 8305 	mrs	r3, IPSR
 8008bc8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8008bca:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008bcc:	4b1d      	ldr	r3, [pc, #116]	; (8008c44 <_txe_byte_allocate+0xdc>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <_txe_byte_allocate+0x72>
            {
        
                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008bd6:	2304      	movs	r3, #4
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR
    
    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8008bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d108      	bne.n	8008bf2 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008be0:	4b19      	ldr	r3, [pc, #100]	; (8008c48 <_txe_byte_allocate+0xe0>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	4a18      	ldr	r2, [pc, #96]	; (8008c4c <_txe_byte_allocate+0xe4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d101      	bne.n	8008bf2 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008bee:	2313      	movs	r3, #19
 8008bf0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d114      	bne.n	8008c22 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008bf8:	f3ef 8305 	mrs	r3, IPSR
 8008bfc:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008bfe:	69ba      	ldr	r2, [r7, #24]
    {
    
        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008c00:	4b10      	ldr	r3, [pc, #64]	; (8008c44 <_txe_byte_allocate+0xdc>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00b      	beq.n	8008c22 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008c0a:	f3ef 8305 	mrs	r3, IPSR
 8008c0e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008c10:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008c12:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <_txe_byte_allocate+0xdc>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008c1c:	d201      	bcs.n	8008c22 <_txe_byte_allocate+0xba>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008c1e:	2313      	movs	r3, #19
 8008c20:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	68b9      	ldr	r1, [r7, #8]
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7fe fa7a 	bl	8007128 <_tx_byte_allocate>
 8008c34:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3728      	adds	r7, #40	; 0x28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	42595445 	.word	0x42595445
 8008c44:	24000018 	.word	0x24000018
 8008c48:	2400041c 	.word	0x2400041c
 8008c4c:	240004bc 	.word	0x240004bc

08008c50 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b090      	sub	sp, #64	; 0x40
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d102      	bne.n	8008c6e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c68:	2302      	movs	r3, #2
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c6c:	e06f      	b.n	8008d4e <_txe_byte_pool_create+0xfe>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8008c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c70:	2b34      	cmp	r3, #52	; 0x34
 8008c72:	d002      	beq.n	8008c7a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8008c74:	2302      	movs	r3, #2
 8008c76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c78:	e069      	b.n	8008d4e <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008c80:	b672      	cpsid	i
    return(primask_value);
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {
    
        /* Disable interrupts.  */
        TX_DISABLE
 8008c84:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008c86:	4b39      	ldr	r3, [pc, #228]	; (8008d6c <_txe_byte_pool_create+0x11c>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	4a37      	ldr	r2, [pc, #220]	; (8008d6c <_txe_byte_pool_create+0x11c>)
 8008c8e:	6013      	str	r3, [r2, #0]
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c96:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008c9a:	4b35      	ldr	r3, [pc, #212]	; (8008d70 <_txe_byte_pool_create+0x120>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ca4:	e009      	b.n	8008cba <_txe_byte_pool_create+0x6a>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d00b      	beq.n	8008cc6 <_txe_byte_pool_create+0x76>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8008cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8008cba:	4b2e      	ldr	r3, [pc, #184]	; (8008d74 <_txe_byte_pool_create+0x124>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d3f0      	bcc.n	8008ca6 <_txe_byte_pool_create+0x56>
 8008cc4:	e000      	b.n	8008cc8 <_txe_byte_pool_create+0x78>
                break;
 8008cc6:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008cc8:	f3ef 8310 	mrs	r3, PRIMASK
 8008ccc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008cce:	b672      	cpsid	i
    return(primask_value);
 8008cd0:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008cd2:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008cd4:	4b25      	ldr	r3, [pc, #148]	; (8008d6c <_txe_byte_pool_create+0x11c>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	4a24      	ldr	r2, [pc, #144]	; (8008d6c <_txe_byte_pool_create+0x11c>)
 8008cdc:	6013      	str	r3, [r2, #0]
 8008cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce0:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008ce2:	6a3b      	ldr	r3, [r7, #32]
 8008ce4:	f383 8810 	msr	PRIMASK, r3
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008ce8:	f7ff fc6a 	bl	80085c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8008cec:	68fa      	ldr	r2, [r7, #12]
 8008cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d102      	bne.n	8008cfa <_txe_byte_pool_create+0xaa>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cf8:	e029      	b.n	8008d4e <_txe_byte_pool_create+0xfe>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d102      	bne.n	8008d06 <_txe_byte_pool_create+0xb6>
        {
    
            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008d00:	2303      	movs	r3, #3
 8008d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d04:	e023      	b.n	8008d4e <_txe_byte_pool_create+0xfe>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b63      	cmp	r3, #99	; 0x63
 8008d0a:	d802      	bhi.n	8008d12 <_txe_byte_pool_create+0xc2>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8008d0c:	2305      	movs	r3, #5
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d10:	e01d      	b.n	8008d4e <_txe_byte_pool_create+0xfe>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008d12:	4b19      	ldr	r3, [pc, #100]	; (8008d78 <_txe_byte_pool_create+0x128>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1a:	4a18      	ldr	r2, [pc, #96]	; (8008d7c <_txe_byte_pool_create+0x12c>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d101      	bne.n	8008d24 <_txe_byte_pool_create+0xd4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008d20:	2313      	movs	r3, #19
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d24:	f3ef 8305 	mrs	r3, IPSR
 8008d28:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008d2a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008d2c:	4b14      	ldr	r3, [pc, #80]	; (8008d80 <_txe_byte_pool_create+0x130>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d00b      	beq.n	8008d4e <_txe_byte_pool_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008d36:	f3ef 8305 	mrs	r3, IPSR
 8008d3a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008d3c:	697a      	ldr	r2, [r7, #20]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008d3e:	4b10      	ldr	r3, [pc, #64]	; (8008d80 <_txe_byte_pool_create+0x130>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008d48:	d201      	bcs.n	8008d4e <_txe_byte_pool_create+0xfe>
                {
        
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008d4a:	2313      	movs	r3, #19
 8008d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d106      	bne.n	8008d62 <_txe_byte_pool_create+0x112>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	68b9      	ldr	r1, [r7, #8]
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f7fe fb18 	bl	8007390 <_tx_byte_pool_create>
 8008d60:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8008d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3740      	adds	r7, #64	; 0x40
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	24000418 	.word	0x24000418
 8008d70:	24000360 	.word	0x24000360
 8008d74:	2400037c 	.word	0x2400037c
 8008d78:	2400041c 	.word	0x2400041c
 8008d7c:	240004bc 	.word	0x240004bc
 8008d80:	24000018 	.word	0x24000018

08008d84 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b090      	sub	sp, #64	; 0x40
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
 8008d90:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008d92:	2300      	movs	r3, #0
 8008d94:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d102      	bne.n	8008da2 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008d9c:	231c      	movs	r3, #28
 8008d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008da0:	e04d      	b.n	8008e3e <_txe_mutex_create+0xba>
    }
    
    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	2b34      	cmp	r3, #52	; 0x34
 8008da6:	d002      	beq.n	8008dae <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008da8:	231c      	movs	r3, #28
 8008daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dac:	e047      	b.n	8008e3e <_txe_mutex_create+0xba>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008dae:	f3ef 8310 	mrs	r3, PRIMASK
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008db4:	b672      	cpsid	i
    return(primask_value);
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8008db8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8008dba:	4b38      	ldr	r3, [pc, #224]	; (8008e9c <_txe_mutex_create+0x118>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	4a36      	ldr	r2, [pc, #216]	; (8008e9c <_txe_mutex_create+0x118>)
 8008dc2:	6013      	str	r3, [r2, #0]
 8008dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dca:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8008dce:	4b34      	ldr	r3, [pc, #208]	; (8008ea0 <_txe_mutex_create+0x11c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd8:	e009      	b.n	8008dee <_txe_mutex_create+0x6a>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8008dda:	68fa      	ldr	r2, [r7, #12]
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dde:	429a      	cmp	r2, r3
 8008de0:	d00b      	beq.n	8008dfa <_txe_mutex_create+0x76>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8008de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8008de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dea:	3301      	adds	r3, #1
 8008dec:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dee:	4b2d      	ldr	r3, [pc, #180]	; (8008ea4 <_txe_mutex_create+0x120>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d3f0      	bcc.n	8008dda <_txe_mutex_create+0x56>
 8008df8:	e000      	b.n	8008dfc <_txe_mutex_create+0x78>
                break;
 8008dfa:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8008dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8008e00:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8008e02:	b672      	cpsid	i
    return(primask_value);
 8008e04:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008e06:	633b      	str	r3, [r7, #48]	; 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008e08:	4b24      	ldr	r3, [pc, #144]	; (8008e9c <_txe_mutex_create+0x118>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	4a23      	ldr	r2, [pc, #140]	; (8008e9c <_txe_mutex_create+0x118>)
 8008e10:	6013      	str	r3, [r2, #0]
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8008e16:	6a3b      	ldr	r3, [r7, #32]
 8008e18:	f383 8810 	msr	PRIMASK, r3
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008e1c:	f7ff fbd0 	bl	80085c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d102      	bne.n	8008e2e <_txe_mutex_create+0xaa>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8008e28:	231c      	movs	r3, #28
 8008e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2c:	e007      	b.n	8008e3e <_txe_mutex_create+0xba>
        }
        else
        {
        
            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d004      	beq.n	8008e3e <_txe_mutex_create+0xba>
            {

                if (inherit != TX_NO_INHERIT)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <_txe_mutex_create+0xba>
                {
        
                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8008e3a:	231f      	movs	r3, #31
 8008e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d11d      	bne.n	8008e80 <_txe_mutex_create+0xfc>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8008e44:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <_txe_mutex_create+0x124>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e4c:	4a17      	ldr	r2, [pc, #92]	; (8008eac <_txe_mutex_create+0x128>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d101      	bne.n	8008e56 <_txe_mutex_create+0xd2>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8008e52:	2313      	movs	r3, #19
 8008e54:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e56:	f3ef 8305 	mrs	r3, IPSR
 8008e5a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8008e5c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008e5e:	4b14      	ldr	r3, [pc, #80]	; (8008eb0 <_txe_mutex_create+0x12c>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <_txe_mutex_create+0xfc>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008e68:	f3ef 8305 	mrs	r3, IPSR
 8008e6c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008e6e:	697a      	ldr	r2, [r7, #20]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008e70:	4b0f      	ldr	r3, [pc, #60]	; (8008eb0 <_txe_mutex_create+0x12c>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4313      	orrs	r3, r2
 8008e76:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008e7a:	d201      	bcs.n	8008e80 <_txe_mutex_create+0xfc>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008e7c:	2313      	movs	r3, #19
 8008e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d105      	bne.n	8008e92 <_txe_mutex_create+0x10e>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	68b9      	ldr	r1, [r7, #8]
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	f7fe fd34 	bl	80078f8 <_tx_mutex_create>
 8008e90:	63f8      	str	r0, [r7, #60]	; 0x3c
    }

    /* Return completion status.  */
    return(status);
 8008e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3740      	adds	r7, #64	; 0x40
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	24000418 	.word	0x24000418
 8008ea0:	24000354 	.word	0x24000354
 8008ea4:	24000350 	.word	0x24000350
 8008ea8:	2400041c 	.word	0x2400041c
 8008eac:	240004bc 	.word	0x240004bc
 8008eb0:	24000018 	.word	0x24000018

08008eb4 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008ec8:	231c      	movs	r3, #28
 8008eca:	61fb      	str	r3, [r7, #28]
 8008ecc:	e01f      	b.n	8008f0e <_txe_mutex_get+0x5a>
    }
    
    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a21      	ldr	r2, [pc, #132]	; (8008f58 <_txe_mutex_get+0xa4>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d002      	beq.n	8008ede <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008ed8:	231c      	movs	r3, #28
 8008eda:	61fb      	str	r3, [r7, #28]
 8008edc:	e017      	b.n	8008f0e <_txe_mutex_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of 
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d014      	beq.n	8008f0e <_txe_mutex_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008ee4:	f3ef 8305 	mrs	r3, IPSR
 8008ee8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008eea:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <_txe_mutex_get+0xa8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d002      	beq.n	8008efc <_txe_mutex_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8008ef6:	2304      	movs	r3, #4
 8008ef8:	61fb      	str	r3, [r7, #28]
 8008efa:	e008      	b.n	8008f0e <_txe_mutex_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8008efc:	4b18      	ldr	r3, [pc, #96]	; (8008f60 <_txe_mutex_get+0xac>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	4a17      	ldr	r2, [pc, #92]	; (8008f64 <_txe_mutex_get+0xb0>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d101      	bne.n	8008f0e <_txe_mutex_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8008f0a:	2304      	movs	r3, #4
 8008f0c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d114      	bne.n	8008f3e <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f14:	f3ef 8305 	mrs	r3, IPSR
 8008f18:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008f1a:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008f1c:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <_txe_mutex_get+0xa8>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00b      	beq.n	8008f3e <_txe_mutex_get+0x8a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f26:	f3ef 8305 	mrs	r3, IPSR
 8008f2a:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008f2c:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008f2e:	4b0b      	ldr	r3, [pc, #44]	; (8008f5c <_txe_mutex_get+0xa8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008f38:	d201      	bcs.n	8008f3e <_txe_mutex_get+0x8a>
            {
        
                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008f3a:	2313      	movs	r3, #19
 8008f3c:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <_txe_mutex_get+0x9a>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8008f44:	6839      	ldr	r1, [r7, #0]
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f7fe fd2c 	bl	80079a4 <_tx_mutex_get>
 8008f4c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8008f4e:	69fb      	ldr	r3, [r7, #28]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3720      	adds	r7, #32
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	4d555445 	.word	0x4d555445
 8008f5c:	24000018 	.word	0x24000018
 8008f60:	2400041c 	.word	0x2400041c
 8008f64:	240004bc 	.word	0x240004bc

08008f68 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008f70:	2300      	movs	r3, #0
 8008f72:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d102      	bne.n	8008f80 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f7a:	231c      	movs	r3, #28
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	e01c      	b.n	8008fba <_txe_mutex_put+0x52>
    }
    
    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a13      	ldr	r2, [pc, #76]	; (8008fd4 <_txe_mutex_put+0x6c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d002      	beq.n	8008f90 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8008f8a:	231c      	movs	r3, #28
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e014      	b.n	8008fba <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008f90:	f3ef 8305 	mrs	r3, IPSR
 8008f94:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008f96:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <_txe_mutex_put+0x70>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00b      	beq.n	8008fba <_txe_mutex_put+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008fa2:	f3ef 8305 	mrs	r3, IPSR
 8008fa6:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8008fa8:	68fa      	ldr	r2, [r7, #12]
        {
    
            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8008faa:	4b0b      	ldr	r3, [pc, #44]	; (8008fd8 <_txe_mutex_put+0x70>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8008fb4:	d201      	bcs.n	8008fba <_txe_mutex_put+0x52>
            {
        
                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8008fb6:	2313      	movs	r3, #19
 8008fb8:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d103      	bne.n	8008fc8 <_txe_mutex_put+0x60>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f7fe ff4f 	bl	8007e64 <_tx_mutex_put>
 8008fc6:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8008fc8:	697b      	ldr	r3, [r7, #20]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3718      	adds	r7, #24
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	4d555445 	.word	0x4d555445
 8008fd8:	24000018 	.word	0x24000018

08008fdc <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, 
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b098      	sub	sp, #96	; 0x60
 8008fe0:	af06      	add	r7, sp, #24
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008fea:	2300      	movs	r3, #0
 8008fec:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008ff4:	230e      	movs	r3, #14
 8008ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ff8:	e0b5      	b.n	8009166 <_txe_thread_create+0x18a>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8008ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ffc:	2bb0      	cmp	r3, #176	; 0xb0
 8008ffe:	d002      	beq.n	8009006 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8009000:	230e      	movs	r3, #14
 8009002:	647b      	str	r3, [r7, #68]	; 0x44
 8009004:	e0af      	b.n	8009166 <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009006:	f3ef 8310 	mrs	r3, PRIMASK
 800900a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800900c:	b672      	cpsid	i
    return(primask_value);
 800900e:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8009010:	637b      	str	r3, [r7, #52]	; 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8009012:	4b62      	ldr	r3, [pc, #392]	; (800919c <_txe_thread_create+0x1c0>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3301      	adds	r3, #1
 8009018:	4a60      	ldr	r2, [pc, #384]	; (800919c <_txe_thread_create+0x1c0>)
 800901a:	6013      	str	r3, [r2, #0]
 800901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800901e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	f383 8810 	msr	PRIMASK, r3

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8009026:	2300      	movs	r3, #0
 8009028:	643b      	str	r3, [r7, #64]	; 0x40
        next_thread =  _tx_thread_created_ptr;
 800902a:	4b5d      	ldr	r3, [pc, #372]	; (80091a0 <_txe_thread_create+0x1c4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8009030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009032:	633b      	str	r3, [r7, #48]	; 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8009034:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009036:	3b01      	subs	r3, #1
 8009038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800903a:	4413      	add	r3, r2
 800903c:	633b      	str	r3, [r7, #48]	; 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8009042:	2300      	movs	r3, #0
 8009044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009046:	e02b      	b.n	80090a0 <_txe_thread_create+0xc4>
        {
        
            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904c:	429a      	cmp	r2, r3
 800904e:	d101      	bne.n	8009054 <_txe_thread_create+0x78>
            {
        
                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8009050:	2301      	movs	r3, #1
 8009052:	643b      	str	r3, [r7, #64]	; 0x40
            }
            
            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8009054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009056:	2b01      	cmp	r3, #1
 8009058:	d028      	beq.n	80090ac <_txe_thread_create+0xd0>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800905a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009060:	429a      	cmp	r2, r3
 8009062:	d308      	bcc.n	8009076 <_txe_thread_create+0x9a>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8009064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800906a:	429a      	cmp	r2, r3
 800906c:	d203      	bcs.n	8009076 <_txe_thread_create+0x9a>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8009072:	2301      	movs	r3, #1
 8009074:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8009076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800907c:	429a      	cmp	r2, r3
 800907e:	d308      	bcc.n	8009092 <_txe_thread_create+0xb6>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009086:	429a      	cmp	r2, r3
 8009088:	d203      	bcs.n	8009092 <_txe_thread_create+0xb6>
                {
        
                    /* This stack overlaps with an existing thread, clear the stack pointer to 
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800908a:	2300      	movs	r3, #0
 800908c:	653b      	str	r3, [r7, #80]	; 0x50
                    
                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800908e:	2301      	movs	r3, #1
 8009090:	643b      	str	r3, [r7, #64]	; 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8009092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009098:	63bb      	str	r3, [r7, #56]	; 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800909a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800909c:	3301      	adds	r3, #1
 800909e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090a0:	4b40      	ldr	r3, [pc, #256]	; (80091a4 <_txe_thread_create+0x1c8>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d3ce      	bcc.n	8009048 <_txe_thread_create+0x6c>
 80090aa:	e000      	b.n	80090ae <_txe_thread_create+0xd2>
                break;
 80090ac:	bf00      	nop
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80090ae:	f3ef 8310 	mrs	r3, PRIMASK
 80090b2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80090b4:	b672      	cpsid	i
    return(primask_value);
 80090b6:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80090b8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80090ba:	4b38      	ldr	r3, [pc, #224]	; (800919c <_txe_thread_create+0x1c0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	3b01      	subs	r3, #1
 80090c0:	4a36      	ldr	r2, [pc, #216]	; (800919c <_txe_thread_create+0x1c0>)
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	f383 8810 	msr	PRIMASK, r3
    
        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80090ce:	f7ff fa77 	bl	80085c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80090d2:	68fa      	ldr	r2, [r7, #12]
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d102      	bne.n	80090e0 <_txe_thread_create+0x104>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80090da:	230e      	movs	r3, #14
 80090dc:	647b      	str	r3, [r7, #68]	; 0x44
 80090de:	e042      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80090e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d102      	bne.n	80090ec <_txe_thread_create+0x110>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80090e6:	2303      	movs	r3, #3
 80090e8:	647b      	str	r3, [r7, #68]	; 0x44
 80090ea:	e03c      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d102      	bne.n	80090f8 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80090f2:	2303      	movs	r3, #3
 80090f4:	647b      	str	r3, [r7, #68]	; 0x44
 80090f6:	e036      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80090f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090fa:	2bc7      	cmp	r3, #199	; 0xc7
 80090fc:	d802      	bhi.n	8009104 <_txe_thread_create+0x128>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80090fe:	2305      	movs	r3, #5
 8009100:	647b      	str	r3, [r7, #68]	; 0x44
 8009102:	e030      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8009104:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009106:	2b1f      	cmp	r3, #31
 8009108:	d902      	bls.n	8009110 <_txe_thread_create+0x134>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800910a:	230f      	movs	r3, #15
 800910c:	647b      	str	r3, [r7, #68]	; 0x44
 800910e:	e02a      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8009110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009112:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009114:	429a      	cmp	r2, r3
 8009116:	d902      	bls.n	800911e <_txe_thread_create+0x142>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8009118:	2318      	movs	r3, #24
 800911a:	647b      	str	r3, [r7, #68]	; 0x44
 800911c:	e023      	b.n	8009166 <_txe_thread_create+0x18a>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800911e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009120:	2b01      	cmp	r3, #1
 8009122:	d902      	bls.n	800912a <_txe_thread_create+0x14e>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8009124:	2310      	movs	r3, #16
 8009126:	647b      	str	r3, [r7, #68]	; 0x44
 8009128:	e01d      	b.n	8009166 <_txe_thread_create+0x18a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800912a:	4b1f      	ldr	r3, [pc, #124]	; (80091a8 <_txe_thread_create+0x1cc>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8009130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009132:	4a1e      	ldr	r2, [pc, #120]	; (80091ac <_txe_thread_create+0x1d0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d101      	bne.n	800913c <_txe_thread_create+0x160>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8009138:	2313      	movs	r3, #19
 800913a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800913c:	f3ef 8305 	mrs	r3, IPSR
 8009140:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8009142:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8009144:	4b1a      	ldr	r3, [pc, #104]	; (80091b0 <_txe_thread_create+0x1d4>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4313      	orrs	r3, r2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d00b      	beq.n	8009166 <_txe_thread_create+0x18a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800914e:	f3ef 8305 	mrs	r3, IPSR
 8009152:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8009154:	693a      	ldr	r2, [r7, #16]
            {
    
                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8009156:	4b16      	ldr	r3, [pc, #88]	; (80091b0 <_txe_thread_create+0x1d4>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4313      	orrs	r3, r2
 800915c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8009160:	d201      	bcs.n	8009166 <_txe_thread_create+0x18a>
                {
            
                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8009162:	2313      	movs	r3, #19
 8009164:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8009166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009168:	2b00      	cmp	r3, #0
 800916a:	d112      	bne.n	8009192 <_txe_thread_create+0x1b6>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800916c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800916e:	9305      	str	r3, [sp, #20]
 8009170:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009176:	9303      	str	r3, [sp, #12]
 8009178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800917a:	9302      	str	r3, [sp, #8]
 800917c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800917e:	9301      	str	r3, [sp, #4]
 8009180:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	68b9      	ldr	r1, [r7, #8]
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff f840 	bl	8008210 <_tx_thread_create>
 8009190:	6478      	str	r0, [r7, #68]	; 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8009192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8009194:	4618      	mov	r0, r3
 8009196:	3748      	adds	r7, #72	; 0x48
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}
 800919c:	24000418 	.word	0x24000418
 80091a0:	24000408 	.word	0x24000408
 80091a4:	24000410 	.word	0x24000410
 80091a8:	2400041c 	.word	0x2400041c
 80091ac:	240004bc 	.word	0x240004bc
 80091b0:	24000018 	.word	0x24000018

080091b4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80091ba:	f3ef 8310 	mrs	r3, PRIMASK
 80091be:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80091c0:	b672      	cpsid	i
    return(primask_value);
 80091c2:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the 
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80091c4:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80091c6:	4b08      	ldr	r3, [pc, #32]	; (80091e8 <_tx_timer_expiration_process+0x34>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	3301      	adds	r3, #1
 80091cc:	4a06      	ldr	r2, [pc, #24]	; (80091e8 <_tx_timer_expiration_process+0x34>)
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	f383 8810 	msr	PRIMASK, r3

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 80091da:	4804      	ldr	r0, [pc, #16]	; (80091ec <_tx_timer_expiration_process+0x38>)
 80091dc:	f7ff fa26 	bl	800862c <_tx_thread_system_resume>
    }
    
    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80091e0:	bf00      	nop
 80091e2:	3710      	adds	r7, #16
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}
 80091e8:	24000418 	.word	0x24000418
 80091ec:	240004bc 	.word	0x240004bc

080091f0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 80091f0:	b590      	push	{r4, r7, lr}
 80091f2:	b089      	sub	sp, #36	; 0x24
 80091f4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 80091f6:	4b28      	ldr	r3, [pc, #160]	; (8009298 <_tx_timer_initialize+0xa8>)
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 80091fc:	4b27      	ldr	r3, [pc, #156]	; (800929c <_tx_timer_initialize+0xac>)
 80091fe:	2200      	movs	r2, #0
 8009200:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8009202:	4b27      	ldr	r3, [pc, #156]	; (80092a0 <_tx_timer_initialize+0xb0>)
 8009204:	2200      	movs	r2, #0
 8009206:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8009208:	4b26      	ldr	r3, [pc, #152]	; (80092a4 <_tx_timer_initialize+0xb4>)
 800920a:	2200      	movs	r2, #0
 800920c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800920e:	4b26      	ldr	r3, [pc, #152]	; (80092a8 <_tx_timer_initialize+0xb8>)
 8009210:	2200      	movs	r2, #0
 8009212:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8009214:	2280      	movs	r2, #128	; 0x80
 8009216:	2100      	movs	r1, #0
 8009218:	4824      	ldr	r0, [pc, #144]	; (80092ac <_tx_timer_initialize+0xbc>)
 800921a:	f000 fa19 	bl	8009650 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800921e:	4b24      	ldr	r3, [pc, #144]	; (80092b0 <_tx_timer_initialize+0xc0>)
 8009220:	4a22      	ldr	r2, [pc, #136]	; (80092ac <_tx_timer_initialize+0xbc>)
 8009222:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8009224:	4b23      	ldr	r3, [pc, #140]	; (80092b4 <_tx_timer_initialize+0xc4>)
 8009226:	4a21      	ldr	r2, [pc, #132]	; (80092ac <_tx_timer_initialize+0xbc>)
 8009228:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800922a:	4b23      	ldr	r3, [pc, #140]	; (80092b8 <_tx_timer_initialize+0xc8>)
 800922c:	4a23      	ldr	r2, [pc, #140]	; (80092bc <_tx_timer_initialize+0xcc>)
 800922e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8009230:	4b21      	ldr	r3, [pc, #132]	; (80092b8 <_tx_timer_initialize+0xc8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	3304      	adds	r3, #4
 8009236:	4a20      	ldr	r2, [pc, #128]	; (80092b8 <_tx_timer_initialize+0xc8>)
 8009238:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and 
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800923a:	4b21      	ldr	r3, [pc, #132]	; (80092c0 <_tx_timer_initialize+0xd0>)
 800923c:	4a21      	ldr	r2, [pc, #132]	; (80092c4 <_tx_timer_initialize+0xd4>)
 800923e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8009240:	4b21      	ldr	r3, [pc, #132]	; (80092c8 <_tx_timer_initialize+0xd8>)
 8009242:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009246:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8009248:	4b20      	ldr	r3, [pc, #128]	; (80092cc <_tx_timer_initialize+0xdc>)
 800924a:	2200      	movs	r2, #0
 800924c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {
      
        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread, 
 800924e:	4b1c      	ldr	r3, [pc, #112]	; (80092c0 <_tx_timer_initialize+0xd0>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a1d      	ldr	r2, [pc, #116]	; (80092c8 <_tx_timer_initialize+0xd8>)
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	491d      	ldr	r1, [pc, #116]	; (80092cc <_tx_timer_initialize+0xdc>)
 8009258:	6809      	ldr	r1, [r1, #0]
 800925a:	481c      	ldr	r0, [pc, #112]	; (80092cc <_tx_timer_initialize+0xdc>)
 800925c:	6800      	ldr	r0, [r0, #0]
 800925e:	2400      	movs	r4, #0
 8009260:	9405      	str	r4, [sp, #20]
 8009262:	2400      	movs	r4, #0
 8009264:	9404      	str	r4, [sp, #16]
 8009266:	9003      	str	r0, [sp, #12]
 8009268:	9102      	str	r1, [sp, #8]
 800926a:	9201      	str	r2, [sp, #4]
 800926c:	9300      	str	r3, [sp, #0]
 800926e:	4b18      	ldr	r3, [pc, #96]	; (80092d0 <_tx_timer_initialize+0xe0>)
 8009270:	4a18      	ldr	r2, [pc, #96]	; (80092d4 <_tx_timer_initialize+0xe4>)
 8009272:	4919      	ldr	r1, [pc, #100]	; (80092d8 <_tx_timer_initialize+0xe8>)
 8009274:	4819      	ldr	r0, [pc, #100]	; (80092dc <_tx_timer_initialize+0xec>)
 8009276:	f7fe ffcb 	bl	8008210 <_tx_thread_create>
 800927a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)
        
    } while (status != TX_SUCCESS);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d1e5      	bne.n	800924e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8009282:	4b17      	ldr	r3, [pc, #92]	; (80092e0 <_tx_timer_initialize+0xf0>)
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <_tx_timer_initialize+0xf4>)
 800928a:	2200      	movs	r2, #0
 800928c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800928e:	bf00      	nop
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	bd90      	pop	{r4, r7, pc}
 8009296:	bf00      	nop
 8009298:	24000988 	.word	0x24000988
 800929c:	240004b0 	.word	0x240004b0
 80092a0:	24000984 	.word	0x24000984
 80092a4:	240004ac 	.word	0x240004ac
 80092a8:	2400056c 	.word	0x2400056c
 80092ac:	2400042c 	.word	0x2400042c
 80092b0:	24000570 	.word	0x24000570
 80092b4:	24000428 	.word	0x24000428
 80092b8:	240004b8 	.word	0x240004b8
 80092bc:	240004a8 	.word	0x240004a8
 80092c0:	2400097c 	.word	0x2400097c
 80092c4:	2400057c 	.word	0x2400057c
 80092c8:	24000578 	.word	0x24000578
 80092cc:	240004b4 	.word	0x240004b4
 80092d0:	4154494d 	.word	0x4154494d
 80092d4:	0800941d 	.word	0x0800941d
 80092d8:	0800a508 	.word	0x0800a508
 80092dc:	240004bc 	.word	0x240004bc
 80092e0:	24000574 	.word	0x24000574
 80092e4:	24000980 	.word	0x24000980

080092e8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80092e8:	b480      	push	{r7}
 80092ea:	b089      	sub	sp, #36	; 0x24
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d04a      	beq.n	8009392 <_tx_timer_system_activate+0xaa>
    {
    
        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d046      	beq.n	8009392 <_tx_timer_system_activate+0xaa>
        {
    
            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	699b      	ldr	r3, [r3, #24]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d142      	bne.n	8009392 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b20      	cmp	r3, #32
 8009310:	d902      	bls.n	8009318 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8009312:	231f      	movs	r3, #31
 8009314:	61bb      	str	r3, [r7, #24]
 8009316:	e002      	b.n	800931e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	3b01      	subs	r3, #1
 800931c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */
    
                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800931e:	4b20      	ldr	r3, [pc, #128]	; (80093a0 <_tx_timer_system_activate+0xb8>)
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	4413      	add	r3, r2
 8009328:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800932a:	4b1e      	ldr	r3, [pc, #120]	; (80093a4 <_tx_timer_system_activate+0xbc>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	69fa      	ldr	r2, [r7, #28]
 8009330:	429a      	cmp	r2, r3
 8009332:	d30b      	bcc.n	800934c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4a1b      	ldr	r2, [pc, #108]	; (80093a4 <_tx_timer_system_activate+0xbc>)
 8009338:	6812      	ldr	r2, [r2, #0]
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	109b      	asrs	r3, r3, #2
 800933e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8009340:	4b19      	ldr	r3, [pc, #100]	; (80093a8 <_tx_timer_system_activate+0xc0>)
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	61fb      	str	r3, [r7, #28]
                }
    
                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d109      	bne.n	8009368 <_tx_timer_system_activate+0x80>
                {
                
                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	601a      	str	r2, [r3, #0]
 8009366:	e011      	b.n	800938c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8009392:	bf00      	nop
 8009394:	3724      	adds	r7, #36	; 0x24
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	24000428 	.word	0x24000428
 80093a4:	240004b8 	.word	0x240004b8
 80093a8:	24000570 	.word	0x24000570

080093ac <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b087      	sub	sp, #28
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d026      	beq.n	800940e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d108      	bne.n	80093e0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d117      	bne.n	8009408 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	e013      	b.n	8009408 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	693a      	ldr	r2, [r7, #16]
 80093f0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d105      	bne.n	8009408 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	697a      	ldr	r2, [r7, #20]
 8009400:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	619a      	str	r2, [r3, #24]
    }
}
 800940e:	bf00      	nop
 8009410:	371c      	adds	r7, #28
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
	...

0800941c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b094      	sub	sp, #80	; 0x50
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8009424:	2300      	movs	r3, #0
 8009426:	647b      	str	r3, [r7, #68]	; 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a6c      	ldr	r2, [pc, #432]	; (80095dc <_tx_timer_thread_entry+0x1c0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	f040 80d0 	bne.w	80095d2 <_tx_timer_thread_entry+0x1b6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009432:	f3ef 8310 	mrs	r3, PRIMASK
 8009436:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009438:	b672      	cpsid	i
    return(primask_value);
 800943a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {

            /* First, move the current list pointer and clear the timer 
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800943c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800943e:	4b68      	ldr	r3, [pc, #416]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d003      	beq.n	8009454 <_tx_timer_thread_entry+0x38>
            {
        
                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f107 020c 	add.w	r2, r7, #12
 8009452:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8009454:	4b62      	ldr	r3, [pc, #392]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	2200      	movs	r2, #0
 800945a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to 
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800945c:	4b60      	ldr	r3, [pc, #384]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3304      	adds	r3, #4
 8009462:	4a5f      	ldr	r2, [pc, #380]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 8009464:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8009466:	4b5e      	ldr	r3, [pc, #376]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	4b5e      	ldr	r3, [pc, #376]	; (80095e4 <_tx_timer_thread_entry+0x1c8>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d103      	bne.n	800947a <_tx_timer_thread_entry+0x5e>
            {
        
                _tx_timer_current_ptr =  _tx_timer_list_start;
 8009472:	4b5d      	ldr	r3, [pc, #372]	; (80095e8 <_tx_timer_thread_entry+0x1cc>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a5a      	ldr	r2, [pc, #360]	; (80095e0 <_tx_timer_thread_entry+0x1c4>)
 8009478:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800947a:	4b5c      	ldr	r3, [pc, #368]	; (80095ec <_tx_timer_thread_entry+0x1d0>)
 800947c:	2200      	movs	r2, #0
 800947e:	601a      	str	r2, [r3, #0]
 8009480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800948a:	f3ef 8310 	mrs	r3, PRIMASK
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009490:	b672      	cpsid	i
    return(primask_value);
 8009492:	6afb      	ldr	r3, [r7, #44]	; 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8009494:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8009496:	e079      	b.n	800958c <_tx_timer_thread_entry+0x170>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	63bb      	str	r3, [r7, #56]	; 0x38
            
                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80094a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d102      	bne.n	80094b4 <_tx_timer_thread_entry+0x98>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80094ae:	2300      	movs	r3, #0
 80094b0:	60fb      	str	r3, [r7, #12]
 80094b2:	e00e      	b.n	80094d2 <_tx_timer_thread_entry+0xb6>
                {

                    /* No, not the only expired timer.  */
            
                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80094b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b6:	695b      	ldr	r3, [r3, #20]
 80094b8:	637b      	str	r3, [r7, #52]	; 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094be:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80094c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80094c4:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80094c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c8:	f107 020c 	add.w	r2, r7, #12
 80094cc:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really 
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80094d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d911      	bls.n	80094fe <_tx_timer_thread_entry+0xe2>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80094da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =  
 80094e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e4:	601a      	str	r2, [r3, #0]
                
                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80094ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094ec:	f107 0208 	add.w	r2, r7, #8
 80094f0:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80094f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80094f6:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	60bb      	str	r3, [r7, #8]
 80094fc:	e01a      	b.n	8009534 <_tx_timer_thread_entry+0x118>
                    }
#endif
                  
                    /* Copy the calling function and ID into local variables before interrupts 
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80094fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	64bb      	str	r3, [r7, #72]	; 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8009504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	647b      	str	r3, [r7, #68]	; 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800950a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009510:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8009512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d009      	beq.n	800952e <_tx_timer_thread_entry+0x112>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will 
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800951a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800951c:	f107 0208 	add.w	r2, r7, #8
 8009520:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8009522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009524:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009526:	611a      	str	r2, [r3, #16]
                        
                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8009528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800952a:	60bb      	str	r3, [r7, #8]
 800952c:	e002      	b.n	8009534 <_tx_timer_thread_entry+0x118>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800952e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009530:	2200      	movs	r2, #0
 8009532:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8009534:	4a2e      	ldr	r2, [pc, #184]	; (80095f0 <_tx_timer_thread_entry+0x1d4>)
 8009536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009538:	6013      	str	r3, [r2, #0]
 800953a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800953c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800953e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009540:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8009544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <_tx_timer_thread_entry+0x134>
                {
            
                    (timeout_function) (timeout_param);
 800954a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800954e:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009550:	f3ef 8310 	mrs	r3, PRIMASK
 8009554:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009556:	b672      	cpsid	i
    return(primask_value);
 8009558:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800955a:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800955c:	4b24      	ldr	r3, [pc, #144]	; (80095f0 <_tx_timer_thread_entry+0x1d4>)
 800955e:	2200      	movs	r2, #0
 8009560:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009566:	429a      	cmp	r2, r3
 8009568:	d105      	bne.n	8009576 <_tx_timer_thread_entry+0x15a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800956a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956c:	2200      	movs	r2, #0
 800956e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8009570:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009572:	f7ff feb9 	bl	80092e8 <_tx_timer_system_activate>
 8009576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009578:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	f383 8810 	msr	PRIMASK, r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8009580:	f3ef 8310 	mrs	r3, PRIMASK
 8009584:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8009586:	b672      	cpsid	i
    return(primask_value);
 8009588:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800958a:	64fb      	str	r3, [r7, #76]	; 0x4c
            while (expired_timers != TX_NULL)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d182      	bne.n	8009498 <_tx_timer_thread_entry+0x7c>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8009592:	4b16      	ldr	r3, [pc, #88]	; (80095ec <_tx_timer_thread_entry+0x1d0>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d115      	bne.n	80095c6 <_tx_timer_thread_entry+0x1aa>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800959a:	4b16      	ldr	r3, [pc, #88]	; (80095f4 <_tx_timer_thread_entry+0x1d8>)
 800959c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Set the status to suspending, in order to indicate the 
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800959e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a0:	2203      	movs	r2, #3
 80095a2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80095a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095a6:	2201      	movs	r2, #1
 80095a8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80095aa:	4b13      	ldr	r3, [pc, #76]	; (80095f8 <_tx_timer_thread_entry+0x1dc>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	3301      	adds	r3, #1
 80095b0:	4a11      	ldr	r2, [pc, #68]	; (80095f8 <_tx_timer_thread_entry+0x1dc>)
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f383 8810 	msr	PRIMASK, r3

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80095be:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80095c0:	f7ff f928 	bl	8008814 <_tx_thread_system_suspend>
 80095c4:	e735      	b.n	8009432 <_tx_timer_thread_entry+0x16>
 80095c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f383 8810 	msr	PRIMASK, r3
            TX_DISABLE
 80095d0:	e72f      	b.n	8009432 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80095d2:	bf00      	nop
 80095d4:	3750      	adds	r7, #80	; 0x50
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	4154494d 	.word	0x4154494d
 80095e0:	24000428 	.word	0x24000428
 80095e4:	240004b8 	.word	0x240004b8
 80095e8:	24000570 	.word	0x24000570
 80095ec:	240004ac 	.word	0x240004ac
 80095f0:	2400056c 	.word	0x2400056c
 80095f4:	240004bc 	.word	0x240004bc
 80095f8:	24000418 	.word	0x24000418

080095fc <__errno>:
 80095fc:	4b01      	ldr	r3, [pc, #4]	; (8009604 <__errno+0x8>)
 80095fe:	6818      	ldr	r0, [r3, #0]
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	2400001c 	.word	0x2400001c

08009608 <__libc_init_array>:
 8009608:	b570      	push	{r4, r5, r6, lr}
 800960a:	4e0d      	ldr	r6, [pc, #52]	; (8009640 <__libc_init_array+0x38>)
 800960c:	4c0d      	ldr	r4, [pc, #52]	; (8009644 <__libc_init_array+0x3c>)
 800960e:	1ba4      	subs	r4, r4, r6
 8009610:	10a4      	asrs	r4, r4, #2
 8009612:	2500      	movs	r5, #0
 8009614:	42a5      	cmp	r5, r4
 8009616:	d109      	bne.n	800962c <__libc_init_array+0x24>
 8009618:	4e0b      	ldr	r6, [pc, #44]	; (8009648 <__libc_init_array+0x40>)
 800961a:	4c0c      	ldr	r4, [pc, #48]	; (800964c <__libc_init_array+0x44>)
 800961c:	f000 fc88 	bl	8009f30 <_init>
 8009620:	1ba4      	subs	r4, r4, r6
 8009622:	10a4      	asrs	r4, r4, #2
 8009624:	2500      	movs	r5, #0
 8009626:	42a5      	cmp	r5, r4
 8009628:	d105      	bne.n	8009636 <__libc_init_array+0x2e>
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009630:	4798      	blx	r3
 8009632:	3501      	adds	r5, #1
 8009634:	e7ee      	b.n	8009614 <__libc_init_array+0xc>
 8009636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800963a:	4798      	blx	r3
 800963c:	3501      	adds	r5, #1
 800963e:	e7f2      	b.n	8009626 <__libc_init_array+0x1e>
 8009640:	0800a5b8 	.word	0x0800a5b8
 8009644:	0800a5b8 	.word	0x0800a5b8
 8009648:	0800a5b8 	.word	0x0800a5b8
 800964c:	0800a5bc 	.word	0x0800a5bc

08009650 <memset>:
 8009650:	4402      	add	r2, r0
 8009652:	4603      	mov	r3, r0
 8009654:	4293      	cmp	r3, r2
 8009656:	d100      	bne.n	800965a <memset+0xa>
 8009658:	4770      	bx	lr
 800965a:	f803 1b01 	strb.w	r1, [r3], #1
 800965e:	e7f9      	b.n	8009654 <memset+0x4>

08009660 <_puts_r>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	460e      	mov	r6, r1
 8009664:	4605      	mov	r5, r0
 8009666:	b118      	cbz	r0, 8009670 <_puts_r+0x10>
 8009668:	6983      	ldr	r3, [r0, #24]
 800966a:	b90b      	cbnz	r3, 8009670 <_puts_r+0x10>
 800966c:	f000 fa0c 	bl	8009a88 <__sinit>
 8009670:	69ab      	ldr	r3, [r5, #24]
 8009672:	68ac      	ldr	r4, [r5, #8]
 8009674:	b913      	cbnz	r3, 800967c <_puts_r+0x1c>
 8009676:	4628      	mov	r0, r5
 8009678:	f000 fa06 	bl	8009a88 <__sinit>
 800967c:	4b23      	ldr	r3, [pc, #140]	; (800970c <_puts_r+0xac>)
 800967e:	429c      	cmp	r4, r3
 8009680:	d117      	bne.n	80096b2 <_puts_r+0x52>
 8009682:	686c      	ldr	r4, [r5, #4]
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	071b      	lsls	r3, r3, #28
 8009688:	d51d      	bpl.n	80096c6 <_puts_r+0x66>
 800968a:	6923      	ldr	r3, [r4, #16]
 800968c:	b1db      	cbz	r3, 80096c6 <_puts_r+0x66>
 800968e:	3e01      	subs	r6, #1
 8009690:	68a3      	ldr	r3, [r4, #8]
 8009692:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009696:	3b01      	subs	r3, #1
 8009698:	60a3      	str	r3, [r4, #8]
 800969a:	b9e9      	cbnz	r1, 80096d8 <_puts_r+0x78>
 800969c:	2b00      	cmp	r3, #0
 800969e:	da2e      	bge.n	80096fe <_puts_r+0x9e>
 80096a0:	4622      	mov	r2, r4
 80096a2:	210a      	movs	r1, #10
 80096a4:	4628      	mov	r0, r5
 80096a6:	f000 f83f 	bl	8009728 <__swbuf_r>
 80096aa:	3001      	adds	r0, #1
 80096ac:	d011      	beq.n	80096d2 <_puts_r+0x72>
 80096ae:	200a      	movs	r0, #10
 80096b0:	e011      	b.n	80096d6 <_puts_r+0x76>
 80096b2:	4b17      	ldr	r3, [pc, #92]	; (8009710 <_puts_r+0xb0>)
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d101      	bne.n	80096bc <_puts_r+0x5c>
 80096b8:	68ac      	ldr	r4, [r5, #8]
 80096ba:	e7e3      	b.n	8009684 <_puts_r+0x24>
 80096bc:	4b15      	ldr	r3, [pc, #84]	; (8009714 <_puts_r+0xb4>)
 80096be:	429c      	cmp	r4, r3
 80096c0:	bf08      	it	eq
 80096c2:	68ec      	ldreq	r4, [r5, #12]
 80096c4:	e7de      	b.n	8009684 <_puts_r+0x24>
 80096c6:	4621      	mov	r1, r4
 80096c8:	4628      	mov	r0, r5
 80096ca:	f000 f87f 	bl	80097cc <__swsetup_r>
 80096ce:	2800      	cmp	r0, #0
 80096d0:	d0dd      	beq.n	800968e <_puts_r+0x2e>
 80096d2:	f04f 30ff 	mov.w	r0, #4294967295
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	2b00      	cmp	r3, #0
 80096da:	da04      	bge.n	80096e6 <_puts_r+0x86>
 80096dc:	69a2      	ldr	r2, [r4, #24]
 80096de:	429a      	cmp	r2, r3
 80096e0:	dc06      	bgt.n	80096f0 <_puts_r+0x90>
 80096e2:	290a      	cmp	r1, #10
 80096e4:	d004      	beq.n	80096f0 <_puts_r+0x90>
 80096e6:	6823      	ldr	r3, [r4, #0]
 80096e8:	1c5a      	adds	r2, r3, #1
 80096ea:	6022      	str	r2, [r4, #0]
 80096ec:	7019      	strb	r1, [r3, #0]
 80096ee:	e7cf      	b.n	8009690 <_puts_r+0x30>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4628      	mov	r0, r5
 80096f4:	f000 f818 	bl	8009728 <__swbuf_r>
 80096f8:	3001      	adds	r0, #1
 80096fa:	d1c9      	bne.n	8009690 <_puts_r+0x30>
 80096fc:	e7e9      	b.n	80096d2 <_puts_r+0x72>
 80096fe:	6823      	ldr	r3, [r4, #0]
 8009700:	200a      	movs	r0, #10
 8009702:	1c5a      	adds	r2, r3, #1
 8009704:	6022      	str	r2, [r4, #0]
 8009706:	7018      	strb	r0, [r3, #0]
 8009708:	e7e5      	b.n	80096d6 <_puts_r+0x76>
 800970a:	bf00      	nop
 800970c:	0800a570 	.word	0x0800a570
 8009710:	0800a590 	.word	0x0800a590
 8009714:	0800a550 	.word	0x0800a550

08009718 <puts>:
 8009718:	4b02      	ldr	r3, [pc, #8]	; (8009724 <puts+0xc>)
 800971a:	4601      	mov	r1, r0
 800971c:	6818      	ldr	r0, [r3, #0]
 800971e:	f7ff bf9f 	b.w	8009660 <_puts_r>
 8009722:	bf00      	nop
 8009724:	2400001c 	.word	0x2400001c

08009728 <__swbuf_r>:
 8009728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972a:	460e      	mov	r6, r1
 800972c:	4614      	mov	r4, r2
 800972e:	4605      	mov	r5, r0
 8009730:	b118      	cbz	r0, 800973a <__swbuf_r+0x12>
 8009732:	6983      	ldr	r3, [r0, #24]
 8009734:	b90b      	cbnz	r3, 800973a <__swbuf_r+0x12>
 8009736:	f000 f9a7 	bl	8009a88 <__sinit>
 800973a:	4b21      	ldr	r3, [pc, #132]	; (80097c0 <__swbuf_r+0x98>)
 800973c:	429c      	cmp	r4, r3
 800973e:	d12a      	bne.n	8009796 <__swbuf_r+0x6e>
 8009740:	686c      	ldr	r4, [r5, #4]
 8009742:	69a3      	ldr	r3, [r4, #24]
 8009744:	60a3      	str	r3, [r4, #8]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	071a      	lsls	r2, r3, #28
 800974a:	d52e      	bpl.n	80097aa <__swbuf_r+0x82>
 800974c:	6923      	ldr	r3, [r4, #16]
 800974e:	b363      	cbz	r3, 80097aa <__swbuf_r+0x82>
 8009750:	6923      	ldr	r3, [r4, #16]
 8009752:	6820      	ldr	r0, [r4, #0]
 8009754:	1ac0      	subs	r0, r0, r3
 8009756:	6963      	ldr	r3, [r4, #20]
 8009758:	b2f6      	uxtb	r6, r6
 800975a:	4283      	cmp	r3, r0
 800975c:	4637      	mov	r7, r6
 800975e:	dc04      	bgt.n	800976a <__swbuf_r+0x42>
 8009760:	4621      	mov	r1, r4
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f926 	bl	80099b4 <_fflush_r>
 8009768:	bb28      	cbnz	r0, 80097b6 <__swbuf_r+0x8e>
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	3b01      	subs	r3, #1
 800976e:	60a3      	str	r3, [r4, #8]
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	1c5a      	adds	r2, r3, #1
 8009774:	6022      	str	r2, [r4, #0]
 8009776:	701e      	strb	r6, [r3, #0]
 8009778:	6963      	ldr	r3, [r4, #20]
 800977a:	3001      	adds	r0, #1
 800977c:	4283      	cmp	r3, r0
 800977e:	d004      	beq.n	800978a <__swbuf_r+0x62>
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	07db      	lsls	r3, r3, #31
 8009784:	d519      	bpl.n	80097ba <__swbuf_r+0x92>
 8009786:	2e0a      	cmp	r6, #10
 8009788:	d117      	bne.n	80097ba <__swbuf_r+0x92>
 800978a:	4621      	mov	r1, r4
 800978c:	4628      	mov	r0, r5
 800978e:	f000 f911 	bl	80099b4 <_fflush_r>
 8009792:	b190      	cbz	r0, 80097ba <__swbuf_r+0x92>
 8009794:	e00f      	b.n	80097b6 <__swbuf_r+0x8e>
 8009796:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <__swbuf_r+0x9c>)
 8009798:	429c      	cmp	r4, r3
 800979a:	d101      	bne.n	80097a0 <__swbuf_r+0x78>
 800979c:	68ac      	ldr	r4, [r5, #8]
 800979e:	e7d0      	b.n	8009742 <__swbuf_r+0x1a>
 80097a0:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <__swbuf_r+0xa0>)
 80097a2:	429c      	cmp	r4, r3
 80097a4:	bf08      	it	eq
 80097a6:	68ec      	ldreq	r4, [r5, #12]
 80097a8:	e7cb      	b.n	8009742 <__swbuf_r+0x1a>
 80097aa:	4621      	mov	r1, r4
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 f80d 	bl	80097cc <__swsetup_r>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d0cc      	beq.n	8009750 <__swbuf_r+0x28>
 80097b6:	f04f 37ff 	mov.w	r7, #4294967295
 80097ba:	4638      	mov	r0, r7
 80097bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097be:	bf00      	nop
 80097c0:	0800a570 	.word	0x0800a570
 80097c4:	0800a590 	.word	0x0800a590
 80097c8:	0800a550 	.word	0x0800a550

080097cc <__swsetup_r>:
 80097cc:	4b32      	ldr	r3, [pc, #200]	; (8009898 <__swsetup_r+0xcc>)
 80097ce:	b570      	push	{r4, r5, r6, lr}
 80097d0:	681d      	ldr	r5, [r3, #0]
 80097d2:	4606      	mov	r6, r0
 80097d4:	460c      	mov	r4, r1
 80097d6:	b125      	cbz	r5, 80097e2 <__swsetup_r+0x16>
 80097d8:	69ab      	ldr	r3, [r5, #24]
 80097da:	b913      	cbnz	r3, 80097e2 <__swsetup_r+0x16>
 80097dc:	4628      	mov	r0, r5
 80097de:	f000 f953 	bl	8009a88 <__sinit>
 80097e2:	4b2e      	ldr	r3, [pc, #184]	; (800989c <__swsetup_r+0xd0>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d10f      	bne.n	8009808 <__swsetup_r+0x3c>
 80097e8:	686c      	ldr	r4, [r5, #4]
 80097ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	0715      	lsls	r5, r2, #28
 80097f2:	d42c      	bmi.n	800984e <__swsetup_r+0x82>
 80097f4:	06d0      	lsls	r0, r2, #27
 80097f6:	d411      	bmi.n	800981c <__swsetup_r+0x50>
 80097f8:	2209      	movs	r2, #9
 80097fa:	6032      	str	r2, [r6, #0]
 80097fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	f04f 30ff 	mov.w	r0, #4294967295
 8009806:	e03e      	b.n	8009886 <__swsetup_r+0xba>
 8009808:	4b25      	ldr	r3, [pc, #148]	; (80098a0 <__swsetup_r+0xd4>)
 800980a:	429c      	cmp	r4, r3
 800980c:	d101      	bne.n	8009812 <__swsetup_r+0x46>
 800980e:	68ac      	ldr	r4, [r5, #8]
 8009810:	e7eb      	b.n	80097ea <__swsetup_r+0x1e>
 8009812:	4b24      	ldr	r3, [pc, #144]	; (80098a4 <__swsetup_r+0xd8>)
 8009814:	429c      	cmp	r4, r3
 8009816:	bf08      	it	eq
 8009818:	68ec      	ldreq	r4, [r5, #12]
 800981a:	e7e6      	b.n	80097ea <__swsetup_r+0x1e>
 800981c:	0751      	lsls	r1, r2, #29
 800981e:	d512      	bpl.n	8009846 <__swsetup_r+0x7a>
 8009820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009822:	b141      	cbz	r1, 8009836 <__swsetup_r+0x6a>
 8009824:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009828:	4299      	cmp	r1, r3
 800982a:	d002      	beq.n	8009832 <__swsetup_r+0x66>
 800982c:	4630      	mov	r0, r6
 800982e:	f000 fa19 	bl	8009c64 <_free_r>
 8009832:	2300      	movs	r3, #0
 8009834:	6363      	str	r3, [r4, #52]	; 0x34
 8009836:	89a3      	ldrh	r3, [r4, #12]
 8009838:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800983c:	81a3      	strh	r3, [r4, #12]
 800983e:	2300      	movs	r3, #0
 8009840:	6063      	str	r3, [r4, #4]
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f043 0308 	orr.w	r3, r3, #8
 800984c:	81a3      	strh	r3, [r4, #12]
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	b94b      	cbnz	r3, 8009866 <__swsetup_r+0x9a>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800985c:	d003      	beq.n	8009866 <__swsetup_r+0x9a>
 800985e:	4621      	mov	r1, r4
 8009860:	4630      	mov	r0, r6
 8009862:	f000 f9bf 	bl	8009be4 <__smakebuf_r>
 8009866:	89a2      	ldrh	r2, [r4, #12]
 8009868:	f012 0301 	ands.w	r3, r2, #1
 800986c:	d00c      	beq.n	8009888 <__swsetup_r+0xbc>
 800986e:	2300      	movs	r3, #0
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	6963      	ldr	r3, [r4, #20]
 8009874:	425b      	negs	r3, r3
 8009876:	61a3      	str	r3, [r4, #24]
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b953      	cbnz	r3, 8009892 <__swsetup_r+0xc6>
 800987c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009880:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009884:	d1ba      	bne.n	80097fc <__swsetup_r+0x30>
 8009886:	bd70      	pop	{r4, r5, r6, pc}
 8009888:	0792      	lsls	r2, r2, #30
 800988a:	bf58      	it	pl
 800988c:	6963      	ldrpl	r3, [r4, #20]
 800988e:	60a3      	str	r3, [r4, #8]
 8009890:	e7f2      	b.n	8009878 <__swsetup_r+0xac>
 8009892:	2000      	movs	r0, #0
 8009894:	e7f7      	b.n	8009886 <__swsetup_r+0xba>
 8009896:	bf00      	nop
 8009898:	2400001c 	.word	0x2400001c
 800989c:	0800a570 	.word	0x0800a570
 80098a0:	0800a590 	.word	0x0800a590
 80098a4:	0800a550 	.word	0x0800a550

080098a8 <__sflush_r>:
 80098a8:	898a      	ldrh	r2, [r1, #12]
 80098aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ae:	4605      	mov	r5, r0
 80098b0:	0710      	lsls	r0, r2, #28
 80098b2:	460c      	mov	r4, r1
 80098b4:	d458      	bmi.n	8009968 <__sflush_r+0xc0>
 80098b6:	684b      	ldr	r3, [r1, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dc05      	bgt.n	80098c8 <__sflush_r+0x20>
 80098bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80098be:	2b00      	cmp	r3, #0
 80098c0:	dc02      	bgt.n	80098c8 <__sflush_r+0x20>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	d0f9      	beq.n	80098c2 <__sflush_r+0x1a>
 80098ce:	2300      	movs	r3, #0
 80098d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80098d4:	682f      	ldr	r7, [r5, #0]
 80098d6:	6a21      	ldr	r1, [r4, #32]
 80098d8:	602b      	str	r3, [r5, #0]
 80098da:	d032      	beq.n	8009942 <__sflush_r+0x9a>
 80098dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098de:	89a3      	ldrh	r3, [r4, #12]
 80098e0:	075a      	lsls	r2, r3, #29
 80098e2:	d505      	bpl.n	80098f0 <__sflush_r+0x48>
 80098e4:	6863      	ldr	r3, [r4, #4]
 80098e6:	1ac0      	subs	r0, r0, r3
 80098e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ea:	b10b      	cbz	r3, 80098f0 <__sflush_r+0x48>
 80098ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098ee:	1ac0      	subs	r0, r0, r3
 80098f0:	2300      	movs	r3, #0
 80098f2:	4602      	mov	r2, r0
 80098f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80098f6:	6a21      	ldr	r1, [r4, #32]
 80098f8:	4628      	mov	r0, r5
 80098fa:	47b0      	blx	r6
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	89a3      	ldrh	r3, [r4, #12]
 8009900:	d106      	bne.n	8009910 <__sflush_r+0x68>
 8009902:	6829      	ldr	r1, [r5, #0]
 8009904:	291d      	cmp	r1, #29
 8009906:	d848      	bhi.n	800999a <__sflush_r+0xf2>
 8009908:	4a29      	ldr	r2, [pc, #164]	; (80099b0 <__sflush_r+0x108>)
 800990a:	40ca      	lsrs	r2, r1
 800990c:	07d6      	lsls	r6, r2, #31
 800990e:	d544      	bpl.n	800999a <__sflush_r+0xf2>
 8009910:	2200      	movs	r2, #0
 8009912:	6062      	str	r2, [r4, #4]
 8009914:	04d9      	lsls	r1, r3, #19
 8009916:	6922      	ldr	r2, [r4, #16]
 8009918:	6022      	str	r2, [r4, #0]
 800991a:	d504      	bpl.n	8009926 <__sflush_r+0x7e>
 800991c:	1c42      	adds	r2, r0, #1
 800991e:	d101      	bne.n	8009924 <__sflush_r+0x7c>
 8009920:	682b      	ldr	r3, [r5, #0]
 8009922:	b903      	cbnz	r3, 8009926 <__sflush_r+0x7e>
 8009924:	6560      	str	r0, [r4, #84]	; 0x54
 8009926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009928:	602f      	str	r7, [r5, #0]
 800992a:	2900      	cmp	r1, #0
 800992c:	d0c9      	beq.n	80098c2 <__sflush_r+0x1a>
 800992e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009932:	4299      	cmp	r1, r3
 8009934:	d002      	beq.n	800993c <__sflush_r+0x94>
 8009936:	4628      	mov	r0, r5
 8009938:	f000 f994 	bl	8009c64 <_free_r>
 800993c:	2000      	movs	r0, #0
 800993e:	6360      	str	r0, [r4, #52]	; 0x34
 8009940:	e7c0      	b.n	80098c4 <__sflush_r+0x1c>
 8009942:	2301      	movs	r3, #1
 8009944:	4628      	mov	r0, r5
 8009946:	47b0      	blx	r6
 8009948:	1c41      	adds	r1, r0, #1
 800994a:	d1c8      	bne.n	80098de <__sflush_r+0x36>
 800994c:	682b      	ldr	r3, [r5, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d0c5      	beq.n	80098de <__sflush_r+0x36>
 8009952:	2b1d      	cmp	r3, #29
 8009954:	d001      	beq.n	800995a <__sflush_r+0xb2>
 8009956:	2b16      	cmp	r3, #22
 8009958:	d101      	bne.n	800995e <__sflush_r+0xb6>
 800995a:	602f      	str	r7, [r5, #0]
 800995c:	e7b1      	b.n	80098c2 <__sflush_r+0x1a>
 800995e:	89a3      	ldrh	r3, [r4, #12]
 8009960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009964:	81a3      	strh	r3, [r4, #12]
 8009966:	e7ad      	b.n	80098c4 <__sflush_r+0x1c>
 8009968:	690f      	ldr	r7, [r1, #16]
 800996a:	2f00      	cmp	r7, #0
 800996c:	d0a9      	beq.n	80098c2 <__sflush_r+0x1a>
 800996e:	0793      	lsls	r3, r2, #30
 8009970:	680e      	ldr	r6, [r1, #0]
 8009972:	bf08      	it	eq
 8009974:	694b      	ldreq	r3, [r1, #20]
 8009976:	600f      	str	r7, [r1, #0]
 8009978:	bf18      	it	ne
 800997a:	2300      	movne	r3, #0
 800997c:	eba6 0807 	sub.w	r8, r6, r7
 8009980:	608b      	str	r3, [r1, #8]
 8009982:	f1b8 0f00 	cmp.w	r8, #0
 8009986:	dd9c      	ble.n	80098c2 <__sflush_r+0x1a>
 8009988:	4643      	mov	r3, r8
 800998a:	463a      	mov	r2, r7
 800998c:	6a21      	ldr	r1, [r4, #32]
 800998e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009990:	4628      	mov	r0, r5
 8009992:	47b0      	blx	r6
 8009994:	2800      	cmp	r0, #0
 8009996:	dc06      	bgt.n	80099a6 <__sflush_r+0xfe>
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800999e:	81a3      	strh	r3, [r4, #12]
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	e78e      	b.n	80098c4 <__sflush_r+0x1c>
 80099a6:	4407      	add	r7, r0
 80099a8:	eba8 0800 	sub.w	r8, r8, r0
 80099ac:	e7e9      	b.n	8009982 <__sflush_r+0xda>
 80099ae:	bf00      	nop
 80099b0:	20400001 	.word	0x20400001

080099b4 <_fflush_r>:
 80099b4:	b538      	push	{r3, r4, r5, lr}
 80099b6:	690b      	ldr	r3, [r1, #16]
 80099b8:	4605      	mov	r5, r0
 80099ba:	460c      	mov	r4, r1
 80099bc:	b1db      	cbz	r3, 80099f6 <_fflush_r+0x42>
 80099be:	b118      	cbz	r0, 80099c8 <_fflush_r+0x14>
 80099c0:	6983      	ldr	r3, [r0, #24]
 80099c2:	b90b      	cbnz	r3, 80099c8 <_fflush_r+0x14>
 80099c4:	f000 f860 	bl	8009a88 <__sinit>
 80099c8:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <_fflush_r+0x48>)
 80099ca:	429c      	cmp	r4, r3
 80099cc:	d109      	bne.n	80099e2 <_fflush_r+0x2e>
 80099ce:	686c      	ldr	r4, [r5, #4]
 80099d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d4:	b17b      	cbz	r3, 80099f6 <_fflush_r+0x42>
 80099d6:	4621      	mov	r1, r4
 80099d8:	4628      	mov	r0, r5
 80099da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099de:	f7ff bf63 	b.w	80098a8 <__sflush_r>
 80099e2:	4b07      	ldr	r3, [pc, #28]	; (8009a00 <_fflush_r+0x4c>)
 80099e4:	429c      	cmp	r4, r3
 80099e6:	d101      	bne.n	80099ec <_fflush_r+0x38>
 80099e8:	68ac      	ldr	r4, [r5, #8]
 80099ea:	e7f1      	b.n	80099d0 <_fflush_r+0x1c>
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <_fflush_r+0x50>)
 80099ee:	429c      	cmp	r4, r3
 80099f0:	bf08      	it	eq
 80099f2:	68ec      	ldreq	r4, [r5, #12]
 80099f4:	e7ec      	b.n	80099d0 <_fflush_r+0x1c>
 80099f6:	2000      	movs	r0, #0
 80099f8:	bd38      	pop	{r3, r4, r5, pc}
 80099fa:	bf00      	nop
 80099fc:	0800a570 	.word	0x0800a570
 8009a00:	0800a590 	.word	0x0800a590
 8009a04:	0800a550 	.word	0x0800a550

08009a08 <std>:
 8009a08:	2300      	movs	r3, #0
 8009a0a:	b510      	push	{r4, lr}
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009a12:	6083      	str	r3, [r0, #8]
 8009a14:	8181      	strh	r1, [r0, #12]
 8009a16:	6643      	str	r3, [r0, #100]	; 0x64
 8009a18:	81c2      	strh	r2, [r0, #14]
 8009a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a1e:	6183      	str	r3, [r0, #24]
 8009a20:	4619      	mov	r1, r3
 8009a22:	2208      	movs	r2, #8
 8009a24:	305c      	adds	r0, #92	; 0x5c
 8009a26:	f7ff fe13 	bl	8009650 <memset>
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <std+0x38>)
 8009a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8009a2e:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <std+0x3c>)
 8009a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a32:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <std+0x40>)
 8009a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a36:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <std+0x44>)
 8009a38:	6224      	str	r4, [r4, #32]
 8009a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8009a3c:	bd10      	pop	{r4, pc}
 8009a3e:	bf00      	nop
 8009a40:	08009dd5 	.word	0x08009dd5
 8009a44:	08009df7 	.word	0x08009df7
 8009a48:	08009e2f 	.word	0x08009e2f
 8009a4c:	08009e53 	.word	0x08009e53

08009a50 <_cleanup_r>:
 8009a50:	4901      	ldr	r1, [pc, #4]	; (8009a58 <_cleanup_r+0x8>)
 8009a52:	f000 b885 	b.w	8009b60 <_fwalk_reent>
 8009a56:	bf00      	nop
 8009a58:	080099b5 	.word	0x080099b5

08009a5c <__sfmoreglue>:
 8009a5c:	b570      	push	{r4, r5, r6, lr}
 8009a5e:	1e4a      	subs	r2, r1, #1
 8009a60:	2568      	movs	r5, #104	; 0x68
 8009a62:	4355      	muls	r5, r2
 8009a64:	460e      	mov	r6, r1
 8009a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a6a:	f000 f949 	bl	8009d00 <_malloc_r>
 8009a6e:	4604      	mov	r4, r0
 8009a70:	b140      	cbz	r0, 8009a84 <__sfmoreglue+0x28>
 8009a72:	2100      	movs	r1, #0
 8009a74:	e9c0 1600 	strd	r1, r6, [r0]
 8009a78:	300c      	adds	r0, #12
 8009a7a:	60a0      	str	r0, [r4, #8]
 8009a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a80:	f7ff fde6 	bl	8009650 <memset>
 8009a84:	4620      	mov	r0, r4
 8009a86:	bd70      	pop	{r4, r5, r6, pc}

08009a88 <__sinit>:
 8009a88:	6983      	ldr	r3, [r0, #24]
 8009a8a:	b510      	push	{r4, lr}
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	bb33      	cbnz	r3, 8009ade <__sinit+0x56>
 8009a90:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009a94:	6503      	str	r3, [r0, #80]	; 0x50
 8009a96:	4b12      	ldr	r3, [pc, #72]	; (8009ae0 <__sinit+0x58>)
 8009a98:	4a12      	ldr	r2, [pc, #72]	; (8009ae4 <__sinit+0x5c>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6282      	str	r2, [r0, #40]	; 0x28
 8009a9e:	4298      	cmp	r0, r3
 8009aa0:	bf04      	itt	eq
 8009aa2:	2301      	moveq	r3, #1
 8009aa4:	6183      	streq	r3, [r0, #24]
 8009aa6:	f000 f81f 	bl	8009ae8 <__sfp>
 8009aaa:	6060      	str	r0, [r4, #4]
 8009aac:	4620      	mov	r0, r4
 8009aae:	f000 f81b 	bl	8009ae8 <__sfp>
 8009ab2:	60a0      	str	r0, [r4, #8]
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f000 f817 	bl	8009ae8 <__sfp>
 8009aba:	2200      	movs	r2, #0
 8009abc:	60e0      	str	r0, [r4, #12]
 8009abe:	2104      	movs	r1, #4
 8009ac0:	6860      	ldr	r0, [r4, #4]
 8009ac2:	f7ff ffa1 	bl	8009a08 <std>
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	2109      	movs	r1, #9
 8009aca:	68a0      	ldr	r0, [r4, #8]
 8009acc:	f7ff ff9c 	bl	8009a08 <std>
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	2112      	movs	r1, #18
 8009ad4:	68e0      	ldr	r0, [r4, #12]
 8009ad6:	f7ff ff97 	bl	8009a08 <std>
 8009ada:	2301      	movs	r3, #1
 8009adc:	61a3      	str	r3, [r4, #24]
 8009ade:	bd10      	pop	{r4, pc}
 8009ae0:	0800a54c 	.word	0x0800a54c
 8009ae4:	08009a51 	.word	0x08009a51

08009ae8 <__sfp>:
 8009ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aea:	4b1b      	ldr	r3, [pc, #108]	; (8009b58 <__sfp+0x70>)
 8009aec:	681e      	ldr	r6, [r3, #0]
 8009aee:	69b3      	ldr	r3, [r6, #24]
 8009af0:	4607      	mov	r7, r0
 8009af2:	b913      	cbnz	r3, 8009afa <__sfp+0x12>
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffc7 	bl	8009a88 <__sinit>
 8009afa:	3648      	adds	r6, #72	; 0x48
 8009afc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	d503      	bpl.n	8009b0c <__sfp+0x24>
 8009b04:	6833      	ldr	r3, [r6, #0]
 8009b06:	b133      	cbz	r3, 8009b16 <__sfp+0x2e>
 8009b08:	6836      	ldr	r6, [r6, #0]
 8009b0a:	e7f7      	b.n	8009afc <__sfp+0x14>
 8009b0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b10:	b16d      	cbz	r5, 8009b2e <__sfp+0x46>
 8009b12:	3468      	adds	r4, #104	; 0x68
 8009b14:	e7f4      	b.n	8009b00 <__sfp+0x18>
 8009b16:	2104      	movs	r1, #4
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ff9f 	bl	8009a5c <__sfmoreglue>
 8009b1e:	6030      	str	r0, [r6, #0]
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1f1      	bne.n	8009b08 <__sfp+0x20>
 8009b24:	230c      	movs	r3, #12
 8009b26:	603b      	str	r3, [r7, #0]
 8009b28:	4604      	mov	r4, r0
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b2e:	4b0b      	ldr	r3, [pc, #44]	; (8009b5c <__sfp+0x74>)
 8009b30:	6665      	str	r5, [r4, #100]	; 0x64
 8009b32:	e9c4 5500 	strd	r5, r5, [r4]
 8009b36:	60a5      	str	r5, [r4, #8]
 8009b38:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009b3c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009b40:	2208      	movs	r2, #8
 8009b42:	4629      	mov	r1, r5
 8009b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b48:	f7ff fd82 	bl	8009650 <memset>
 8009b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b54:	e7e9      	b.n	8009b2a <__sfp+0x42>
 8009b56:	bf00      	nop
 8009b58:	0800a54c 	.word	0x0800a54c
 8009b5c:	ffff0001 	.word	0xffff0001

08009b60 <_fwalk_reent>:
 8009b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b64:	4680      	mov	r8, r0
 8009b66:	4689      	mov	r9, r1
 8009b68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b6c:	2600      	movs	r6, #0
 8009b6e:	b914      	cbnz	r4, 8009b76 <_fwalk_reent+0x16>
 8009b70:	4630      	mov	r0, r6
 8009b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b76:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8009b7a:	3f01      	subs	r7, #1
 8009b7c:	d501      	bpl.n	8009b82 <_fwalk_reent+0x22>
 8009b7e:	6824      	ldr	r4, [r4, #0]
 8009b80:	e7f5      	b.n	8009b6e <_fwalk_reent+0xe>
 8009b82:	89ab      	ldrh	r3, [r5, #12]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d907      	bls.n	8009b98 <_fwalk_reent+0x38>
 8009b88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	d003      	beq.n	8009b98 <_fwalk_reent+0x38>
 8009b90:	4629      	mov	r1, r5
 8009b92:	4640      	mov	r0, r8
 8009b94:	47c8      	blx	r9
 8009b96:	4306      	orrs	r6, r0
 8009b98:	3568      	adds	r5, #104	; 0x68
 8009b9a:	e7ee      	b.n	8009b7a <_fwalk_reent+0x1a>

08009b9c <__swhatbuf_r>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	460e      	mov	r6, r1
 8009ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ba4:	2900      	cmp	r1, #0
 8009ba6:	b096      	sub	sp, #88	; 0x58
 8009ba8:	4614      	mov	r4, r2
 8009baa:	461d      	mov	r5, r3
 8009bac:	da07      	bge.n	8009bbe <__swhatbuf_r+0x22>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	602b      	str	r3, [r5, #0]
 8009bb2:	89b3      	ldrh	r3, [r6, #12]
 8009bb4:	061a      	lsls	r2, r3, #24
 8009bb6:	d410      	bmi.n	8009bda <__swhatbuf_r+0x3e>
 8009bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bbc:	e00e      	b.n	8009bdc <__swhatbuf_r+0x40>
 8009bbe:	466a      	mov	r2, sp
 8009bc0:	f000 f96e 	bl	8009ea0 <_fstat_r>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	dbf2      	blt.n	8009bae <__swhatbuf_r+0x12>
 8009bc8:	9a01      	ldr	r2, [sp, #4]
 8009bca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009bce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009bd2:	425a      	negs	r2, r3
 8009bd4:	415a      	adcs	r2, r3
 8009bd6:	602a      	str	r2, [r5, #0]
 8009bd8:	e7ee      	b.n	8009bb8 <__swhatbuf_r+0x1c>
 8009bda:	2340      	movs	r3, #64	; 0x40
 8009bdc:	2000      	movs	r0, #0
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	b016      	add	sp, #88	; 0x58
 8009be2:	bd70      	pop	{r4, r5, r6, pc}

08009be4 <__smakebuf_r>:
 8009be4:	898b      	ldrh	r3, [r1, #12]
 8009be6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009be8:	079d      	lsls	r5, r3, #30
 8009bea:	4606      	mov	r6, r0
 8009bec:	460c      	mov	r4, r1
 8009bee:	d507      	bpl.n	8009c00 <__smakebuf_r+0x1c>
 8009bf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bf4:	6023      	str	r3, [r4, #0]
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	6163      	str	r3, [r4, #20]
 8009bfc:	b002      	add	sp, #8
 8009bfe:	bd70      	pop	{r4, r5, r6, pc}
 8009c00:	ab01      	add	r3, sp, #4
 8009c02:	466a      	mov	r2, sp
 8009c04:	f7ff ffca 	bl	8009b9c <__swhatbuf_r>
 8009c08:	9900      	ldr	r1, [sp, #0]
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	4630      	mov	r0, r6
 8009c0e:	f000 f877 	bl	8009d00 <_malloc_r>
 8009c12:	b948      	cbnz	r0, 8009c28 <__smakebuf_r+0x44>
 8009c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c18:	059a      	lsls	r2, r3, #22
 8009c1a:	d4ef      	bmi.n	8009bfc <__smakebuf_r+0x18>
 8009c1c:	f023 0303 	bic.w	r3, r3, #3
 8009c20:	f043 0302 	orr.w	r3, r3, #2
 8009c24:	81a3      	strh	r3, [r4, #12]
 8009c26:	e7e3      	b.n	8009bf0 <__smakebuf_r+0xc>
 8009c28:	4b0d      	ldr	r3, [pc, #52]	; (8009c60 <__smakebuf_r+0x7c>)
 8009c2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009c2c:	89a3      	ldrh	r3, [r4, #12]
 8009c2e:	6020      	str	r0, [r4, #0]
 8009c30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c34:	81a3      	strh	r3, [r4, #12]
 8009c36:	9b00      	ldr	r3, [sp, #0]
 8009c38:	6163      	str	r3, [r4, #20]
 8009c3a:	9b01      	ldr	r3, [sp, #4]
 8009c3c:	6120      	str	r0, [r4, #16]
 8009c3e:	b15b      	cbz	r3, 8009c58 <__smakebuf_r+0x74>
 8009c40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 f93d 	bl	8009ec4 <_isatty_r>
 8009c4a:	b128      	cbz	r0, 8009c58 <__smakebuf_r+0x74>
 8009c4c:	89a3      	ldrh	r3, [r4, #12]
 8009c4e:	f023 0303 	bic.w	r3, r3, #3
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	81a3      	strh	r3, [r4, #12]
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	431d      	orrs	r5, r3
 8009c5c:	81a5      	strh	r5, [r4, #12]
 8009c5e:	e7cd      	b.n	8009bfc <__smakebuf_r+0x18>
 8009c60:	08009a51 	.word	0x08009a51

08009c64 <_free_r>:
 8009c64:	b538      	push	{r3, r4, r5, lr}
 8009c66:	4605      	mov	r5, r0
 8009c68:	2900      	cmp	r1, #0
 8009c6a:	d045      	beq.n	8009cf8 <_free_r+0x94>
 8009c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c70:	1f0c      	subs	r4, r1, #4
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	bfb8      	it	lt
 8009c76:	18e4      	addlt	r4, r4, r3
 8009c78:	f000 f946 	bl	8009f08 <__malloc_lock>
 8009c7c:	4a1f      	ldr	r2, [pc, #124]	; (8009cfc <_free_r+0x98>)
 8009c7e:	6813      	ldr	r3, [r2, #0]
 8009c80:	4610      	mov	r0, r2
 8009c82:	b933      	cbnz	r3, 8009c92 <_free_r+0x2e>
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	6014      	str	r4, [r2, #0]
 8009c88:	4628      	mov	r0, r5
 8009c8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c8e:	f000 b93c 	b.w	8009f0a <__malloc_unlock>
 8009c92:	42a3      	cmp	r3, r4
 8009c94:	d90c      	bls.n	8009cb0 <_free_r+0x4c>
 8009c96:	6821      	ldr	r1, [r4, #0]
 8009c98:	1862      	adds	r2, r4, r1
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	bf04      	itt	eq
 8009c9e:	681a      	ldreq	r2, [r3, #0]
 8009ca0:	685b      	ldreq	r3, [r3, #4]
 8009ca2:	6063      	str	r3, [r4, #4]
 8009ca4:	bf04      	itt	eq
 8009ca6:	1852      	addeq	r2, r2, r1
 8009ca8:	6022      	streq	r2, [r4, #0]
 8009caa:	6004      	str	r4, [r0, #0]
 8009cac:	e7ec      	b.n	8009c88 <_free_r+0x24>
 8009cae:	4613      	mov	r3, r2
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	b10a      	cbz	r2, 8009cb8 <_free_r+0x54>
 8009cb4:	42a2      	cmp	r2, r4
 8009cb6:	d9fa      	bls.n	8009cae <_free_r+0x4a>
 8009cb8:	6819      	ldr	r1, [r3, #0]
 8009cba:	1858      	adds	r0, r3, r1
 8009cbc:	42a0      	cmp	r0, r4
 8009cbe:	d10b      	bne.n	8009cd8 <_free_r+0x74>
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	4401      	add	r1, r0
 8009cc4:	1858      	adds	r0, r3, r1
 8009cc6:	4282      	cmp	r2, r0
 8009cc8:	6019      	str	r1, [r3, #0]
 8009cca:	d1dd      	bne.n	8009c88 <_free_r+0x24>
 8009ccc:	6810      	ldr	r0, [r2, #0]
 8009cce:	6852      	ldr	r2, [r2, #4]
 8009cd0:	605a      	str	r2, [r3, #4]
 8009cd2:	4401      	add	r1, r0
 8009cd4:	6019      	str	r1, [r3, #0]
 8009cd6:	e7d7      	b.n	8009c88 <_free_r+0x24>
 8009cd8:	d902      	bls.n	8009ce0 <_free_r+0x7c>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	e7d3      	b.n	8009c88 <_free_r+0x24>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	1821      	adds	r1, r4, r0
 8009ce4:	428a      	cmp	r2, r1
 8009ce6:	bf04      	itt	eq
 8009ce8:	6811      	ldreq	r1, [r2, #0]
 8009cea:	6852      	ldreq	r2, [r2, #4]
 8009cec:	6062      	str	r2, [r4, #4]
 8009cee:	bf04      	itt	eq
 8009cf0:	1809      	addeq	r1, r1, r0
 8009cf2:	6021      	streq	r1, [r4, #0]
 8009cf4:	605c      	str	r4, [r3, #4]
 8009cf6:	e7c7      	b.n	8009c88 <_free_r+0x24>
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	240000a0 	.word	0x240000a0

08009d00 <_malloc_r>:
 8009d00:	b570      	push	{r4, r5, r6, lr}
 8009d02:	1ccd      	adds	r5, r1, #3
 8009d04:	f025 0503 	bic.w	r5, r5, #3
 8009d08:	3508      	adds	r5, #8
 8009d0a:	2d0c      	cmp	r5, #12
 8009d0c:	bf38      	it	cc
 8009d0e:	250c      	movcc	r5, #12
 8009d10:	2d00      	cmp	r5, #0
 8009d12:	4606      	mov	r6, r0
 8009d14:	db01      	blt.n	8009d1a <_malloc_r+0x1a>
 8009d16:	42a9      	cmp	r1, r5
 8009d18:	d903      	bls.n	8009d22 <_malloc_r+0x22>
 8009d1a:	230c      	movs	r3, #12
 8009d1c:	6033      	str	r3, [r6, #0]
 8009d1e:	2000      	movs	r0, #0
 8009d20:	bd70      	pop	{r4, r5, r6, pc}
 8009d22:	f000 f8f1 	bl	8009f08 <__malloc_lock>
 8009d26:	4a21      	ldr	r2, [pc, #132]	; (8009dac <_malloc_r+0xac>)
 8009d28:	6814      	ldr	r4, [r2, #0]
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	b991      	cbnz	r1, 8009d54 <_malloc_r+0x54>
 8009d2e:	4c20      	ldr	r4, [pc, #128]	; (8009db0 <_malloc_r+0xb0>)
 8009d30:	6823      	ldr	r3, [r4, #0]
 8009d32:	b91b      	cbnz	r3, 8009d3c <_malloc_r+0x3c>
 8009d34:	4630      	mov	r0, r6
 8009d36:	f000 f83d 	bl	8009db4 <_sbrk_r>
 8009d3a:	6020      	str	r0, [r4, #0]
 8009d3c:	4629      	mov	r1, r5
 8009d3e:	4630      	mov	r0, r6
 8009d40:	f000 f838 	bl	8009db4 <_sbrk_r>
 8009d44:	1c43      	adds	r3, r0, #1
 8009d46:	d124      	bne.n	8009d92 <_malloc_r+0x92>
 8009d48:	230c      	movs	r3, #12
 8009d4a:	6033      	str	r3, [r6, #0]
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 f8dc 	bl	8009f0a <__malloc_unlock>
 8009d52:	e7e4      	b.n	8009d1e <_malloc_r+0x1e>
 8009d54:	680b      	ldr	r3, [r1, #0]
 8009d56:	1b5b      	subs	r3, r3, r5
 8009d58:	d418      	bmi.n	8009d8c <_malloc_r+0x8c>
 8009d5a:	2b0b      	cmp	r3, #11
 8009d5c:	d90f      	bls.n	8009d7e <_malloc_r+0x7e>
 8009d5e:	600b      	str	r3, [r1, #0]
 8009d60:	50cd      	str	r5, [r1, r3]
 8009d62:	18cc      	adds	r4, r1, r3
 8009d64:	4630      	mov	r0, r6
 8009d66:	f000 f8d0 	bl	8009f0a <__malloc_unlock>
 8009d6a:	f104 000b 	add.w	r0, r4, #11
 8009d6e:	1d23      	adds	r3, r4, #4
 8009d70:	f020 0007 	bic.w	r0, r0, #7
 8009d74:	1ac3      	subs	r3, r0, r3
 8009d76:	d0d3      	beq.n	8009d20 <_malloc_r+0x20>
 8009d78:	425a      	negs	r2, r3
 8009d7a:	50e2      	str	r2, [r4, r3]
 8009d7c:	e7d0      	b.n	8009d20 <_malloc_r+0x20>
 8009d7e:	428c      	cmp	r4, r1
 8009d80:	684b      	ldr	r3, [r1, #4]
 8009d82:	bf16      	itet	ne
 8009d84:	6063      	strne	r3, [r4, #4]
 8009d86:	6013      	streq	r3, [r2, #0]
 8009d88:	460c      	movne	r4, r1
 8009d8a:	e7eb      	b.n	8009d64 <_malloc_r+0x64>
 8009d8c:	460c      	mov	r4, r1
 8009d8e:	6849      	ldr	r1, [r1, #4]
 8009d90:	e7cc      	b.n	8009d2c <_malloc_r+0x2c>
 8009d92:	1cc4      	adds	r4, r0, #3
 8009d94:	f024 0403 	bic.w	r4, r4, #3
 8009d98:	42a0      	cmp	r0, r4
 8009d9a:	d005      	beq.n	8009da8 <_malloc_r+0xa8>
 8009d9c:	1a21      	subs	r1, r4, r0
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f000 f808 	bl	8009db4 <_sbrk_r>
 8009da4:	3001      	adds	r0, #1
 8009da6:	d0cf      	beq.n	8009d48 <_malloc_r+0x48>
 8009da8:	6025      	str	r5, [r4, #0]
 8009daa:	e7db      	b.n	8009d64 <_malloc_r+0x64>
 8009dac:	240000a0 	.word	0x240000a0
 8009db0:	240000a4 	.word	0x240000a4

08009db4 <_sbrk_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4c06      	ldr	r4, [pc, #24]	; (8009dd0 <_sbrk_r+0x1c>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4605      	mov	r5, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	6023      	str	r3, [r4, #0]
 8009dc0:	f7f7 fa00 	bl	80011c4 <_sbrk>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_sbrk_r+0x1a>
 8009dc8:	6823      	ldr	r3, [r4, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_sbrk_r+0x1a>
 8009dcc:	602b      	str	r3, [r5, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	2400098c 	.word	0x2400098c

08009dd4 <__sread>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	460c      	mov	r4, r1
 8009dd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ddc:	f000 f896 	bl	8009f0c <_read_r>
 8009de0:	2800      	cmp	r0, #0
 8009de2:	bfab      	itete	ge
 8009de4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009de6:	89a3      	ldrhlt	r3, [r4, #12]
 8009de8:	181b      	addge	r3, r3, r0
 8009dea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dee:	bfac      	ite	ge
 8009df0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009df2:	81a3      	strhlt	r3, [r4, #12]
 8009df4:	bd10      	pop	{r4, pc}

08009df6 <__swrite>:
 8009df6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	898b      	ldrh	r3, [r1, #12]
 8009dfe:	05db      	lsls	r3, r3, #23
 8009e00:	4605      	mov	r5, r0
 8009e02:	460c      	mov	r4, r1
 8009e04:	4616      	mov	r6, r2
 8009e06:	d505      	bpl.n	8009e14 <__swrite+0x1e>
 8009e08:	2302      	movs	r3, #2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e10:	f000 f868 	bl	8009ee4 <_lseek_r>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	4632      	mov	r2, r6
 8009e22:	463b      	mov	r3, r7
 8009e24:	4628      	mov	r0, r5
 8009e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e2a:	f000 b817 	b.w	8009e5c <_write_r>

08009e2e <__sseek>:
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	460c      	mov	r4, r1
 8009e32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e36:	f000 f855 	bl	8009ee4 <_lseek_r>
 8009e3a:	1c43      	adds	r3, r0, #1
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	bf15      	itete	ne
 8009e40:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e4a:	81a3      	strheq	r3, [r4, #12]
 8009e4c:	bf18      	it	ne
 8009e4e:	81a3      	strhne	r3, [r4, #12]
 8009e50:	bd10      	pop	{r4, pc}

08009e52 <__sclose>:
 8009e52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e56:	f000 b813 	b.w	8009e80 <_close_r>
	...

08009e5c <_write_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	4c07      	ldr	r4, [pc, #28]	; (8009e7c <_write_r+0x20>)
 8009e60:	4605      	mov	r5, r0
 8009e62:	4608      	mov	r0, r1
 8009e64:	4611      	mov	r1, r2
 8009e66:	2200      	movs	r2, #0
 8009e68:	6022      	str	r2, [r4, #0]
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f7f7 f959 	bl	8001122 <_write>
 8009e70:	1c43      	adds	r3, r0, #1
 8009e72:	d102      	bne.n	8009e7a <_write_r+0x1e>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	b103      	cbz	r3, 8009e7a <_write_r+0x1e>
 8009e78:	602b      	str	r3, [r5, #0]
 8009e7a:	bd38      	pop	{r3, r4, r5, pc}
 8009e7c:	2400098c 	.word	0x2400098c

08009e80 <_close_r>:
 8009e80:	b538      	push	{r3, r4, r5, lr}
 8009e82:	4c06      	ldr	r4, [pc, #24]	; (8009e9c <_close_r+0x1c>)
 8009e84:	2300      	movs	r3, #0
 8009e86:	4605      	mov	r5, r0
 8009e88:	4608      	mov	r0, r1
 8009e8a:	6023      	str	r3, [r4, #0]
 8009e8c:	f7f7 f965 	bl	800115a <_close>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_close_r+0x1a>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_close_r+0x1a>
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	2400098c 	.word	0x2400098c

08009ea0 <_fstat_r>:
 8009ea0:	b538      	push	{r3, r4, r5, lr}
 8009ea2:	4c07      	ldr	r4, [pc, #28]	; (8009ec0 <_fstat_r+0x20>)
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	4605      	mov	r5, r0
 8009ea8:	4608      	mov	r0, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	6023      	str	r3, [r4, #0]
 8009eae:	f7f7 f960 	bl	8001172 <_fstat>
 8009eb2:	1c43      	adds	r3, r0, #1
 8009eb4:	d102      	bne.n	8009ebc <_fstat_r+0x1c>
 8009eb6:	6823      	ldr	r3, [r4, #0]
 8009eb8:	b103      	cbz	r3, 8009ebc <_fstat_r+0x1c>
 8009eba:	602b      	str	r3, [r5, #0]
 8009ebc:	bd38      	pop	{r3, r4, r5, pc}
 8009ebe:	bf00      	nop
 8009ec0:	2400098c 	.word	0x2400098c

08009ec4 <_isatty_r>:
 8009ec4:	b538      	push	{r3, r4, r5, lr}
 8009ec6:	4c06      	ldr	r4, [pc, #24]	; (8009ee0 <_isatty_r+0x1c>)
 8009ec8:	2300      	movs	r3, #0
 8009eca:	4605      	mov	r5, r0
 8009ecc:	4608      	mov	r0, r1
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	f7f7 f95f 	bl	8001192 <_isatty>
 8009ed4:	1c43      	adds	r3, r0, #1
 8009ed6:	d102      	bne.n	8009ede <_isatty_r+0x1a>
 8009ed8:	6823      	ldr	r3, [r4, #0]
 8009eda:	b103      	cbz	r3, 8009ede <_isatty_r+0x1a>
 8009edc:	602b      	str	r3, [r5, #0]
 8009ede:	bd38      	pop	{r3, r4, r5, pc}
 8009ee0:	2400098c 	.word	0x2400098c

08009ee4 <_lseek_r>:
 8009ee4:	b538      	push	{r3, r4, r5, lr}
 8009ee6:	4c07      	ldr	r4, [pc, #28]	; (8009f04 <_lseek_r+0x20>)
 8009ee8:	4605      	mov	r5, r0
 8009eea:	4608      	mov	r0, r1
 8009eec:	4611      	mov	r1, r2
 8009eee:	2200      	movs	r2, #0
 8009ef0:	6022      	str	r2, [r4, #0]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f7f7 f958 	bl	80011a8 <_lseek>
 8009ef8:	1c43      	adds	r3, r0, #1
 8009efa:	d102      	bne.n	8009f02 <_lseek_r+0x1e>
 8009efc:	6823      	ldr	r3, [r4, #0]
 8009efe:	b103      	cbz	r3, 8009f02 <_lseek_r+0x1e>
 8009f00:	602b      	str	r3, [r5, #0]
 8009f02:	bd38      	pop	{r3, r4, r5, pc}
 8009f04:	2400098c 	.word	0x2400098c

08009f08 <__malloc_lock>:
 8009f08:	4770      	bx	lr

08009f0a <__malloc_unlock>:
 8009f0a:	4770      	bx	lr

08009f0c <_read_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4c07      	ldr	r4, [pc, #28]	; (8009f2c <_read_r+0x20>)
 8009f10:	4605      	mov	r5, r0
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	6022      	str	r2, [r4, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7f7 f8e4 	bl	80010e8 <_read>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_read_r+0x1e>
 8009f24:	6823      	ldr	r3, [r4, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_read_r+0x1e>
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	2400098c 	.word	0x2400098c

08009f30 <_init>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	bf00      	nop
 8009f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f36:	bc08      	pop	{r3}
 8009f38:	469e      	mov	lr, r3
 8009f3a:	4770      	bx	lr

08009f3c <_fini>:
 8009f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f3e:	bf00      	nop
 8009f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f42:	bc08      	pop	{r3}
 8009f44:	469e      	mov	lr, r3
 8009f46:	4770      	bx	lr
